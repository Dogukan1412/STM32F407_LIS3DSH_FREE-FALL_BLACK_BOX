
KARA_KUTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a194  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800a320  0800a320  0001a320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a510  0800a510  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a510  0800a510  0001a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a518  0800a518  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a518  0800a518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a51c  0800a51c  0001a51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000006bc  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000744  20000744  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001460b  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b35  00000000  00000000  000346c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  000371f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001210  00000000  00000000  00038548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ffc  00000000  00000000  00039758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b3c  00000000  00000000  0005d754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d506c  00000000  00000000  00076290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b2fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056cc  00000000  00000000  0014b34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a304 	.word	0x0800a304

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	0800a304 	.word	0x0800a304

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000eec:	23aa      	movs	r3, #170	; 0xaa
 8000eee:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000ef0:	8afa      	ldrh	r2, [r7, #22]
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2316      	movs	r3, #22
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	463b      	mov	r3, r7
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	21ee      	movs	r1, #238	; 0xee
 8000f04:	4836      	ldr	r0, [pc, #216]	; (8000fe0 <read_calliberation_data+0x10c>)
 8000f06:	f002 fdd3 	bl	8003ab0 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000f0a:	783b      	ldrb	r3, [r7, #0]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	787b      	ldrb	r3, [r7, #1]
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <read_calliberation_data+0x110>)
 8000f1a:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000f1c:	78bb      	ldrb	r3, [r7, #2]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <read_calliberation_data+0x114>)
 8000f2c:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000f2e:	793b      	ldrb	r3, [r7, #4]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	797b      	ldrb	r3, [r7, #5]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21a      	sxth	r2, r3
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <read_calliberation_data+0x118>)
 8000f3e:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <read_calliberation_data+0x11c>)
 8000f52:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000f54:	7a3b      	ldrb	r3, [r7, #8]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	7a7b      	ldrb	r3, [r7, #9]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <read_calliberation_data+0x120>)
 8000f66:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000f68:	7abb      	ldrb	r3, [r7, #10]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	7afb      	ldrb	r3, [r7, #11]
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <read_calliberation_data+0x124>)
 8000f7a:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000f7c:	7b3b      	ldrb	r3, [r7, #12]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	7b7b      	ldrb	r3, [r7, #13]
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <read_calliberation_data+0x128>)
 8000f8c:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000f8e:	7bbb      	ldrb	r3, [r7, #14]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <read_calliberation_data+0x12c>)
 8000f9e:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000fa0:	7c3b      	ldrb	r3, [r7, #16]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	7c7b      	ldrb	r3, [r7, #17]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <read_calliberation_data+0x130>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8000fb2:	7cbb      	ldrb	r3, [r7, #18]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	7cfb      	ldrb	r3, [r7, #19]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <read_calliberation_data+0x134>)
 8000fc2:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8000fc4:	7d3b      	ldrb	r3, [r7, #20]
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	7d7b      	ldrb	r3, [r7, #21]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <read_calliberation_data+0x138>)
 8000fd4:	801a      	strh	r2, [r3, #0]

}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000f4 	.word	0x200000f4
 8000fe4:	200000a4 	.word	0x200000a4
 8000fe8:	200000a6 	.word	0x200000a6
 8000fec:	200000a8 	.word	0x200000a8
 8000ff0:	200000aa 	.word	0x200000aa
 8000ff4:	200000ac 	.word	0x200000ac
 8000ff8:	200000ae 	.word	0x200000ae
 8000ffc:	200000b0 	.word	0x200000b0
 8001000:	200000b2 	.word	0x200000b2
 8001004:	200000b4 	.word	0x200000b4
 8001008:	200000b6 	.word	0x200000b6
 800100c:	200000b8 	.word	0x200000b8

08001010 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 8001016:	232e      	movs	r3, #46	; 0x2e
 8001018:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 800101a:	2300      	movs	r3, #0
 800101c:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	22f4      	movs	r2, #244	; 0xf4
 8001030:	21ee      	movs	r1, #238	; 0xee
 8001032:	480f      	ldr	r0, [pc, #60]	; (8001070 <Get_UTemp+0x60>)
 8001034:	f002 fc42 	bl	80038bc <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001038:	2005      	movs	r0, #5
 800103a:	f001 ffeb 	bl	8003014 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	2302      	movs	r3, #2
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	22f6      	movs	r2, #246	; 0xf6
 8001050:	21ee      	movs	r1, #238	; 0xee
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <Get_UTemp+0x60>)
 8001054:	f002 fd2c 	bl	8003ab0 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001058:	793b      	ldrb	r3, [r7, #4]
 800105a:	b29b      	uxth	r3, r3
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b29a      	uxth	r2, r3
 8001060:	797b      	ldrb	r3, [r7, #5]
 8001062:	b29b      	uxth	r3, r3
 8001064:	4413      	add	r3, r2
 8001066:	b29b      	uxth	r3, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200000f4 	.word	0x200000f4

08001074 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001078:	f7ff ffca 	bl	8001010 <Get_UTemp>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b3e      	ldr	r3, [pc, #248]	; (800117c <BMP180_GetTemp+0x108>)
 8001082:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001084:	4b3d      	ldr	r3, [pc, #244]	; (800117c <BMP180_GetTemp+0x108>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a3d      	ldr	r2, [pc, #244]	; (8001180 <BMP180_GetTemp+0x10c>)
 800108a:	8812      	ldrh	r2, [r2, #0]
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f9ec 	bl	800046c <__aeabi_i2d>
 8001094:	4604      	mov	r4, r0
 8001096:	460d      	mov	r5, r1
 8001098:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <BMP180_GetTemp+0x110>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff f9e5 	bl	800046c <__aeabi_i2d>
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <BMP180_GetTemp+0x114>)
 80010a8:	f7ff fb74 	bl	8000794 <__aeabi_ddiv>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff fa44 	bl	8000540 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fcee 	bl	8000aa0 <__aeabi_d2iz>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a31      	ldr	r2, [pc, #196]	; (800118c <BMP180_GetTemp+0x118>)
 80010c8:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <BMP180_GetTemp+0x11c>)
 80010cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f9cb 	bl	800046c <__aeabi_i2d>
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <BMP180_GetTemp+0x120>)
 80010dc:	f7ff fa30 	bl	8000540 <__aeabi_dmul>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4614      	mov	r4, r2
 80010e6:	461d      	mov	r5, r3
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <BMP180_GetTemp+0x124>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <BMP180_GetTemp+0x118>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f9b8 	bl	800046c <__aeabi_i2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4620      	mov	r0, r4
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff fb46 	bl	8000794 <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fcc6 	bl	8000aa0 <__aeabi_d2iz>
 8001114:	4603      	mov	r3, r0
 8001116:	4a21      	ldr	r2, [pc, #132]	; (800119c <BMP180_GetTemp+0x128>)
 8001118:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <BMP180_GetTemp+0x118>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <BMP180_GetTemp+0x128>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <BMP180_GetTemp+0x12c>)
 8001126:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <BMP180_GetTemp+0x12c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3308      	adds	r3, #8
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f99c 	bl	800046c <__aeabi_i2d>
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <BMP180_GetTemp+0x130>)
 800113a:	f7ff fb2b 	bl	8000794 <__aeabi_ddiv>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fcab 	bl	8000aa0 <__aeabi_d2iz>
 800114a:	4603      	mov	r3, r0
 800114c:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <BMP180_GetTemp+0x134>)
 800114e:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <BMP180_GetTemp+0x134>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f989 	bl	800046c <__aeabi_i2d>
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <BMP180_GetTemp+0x138>)
 8001160:	f7ff fb18 	bl	8000794 <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fce0 	bl	8000b30 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	ee07 3a90 	vmov	s15, r3
}
 8001176:	eeb0 0a67 	vmov.f32	s0, s15
 800117a:	bdb0      	pop	{r4, r5, r7, pc}
 800117c:	200000bc 	.word	0x200000bc
 8001180:	200000ae 	.word	0x200000ae
 8001184:	200000ac 	.word	0x200000ac
 8001188:	40e00000 	.word	0x40e00000
 800118c:	200000c4 	.word	0x200000c4
 8001190:	200000b6 	.word	0x200000b6
 8001194:	40a00000 	.word	0x40a00000
 8001198:	200000b8 	.word	0x200000b8
 800119c:	200000c8 	.word	0x200000c8
 80011a0:	200000d4 	.word	0x200000d4
 80011a4:	40300000 	.word	0x40300000
 80011a8:	200000e8 	.word	0x200000e8
 80011ac:	40240000 	.word	0x40240000

080011b0 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	019b      	lsls	r3, r3, #6
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	3334      	adds	r3, #52	; 0x34
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <Get_UPress+0xb4>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	81bb      	strh	r3, [r7, #12]
 80011cc:	2300      	movs	r3, #0
 80011ce:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	f107 030f 	add.w	r3, r7, #15
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	22f4      	movs	r2, #244	; 0xf4
 80011e4:	21ee      	movs	r1, #238	; 0xee
 80011e6:	4820      	ldr	r0, [pc, #128]	; (8001268 <Get_UPress+0xb8>)
 80011e8:	f002 fb68 	bl	80038bc <HAL_I2C_Mem_Write>
	switch (oss)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d81a      	bhi.n	8001228 <Get_UPress+0x78>
 80011f2:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <Get_UPress+0x48>)
 80011f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f8:	08001209 	.word	0x08001209
 80011fc:	08001211 	.word	0x08001211
 8001200:	08001219 	.word	0x08001219
 8001204:	08001221 	.word	0x08001221
	{
		case (0):
			HAL_Delay (5);
 8001208:	2005      	movs	r0, #5
 800120a:	f001 ff03 	bl	8003014 <HAL_Delay>
			break;
 800120e:	e00b      	b.n	8001228 <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 8001210:	2008      	movs	r0, #8
 8001212:	f001 feff 	bl	8003014 <HAL_Delay>
			break;
 8001216:	e007      	b.n	8001228 <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 8001218:	200e      	movs	r0, #14
 800121a:	f001 fefb 	bl	8003014 <HAL_Delay>
			break;
 800121e:	e003      	b.n	8001228 <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 8001220:	201a      	movs	r0, #26
 8001222:	f001 fef7 	bl	8003014 <HAL_Delay>
			break;
 8001226:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2303      	movs	r3, #3
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	22f6      	movs	r2, #246	; 0xf6
 800123c:	21ee      	movs	r1, #238	; 0xee
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <Get_UPress+0xb8>)
 8001240:	f002 fc36 	bl	8003ab0 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001244:	7b3b      	ldrb	r3, [r7, #12]
 8001246:	041a      	lsls	r2, r3, #16
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	4413      	add	r3, r2
 800124e:	7bba      	ldrb	r2, [r7, #14]
 8001250:	441a      	add	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f1c3 0308 	rsb	r3, r3, #8
 8001258:	fa42 f303 	asr.w	r3, r2, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0800a320 	.word	0x0800a320
 8001268:	200000f4 	.word	0x200000f4

0800126c <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 800126c:	b5b0      	push	{r4, r5, r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff9b 	bl	80011b0 <Get_UPress>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	4ba8      	ldr	r3, [pc, #672]	; (8001520 <BMP180_GetPress+0x2b4>)
 8001280:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001282:	4ba8      	ldr	r3, [pc, #672]	; (8001524 <BMP180_GetPress+0x2b8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4aa8      	ldr	r2, [pc, #672]	; (8001528 <BMP180_GetPress+0x2bc>)
 8001288:	8812      	ldrh	r2, [r2, #0]
 800128a:	1a9b      	subs	r3, r3, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8ed 	bl	800046c <__aeabi_i2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	4ba5      	ldr	r3, [pc, #660]	; (800152c <BMP180_GetPress+0x2c0>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f8e6 	bl	800046c <__aeabi_i2d>
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4ba2      	ldr	r3, [pc, #648]	; (8001530 <BMP180_GetPress+0x2c4>)
 80012a6:	f7ff fa75 	bl	8000794 <__aeabi_ddiv>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff f945 	bl	8000540 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fbef 	bl	8000aa0 <__aeabi_d2iz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a9b      	ldr	r2, [pc, #620]	; (8001534 <BMP180_GetPress+0x2c8>)
 80012c6:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80012c8:	4b9b      	ldr	r3, [pc, #620]	; (8001538 <BMP180_GetPress+0x2cc>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8cc 	bl	800046c <__aeabi_i2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b98      	ldr	r3, [pc, #608]	; (800153c <BMP180_GetPress+0x2d0>)
 80012da:	f7ff f931 	bl	8000540 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4614      	mov	r4, r2
 80012e4:	461d      	mov	r5, r3
 80012e6:	4b96      	ldr	r3, [pc, #600]	; (8001540 <BMP180_GetPress+0x2d4>)
 80012e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b91      	ldr	r3, [pc, #580]	; (8001534 <BMP180_GetPress+0x2c8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f8b9 	bl	800046c <__aeabi_i2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7ff fa47 	bl	8000794 <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fbc7 	bl	8000aa0 <__aeabi_d2iz>
 8001312:	4603      	mov	r3, r0
 8001314:	4a8b      	ldr	r2, [pc, #556]	; (8001544 <BMP180_GetPress+0x2d8>)
 8001316:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001318:	4b86      	ldr	r3, [pc, #536]	; (8001534 <BMP180_GetPress+0x2c8>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b89      	ldr	r3, [pc, #548]	; (8001544 <BMP180_GetPress+0x2d8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4413      	add	r3, r2
 8001322:	4a89      	ldr	r2, [pc, #548]	; (8001548 <BMP180_GetPress+0x2dc>)
 8001324:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001326:	4b88      	ldr	r3, [pc, #544]	; (8001548 <BMP180_GetPress+0x2dc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800132e:	4a87      	ldr	r2, [pc, #540]	; (800154c <BMP180_GetPress+0x2e0>)
 8001330:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001332:	4b87      	ldr	r3, [pc, #540]	; (8001550 <BMP180_GetPress+0x2e4>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f897 	bl	800046c <__aeabi_i2d>
 800133e:	4604      	mov	r4, r0
 8001340:	460d      	mov	r5, r1
 8001342:	4b82      	ldr	r3, [pc, #520]	; (800154c <BMP180_GetPress+0x2e0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a81      	ldr	r2, [pc, #516]	; (800154c <BMP180_GetPress+0x2e0>)
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f88c 	bl	800046c <__aeabi_i2d>
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b7e      	ldr	r3, [pc, #504]	; (8001554 <BMP180_GetPress+0x2e8>)
 800135a:	f7ff fa1b 	bl	8000794 <__aeabi_ddiv>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4620      	mov	r0, r4
 8001364:	4629      	mov	r1, r5
 8001366:	f7ff f8eb 	bl	8000540 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b71      	ldr	r3, [pc, #452]	; (800153c <BMP180_GetPress+0x2d0>)
 8001378:	f7ff fa0c 	bl	8000794 <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fb8c 	bl	8000aa0 <__aeabi_d2iz>
 8001388:	4603      	mov	r3, r0
 800138a:	4a6a      	ldr	r2, [pc, #424]	; (8001534 <BMP180_GetPress+0x2c8>)
 800138c:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 800138e:	4b72      	ldr	r3, [pc, #456]	; (8001558 <BMP180_GetPress+0x2ec>)
 8001390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001394:	461a      	mov	r2, r3
 8001396:	4b6d      	ldr	r3, [pc, #436]	; (800154c <BMP180_GetPress+0x2e0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f864 	bl	800046c <__aeabi_i2d>
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b64      	ldr	r3, [pc, #400]	; (800153c <BMP180_GetPress+0x2d0>)
 80013aa:	f7ff f9f3 	bl	8000794 <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fb73 	bl	8000aa0 <__aeabi_d2iz>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a61      	ldr	r2, [pc, #388]	; (8001544 <BMP180_GetPress+0x2d8>)
 80013be:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80013c0:	4b5c      	ldr	r3, [pc, #368]	; (8001534 <BMP180_GetPress+0x2c8>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <BMP180_GetPress+0x2d8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a64      	ldr	r2, [pc, #400]	; (800155c <BMP180_GetPress+0x2f0>)
 80013cc:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80013ce:	4b64      	ldr	r3, [pc, #400]	; (8001560 <BMP180_GetPress+0x2f4>)
 80013d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d4:	009a      	lsls	r2, r3, #2
 80013d6:	4b61      	ldr	r3, [pc, #388]	; (800155c <BMP180_GetPress+0x2f0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	441a      	add	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	3302      	adds	r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	da00      	bge.n	80013ea <BMP180_GetPress+0x17e>
 80013e8:	3303      	adds	r3, #3
 80013ea:	109b      	asrs	r3, r3, #2
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <BMP180_GetPress+0x2f8>)
 80013f0:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80013f2:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <BMP180_GetPress+0x2fc>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b54      	ldr	r3, [pc, #336]	; (800154c <BMP180_GetPress+0x2e0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f832 	bl	800046c <__aeabi_i2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b57      	ldr	r3, [pc, #348]	; (800156c <BMP180_GetPress+0x300>)
 800140e:	f7ff f9c1 	bl	8000794 <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fb41 	bl	8000aa0 <__aeabi_d2iz>
 800141e:	4603      	mov	r3, r0
 8001420:	4a44      	ldr	r2, [pc, #272]	; (8001534 <BMP180_GetPress+0x2c8>)
 8001422:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001424:	4b52      	ldr	r3, [pc, #328]	; (8001570 <BMP180_GetPress+0x304>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f81e 	bl	800046c <__aeabi_i2d>
 8001430:	4604      	mov	r4, r0
 8001432:	460d      	mov	r5, r1
 8001434:	4b45      	ldr	r3, [pc, #276]	; (800154c <BMP180_GetPress+0x2e0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a44      	ldr	r2, [pc, #272]	; (800154c <BMP180_GetPress+0x2e0>)
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f813 	bl	800046c <__aeabi_i2d>
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b42      	ldr	r3, [pc, #264]	; (8001554 <BMP180_GetPress+0x2e8>)
 800144c:	f7ff f9a2 	bl	8000794 <__aeabi_ddiv>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7ff f872 	bl	8000540 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <BMP180_GetPress+0x308>)
 800146a:	f7ff f993 	bl	8000794 <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fb13 	bl	8000aa0 <__aeabi_d2iz>
 800147a:	4603      	mov	r3, r0
 800147c:	4a31      	ldr	r2, [pc, #196]	; (8001544 <BMP180_GetPress+0x2d8>)
 800147e:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001480:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <BMP180_GetPress+0x2c8>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <BMP180_GetPress+0x2d8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4413      	add	r3, r2
 800148a:	3302      	adds	r3, #2
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe ffed 	bl	800046c <__aeabi_i2d>
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <BMP180_GetPress+0x30c>)
 8001498:	f7ff f97c 	bl	8000794 <__aeabi_ddiv>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fafc 	bl	8000aa0 <__aeabi_d2iz>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4a2c      	ldr	r2, [pc, #176]	; (800155c <BMP180_GetPress+0x2f0>)
 80014ac:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80014ae:	4b33      	ldr	r3, [pc, #204]	; (800157c <BMP180_GetPress+0x310>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <BMP180_GetPress+0x2f0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffc3 	bl	800044c <__aeabi_ui2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <BMP180_GetPress+0x2c4>)
 80014cc:	f7ff f962 	bl	8000794 <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb0a 	bl	8000af0 <__aeabi_d2uiz>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a28      	ldr	r2, [pc, #160]	; (8001580 <BMP180_GetPress+0x314>)
 80014e0:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <BMP180_GetPress+0x2b4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <BMP180_GetPress+0x2f8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f24c 3150 	movw	r1, #50000	; 0xc350
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	fa41 f202 	asr.w	r2, r1, r2
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <BMP180_GetPress+0x318>)
 80014fe:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <BMP180_GetPress+0x318>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db41      	blt.n	800158c <BMP180_GetPress+0x320>
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <BMP180_GetPress+0x318>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	005a      	lsls	r2, r3, #1
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <BMP180_GetPress+0x314>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	461a      	mov	r2, r3
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <BMP180_GetPress+0x31c>)
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e040      	b.n	80015a0 <BMP180_GetPress+0x334>
 800151e:	bf00      	nop
 8001520:	200000c0 	.word	0x200000c0
 8001524:	200000bc 	.word	0x200000bc
 8001528:	200000ae 	.word	0x200000ae
 800152c:	200000ac 	.word	0x200000ac
 8001530:	40e00000 	.word	0x40e00000
 8001534:	200000c4 	.word	0x200000c4
 8001538:	200000b6 	.word	0x200000b6
 800153c:	40a00000 	.word	0x40a00000
 8001540:	200000b8 	.word	0x200000b8
 8001544:	200000c8 	.word	0x200000c8
 8001548:	200000d4 	.word	0x200000d4
 800154c:	200000dc 	.word	0x200000dc
 8001550:	200000b2 	.word	0x200000b2
 8001554:	40b00000 	.word	0x40b00000
 8001558:	200000a6 	.word	0x200000a6
 800155c:	200000cc 	.word	0x200000cc
 8001560:	200000a4 	.word	0x200000a4
 8001564:	200000d0 	.word	0x200000d0
 8001568:	200000a8 	.word	0x200000a8
 800156c:	40c00000 	.word	0x40c00000
 8001570:	200000b0 	.word	0x200000b0
 8001574:	40f00000 	.word	0x40f00000
 8001578:	40100000 	.word	0x40100000
 800157c:	200000aa 	.word	0x200000aa
 8001580:	200000d8 	.word	0x200000d8
 8001584:	200000e0 	.word	0x200000e0
 8001588:	200000e4 	.word	0x200000e4
	else Press = (B7/B4)*2;
 800158c:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <BMP180_GetPress+0x43c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b46      	ldr	r3, [pc, #280]	; (80016ac <BMP180_GetPress+0x440>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fbb2 f3f3 	udiv	r3, r2, r3
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	461a      	mov	r2, r3
 800159c:	4b44      	ldr	r3, [pc, #272]	; (80016b0 <BMP180_GetPress+0x444>)
 800159e:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80015a0:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <BMP180_GetPress+0x444>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff61 	bl	800046c <__aeabi_i2d>
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <BMP180_GetPress+0x448>)
 80015b0:	f7ff f8f0 	bl	8000794 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4614      	mov	r4, r2
 80015ba:	461d      	mov	r5, r3
 80015bc:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <BMP180_GetPress+0x444>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff53 	bl	800046c <__aeabi_i2d>
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <BMP180_GetPress+0x448>)
 80015cc:	f7ff f8e2 	bl	8000794 <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe ffb2 	bl	8000540 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fa5c 	bl	8000aa0 <__aeabi_d2iz>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a33      	ldr	r2, [pc, #204]	; (80016b8 <BMP180_GetPress+0x44c>)
 80015ec:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80015ee:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <BMP180_GetPress+0x44c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f640 32de 	movw	r2, #3038	; 0xbde
 80015f6:	fb02 f303 	mul.w	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff36 	bl	800046c <__aeabi_i2d>
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <BMP180_GetPress+0x450>)
 8001606:	f7ff f8c5 	bl	8000794 <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fa45 	bl	8000aa0 <__aeabi_d2iz>
 8001616:	4603      	mov	r3, r0
 8001618:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <BMP180_GetPress+0x44c>)
 800161a:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <BMP180_GetPress+0x444>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <BMP180_GetPress+0x454>)
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff20 	bl	800046c <__aeabi_i2d>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <BMP180_GetPress+0x450>)
 8001632:	f7ff f8af 	bl	8000794 <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa2f 	bl	8000aa0 <__aeabi_d2iz>
 8001642:	4603      	mov	r3, r0
 8001644:	4a1f      	ldr	r2, [pc, #124]	; (80016c4 <BMP180_GetPress+0x458>)
 8001646:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <BMP180_GetPress+0x444>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff0d 	bl	800046c <__aeabi_i2d>
 8001652:	4604      	mov	r4, r0
 8001654:	460d      	mov	r5, r1
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <BMP180_GetPress+0x44c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <BMP180_GetPress+0x458>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff01 	bl	800046c <__aeabi_i2d>
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <BMP180_GetPress+0x45c>)
 8001670:	f7ff f890 	bl	8000794 <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fdaa 	bl	80001d4 <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa0a 	bl	8000aa0 <__aeabi_d2iz>
 800168c:	4603      	mov	r3, r0
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <BMP180_GetPress+0x444>)
 8001690:	6013      	str	r3, [r2, #0]

	return Press;
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <BMP180_GetPress+0x444>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800169e:	eeb0 0a67 	vmov.f32	s0, s15
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bdb0      	pop	{r4, r5, r7, pc}
 80016a8:	200000e0 	.word	0x200000e0
 80016ac:	200000d8 	.word	0x200000d8
 80016b0:	200000e4 	.word	0x200000e4
 80016b4:	40700000 	.word	0x40700000
 80016b8:	200000c4 	.word	0x200000c4
 80016bc:	40f00000 	.word	0x40f00000
 80016c0:	ffffe343 	.word	0xffffe343
 80016c4:	200000c8 	.word	0x200000c8
 80016c8:	40300000 	.word	0x40300000
 80016cc:	00000000 	.word	0x00000000

080016d0 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fdc7 	bl	800126c <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 80016de:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <BMP180_GetAlt+0x88>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ea:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800175c <BMP180_GetAlt+0x8c>
 80016ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016f2:	ee16 0a90 	vmov	r0, s13
 80016f6:	f7fe fecb 	bl	8000490 <__aeabi_f2d>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001748 <BMP180_GetAlt+0x78>
 8001702:	ec43 2b10 	vmov	d0, r2, r3
 8001706:	f007 fee3 	bl	80094d0 <pow>
 800170a:	ec53 2b10 	vmov	r2, r3, d0
 800170e:	f04f 0000 	mov.w	r0, #0
 8001712:	4913      	ldr	r1, [pc, #76]	; (8001760 <BMP180_GetAlt+0x90>)
 8001714:	f7fe fd5c 	bl	80001d0 <__aeabi_dsub>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	a30b      	add	r3, pc, #44	; (adr r3, 8001750 <BMP180_GetAlt+0x80>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe ff0b 	bl	8000540 <__aeabi_dmul>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff f9fd 	bl	8000b30 <__aeabi_d2f>
 8001736:	4603      	mov	r3, r0
 8001738:	ee07 3a90 	vmov	s15, r3
}
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	ccd745e4 	.word	0xccd745e4
 800174c:	3fc85b95 	.word	0x3fc85b95
 8001750:	00000000 	.word	0x00000000
 8001754:	40e5a540 	.word	0x40e5a540
 8001758:	200000e4 	.word	0x200000e4
 800175c:	47c5e680 	.word	0x47c5e680
 8001760:	3ff00000 	.word	0x3ff00000

08001764 <BMP180_Start>:

void BMP180_Start (void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001768:	f7ff fbb4 	bl	8000ed4 <read_calliberation_data>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800177a:	4804      	ldr	r0, [pc, #16]	; (800178c <SELECT+0x1c>)
 800177c:	f001 ff1c 	bl	80035b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001780:	2001      	movs	r0, #1
 8001782:	f001 fc47 	bl	8003014 <HAL_Delay>
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40020400 	.word	0x40020400

08001790 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800179a:	4804      	ldr	r0, [pc, #16]	; (80017ac <DESELECT+0x1c>)
 800179c:	f001 ff0c 	bl	80035b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f001 fc37 	bl	8003014 <HAL_Delay>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40020400 	.word	0x40020400

080017b0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017ba:	bf00      	nop
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <SPI_TxByte+0x30>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d1f8      	bne.n	80017bc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80017ca:	1df9      	adds	r1, r7, #7
 80017cc:	2364      	movs	r3, #100	; 0x64
 80017ce:	2201      	movs	r2, #1
 80017d0:	4803      	ldr	r0, [pc, #12]	; (80017e0 <SPI_TxByte+0x30>)
 80017d2:	f003 ffdc 	bl	800578e <HAL_SPI_Transmit>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200001c0 	.word	0x200001c0

080017e4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017f0:	bf00      	nop
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <SPI_TxBuffer+0x30>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d1f8      	bne.n	80017f2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001800:	887a      	ldrh	r2, [r7, #2]
 8001802:	2364      	movs	r3, #100	; 0x64
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <SPI_TxBuffer+0x30>)
 8001808:	f003 ffc1 	bl	800578e <HAL_SPI_Transmit>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200001c0 	.word	0x200001c0

08001818 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800181e:	23ff      	movs	r3, #255	; 0xff
 8001820:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001822:	bf00      	nop
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <SPI_RxByte+0x34>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b02      	cmp	r3, #2
 8001830:	d1f8      	bne.n	8001824 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001832:	1dba      	adds	r2, r7, #6
 8001834:	1df9      	adds	r1, r7, #7
 8001836:	2364      	movs	r3, #100	; 0x64
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <SPI_RxByte+0x34>)
 800183e:	f004 f9f3 	bl	8005c28 <HAL_SPI_TransmitReceive>

	return data;
 8001842:	79bb      	ldrb	r3, [r7, #6]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200001c0 	.word	0x200001c0

08001850 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001858:	f7ff ffde 	bl	8001818 <SPI_RxByte>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	701a      	strb	r2, [r3, #0]
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <SD_ReadyWait+0x30>)
 8001874:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001878:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800187a:	f7ff ffcd 	bl	8001818 <SPI_RxByte>
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2bff      	cmp	r3, #255	; 0xff
 8001886:	d003      	beq.n	8001890 <SD_ReadyWait+0x24>
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <SD_ReadyWait+0x30>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f4      	bne.n	800187a <SD_ReadyWait+0xe>

	return res;
 8001890:	79fb      	ldrb	r3, [r7, #7]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200000ee 	.word	0x200000ee

080018a0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80018a6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80018aa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80018ac:	f7ff ff70 	bl	8001790 <DESELECT>
	for(int i = 0; i < 10; i++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	e005      	b.n	80018c2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80018b6:	20ff      	movs	r0, #255	; 0xff
 80018b8:	f7ff ff7a 	bl	80017b0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	3301      	adds	r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b09      	cmp	r3, #9
 80018c6:	ddf6      	ble.n	80018b6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80018c8:	f7ff ff52 	bl	8001770 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80018cc:	2340      	movs	r3, #64	; 0x40
 80018ce:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80018e0:	2395      	movs	r3, #149	; 0x95
 80018e2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80018e4:	463b      	mov	r3, r7
 80018e6:	2106      	movs	r1, #6
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff7b 	bl	80017e4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80018ee:	e002      	b.n	80018f6 <SD_PowerOn+0x56>
	{
		cnt--;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80018f6:	f7ff ff8f 	bl	8001818 <SPI_RxByte>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d002      	beq.n	8001906 <SD_PowerOn+0x66>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f4      	bne.n	80018f0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001906:	f7ff ff43 	bl	8001790 <DESELECT>
	SPI_TxByte(0XFF);
 800190a:	20ff      	movs	r0, #255	; 0xff
 800190c:	f7ff ff50 	bl	80017b0 <SPI_TxByte>

	PowerFlag = 1;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <SD_PowerOn+0x80>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200000f1 	.word	0x200000f1

08001924 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <SD_PowerOff+0x14>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	200000f1 	.word	0x200000f1

0800193c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <SD_CheckPower+0x14>)
 8001942:	781b      	ldrb	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	200000f1 	.word	0x200000f1

08001954 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <SD_RxDataBlock+0x58>)
 8001960:	22c8      	movs	r2, #200	; 0xc8
 8001962:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001964:	f7ff ff58 	bl	8001818 <SPI_RxByte>
 8001968:	4603      	mov	r3, r0
 800196a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	2bff      	cmp	r3, #255	; 0xff
 8001970:	d103      	bne.n	800197a <SD_RxDataBlock+0x26>
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <SD_RxDataBlock+0x58>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f4      	bne.n	8001964 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	2bfe      	cmp	r3, #254	; 0xfe
 800197e:	d001      	beq.n	8001984 <SD_RxDataBlock+0x30>
 8001980:	2300      	movs	r3, #0
 8001982:	e00f      	b.n	80019a4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff60 	bl	8001850 <SPI_RxBytePtr>
	} while(len--);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	1e5a      	subs	r2, r3, #1
 8001994:	603a      	str	r2, [r7, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f4      	bne.n	8001984 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800199a:	f7ff ff3d 	bl	8001818 <SPI_RxByte>
	SPI_RxByte();
 800199e:	f7ff ff3b 	bl	8001818 <SPI_RxByte>

	return TRUE;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200000ec 	.word	0x200000ec

080019b0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80019c0:	f7ff ff54 	bl	800186c <SD_ReadyWait>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2bff      	cmp	r3, #255	; 0xff
 80019c8:	d001      	beq.n	80019ce <SD_TxDataBlock+0x1e>
 80019ca:	2300      	movs	r3, #0
 80019cc:	e02f      	b.n	8001a2e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff feed 	bl	80017b0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	2bfd      	cmp	r3, #253	; 0xfd
 80019da:	d020      	beq.n	8001a1e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80019dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff feff 	bl	80017e4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80019e6:	f7ff ff17 	bl	8001818 <SPI_RxByte>
		SPI_RxByte();
 80019ea:	f7ff ff15 	bl	8001818 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80019ee:	e00b      	b.n	8001a08 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80019f0:	f7ff ff12 	bl	8001818 <SPI_RxByte>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d006      	beq.n	8001a10 <SD_TxDataBlock+0x60>
			i++;
 8001a02:	7bbb      	ldrb	r3, [r7, #14]
 8001a04:	3301      	adds	r3, #1
 8001a06:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	2b40      	cmp	r3, #64	; 0x40
 8001a0c:	d9f0      	bls.n	80019f0 <SD_TxDataBlock+0x40>
 8001a0e:	e000      	b.n	8001a12 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001a10:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001a12:	bf00      	nop
 8001a14:	f7ff ff00 	bl	8001818 <SPI_RxByte>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0fa      	beq.n	8001a14 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d101      	bne.n	8001a2c <SD_TxDataBlock+0x7c>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <SD_TxDataBlock+0x7e>

	return FALSE;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	6039      	str	r1, [r7, #0]
 8001a40:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001a42:	f7ff ff13 	bl	800186c <SD_ReadyWait>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2bff      	cmp	r3, #255	; 0xff
 8001a4a:	d001      	beq.n	8001a50 <SD_SendCmd+0x1a>
 8001a4c:	23ff      	movs	r3, #255	; 0xff
 8001a4e:	e042      	b.n	8001ad6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff feac 	bl	80017b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	0e1b      	lsrs	r3, r3, #24
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fea6 	bl	80017b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	0c1b      	lsrs	r3, r3, #16
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fea0 	bl	80017b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fe9a 	bl	80017b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fe95 	bl	80017b0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b40      	cmp	r3, #64	; 0x40
 8001a8a:	d102      	bne.n	8001a92 <SD_SendCmd+0x5c>
 8001a8c:	2395      	movs	r3, #149	; 0x95
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e007      	b.n	8001aa2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	2b48      	cmp	r3, #72	; 0x48
 8001a96:	d102      	bne.n	8001a9e <SD_SendCmd+0x68>
 8001a98:	2387      	movs	r3, #135	; 0x87
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e001      	b.n	8001aa2 <SD_SendCmd+0x6c>
	else crc = 1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fe83 	bl	80017b0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b4c      	cmp	r3, #76	; 0x4c
 8001aae:	d101      	bne.n	8001ab4 <SD_SendCmd+0x7e>
 8001ab0:	f7ff feb2 	bl	8001818 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001ab8:	f7ff feae 	bl	8001818 <SPI_RxByte>
 8001abc:	4603      	mov	r3, r0
 8001abe:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001ac0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da05      	bge.n	8001ad4 <SD_SendCmd+0x9e>
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	73bb      	strb	r3, [r7, #14]
 8001ace:	7bbb      	ldrb	r3, [r7, #14]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f1      	bne.n	8001ab8 <SD_SendCmd+0x82>

	return res;
 8001ad4:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SD_disk_initialize+0x14>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0d1      	b.n	8001c98 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001af4:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <SD_disk_initialize+0x1c0>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <SD_disk_initialize+0x2a>
 8001b02:	4b67      	ldr	r3, [pc, #412]	; (8001ca0 <SD_disk_initialize+0x1c0>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	e0c6      	b.n	8001c98 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001b0a:	f7ff fec9 	bl	80018a0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001b0e:	f7ff fe2f 	bl	8001770 <SELECT>

	/* check disk type */
	type = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001b16:	2100      	movs	r1, #0
 8001b18:	2040      	movs	r0, #64	; 0x40
 8001b1a:	f7ff ff8c 	bl	8001a36 <SD_SendCmd>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	f040 80a1 	bne.w	8001c68 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001b26:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <SD_disk_initialize+0x1c4>)
 8001b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b2c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001b2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001b32:	2048      	movs	r0, #72	; 0x48
 8001b34:	f7ff ff7f 	bl	8001a36 <SD_SendCmd>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d155      	bne.n	8001bea <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	e00c      	b.n	8001b5e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001b44:	7bfc      	ldrb	r4, [r7, #15]
 8001b46:	f7ff fe67 	bl	8001818 <SPI_RxByte>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f104 0310 	add.w	r3, r4, #16
 8001b52:	443b      	add	r3, r7
 8001b54:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d9ef      	bls.n	8001b44 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b64:	7abb      	ldrb	r3, [r7, #10]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d17e      	bne.n	8001c68 <SD_disk_initialize+0x188>
 8001b6a:	7afb      	ldrb	r3, [r7, #11]
 8001b6c:	2baa      	cmp	r3, #170	; 0xaa
 8001b6e:	d17b      	bne.n	8001c68 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b70:	2100      	movs	r1, #0
 8001b72:	2077      	movs	r0, #119	; 0x77
 8001b74:	f7ff ff5f 	bl	8001a36 <SD_SendCmd>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d807      	bhi.n	8001b8e <SD_disk_initialize+0xae>
 8001b7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b82:	2069      	movs	r0, #105	; 0x69
 8001b84:	f7ff ff57 	bl	8001a36 <SD_SendCmd>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d004      	beq.n	8001b98 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001b8e:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <SD_disk_initialize+0x1c4>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ec      	bne.n	8001b70 <SD_disk_initialize+0x90>
 8001b96:	e000      	b.n	8001b9a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b98:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b9a:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <SD_disk_initialize+0x1c4>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d062      	beq.n	8001c68 <SD_disk_initialize+0x188>
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	207a      	movs	r0, #122	; 0x7a
 8001ba6:	f7ff ff46 	bl	8001a36 <SD_SendCmd>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d15b      	bne.n	8001c68 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e00c      	b.n	8001bd0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001bb6:	7bfc      	ldrb	r4, [r7, #15]
 8001bb8:	f7ff fe2e 	bl	8001818 <SPI_RxByte>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f104 0310 	add.w	r3, r4, #16
 8001bc4:	443b      	add	r3, r7
 8001bc6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d9ef      	bls.n	8001bb6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001bd6:	7a3b      	ldrb	r3, [r7, #8]
 8001bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SD_disk_initialize+0x104>
 8001be0:	230c      	movs	r3, #12
 8001be2:	e000      	b.n	8001be6 <SD_disk_initialize+0x106>
 8001be4:	2304      	movs	r3, #4
 8001be6:	73bb      	strb	r3, [r7, #14]
 8001be8:	e03e      	b.n	8001c68 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001bea:	2100      	movs	r1, #0
 8001bec:	2077      	movs	r0, #119	; 0x77
 8001bee:	f7ff ff22 	bl	8001a36 <SD_SendCmd>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d808      	bhi.n	8001c0a <SD_disk_initialize+0x12a>
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2069      	movs	r0, #105	; 0x69
 8001bfc:	f7ff ff1b 	bl	8001a36 <SD_SendCmd>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d801      	bhi.n	8001c0a <SD_disk_initialize+0x12a>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e000      	b.n	8001c0c <SD_disk_initialize+0x12c>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d10e      	bne.n	8001c32 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001c14:	2100      	movs	r1, #0
 8001c16:	2077      	movs	r0, #119	; 0x77
 8001c18:	f7ff ff0d 	bl	8001a36 <SD_SendCmd>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d80e      	bhi.n	8001c40 <SD_disk_initialize+0x160>
 8001c22:	2100      	movs	r1, #0
 8001c24:	2069      	movs	r0, #105	; 0x69
 8001c26:	f7ff ff06 	bl	8001a36 <SD_SendCmd>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <SD_disk_initialize+0x160>
 8001c30:	e00c      	b.n	8001c4c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c32:	2100      	movs	r1, #0
 8001c34:	2041      	movs	r0, #65	; 0x41
 8001c36:	f7ff fefe 	bl	8001a36 <SD_SendCmd>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <SD_disk_initialize+0x1c4>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e2      	bne.n	8001c0e <SD_disk_initialize+0x12e>
 8001c48:	e000      	b.n	8001c4c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c4a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <SD_disk_initialize+0x1c4>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <SD_disk_initialize+0x184>
 8001c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c58:	2050      	movs	r0, #80	; 0x50
 8001c5a:	f7ff feec 	bl	8001a36 <SD_SendCmd>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SD_disk_initialize+0x188>
 8001c64:	2300      	movs	r3, #0
 8001c66:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001c68:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <SD_disk_initialize+0x1c8>)
 8001c6a:	7bbb      	ldrb	r3, [r7, #14]
 8001c6c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001c6e:	f7ff fd8f 	bl	8001790 <DESELECT>
	SPI_RxByte();
 8001c72:	f7ff fdd1 	bl	8001818 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001c76:	7bbb      	ldrb	r3, [r7, #14]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <SD_disk_initialize+0x1c0>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SD_disk_initialize+0x1c0>)
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	e001      	b.n	8001c92 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001c8e:	f7ff fe49 	bl	8001924 <SD_PowerOff>
	}

	return Stat;
 8001c92:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <SD_disk_initialize+0x1c0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b2db      	uxtb	r3, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd90      	pop	{r4, r7, pc}
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	200000ec 	.word	0x200000ec
 8001ca8:	200000f0 	.word	0x200000f0

08001cac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SD_disk_status+0x14>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e002      	b.n	8001cc6 <SD_disk_status+0x1a>
	return Stat;
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SD_disk_status+0x28>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b2db      	uxtb	r3, r3
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <SD_disk_read+0x1c>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <SD_disk_read+0x20>
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	e051      	b.n	8001d9c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <SD_disk_read+0xcc>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <SD_disk_read+0x32>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e048      	b.n	8001d9c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <SD_disk_read+0xd0>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d102      	bne.n	8001d1c <SD_disk_read+0x44>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	025b      	lsls	r3, r3, #9
 8001d1a:	607b      	str	r3, [r7, #4]

	SELECT();
 8001d1c:	f7ff fd28 	bl	8001770 <SELECT>

	if (count == 1)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d111      	bne.n	8001d4a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	2051      	movs	r0, #81	; 0x51
 8001d2a:	f7ff fe84 	bl	8001a36 <SD_SendCmd>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d129      	bne.n	8001d88 <SD_disk_read+0xb0>
 8001d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d38:	68b8      	ldr	r0, [r7, #8]
 8001d3a:	f7ff fe0b 	bl	8001954 <SD_RxDataBlock>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d021      	beq.n	8001d88 <SD_disk_read+0xb0>
 8001d44:	2300      	movs	r3, #0
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	e01e      	b.n	8001d88 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	2052      	movs	r0, #82	; 0x52
 8001d4e:	f7ff fe72 	bl	8001a36 <SD_SendCmd>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d117      	bne.n	8001d88 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d5c:	68b8      	ldr	r0, [r7, #8]
 8001d5e:	f7ff fdf9 	bl	8001954 <SD_RxDataBlock>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <SD_disk_read+0xa6>
				buff += 512;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d6e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ed      	bne.n	8001d58 <SD_disk_read+0x80>
 8001d7c:	e000      	b.n	8001d80 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001d7e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001d80:	2100      	movs	r1, #0
 8001d82:	204c      	movs	r0, #76	; 0x4c
 8001d84:	f7ff fe57 	bl	8001a36 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001d88:	f7ff fd02 	bl	8001790 <DESELECT>
	SPI_RxByte();
 8001d8c:	f7ff fd44 	bl	8001818 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bf14      	ite	ne
 8001d96:	2301      	movne	r3, #1
 8001d98:	2300      	moveq	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000000 	.word	0x20000000
 8001da8:	200000f0 	.word	0x200000f0

08001dac <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	4603      	mov	r3, r0
 8001dba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <SD_disk_write+0x1c>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <SD_disk_write+0x20>
 8001dc8:	2304      	movs	r3, #4
 8001dca:	e06b      	b.n	8001ea4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001dcc:	4b37      	ldr	r3, [pc, #220]	; (8001eac <SD_disk_write+0x100>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SD_disk_write+0x32>
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e062      	b.n	8001ea4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001dde:	4b33      	ldr	r3, [pc, #204]	; (8001eac <SD_disk_write+0x100>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <SD_disk_write+0x44>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e059      	b.n	8001ea4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <SD_disk_write+0x104>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <SD_disk_write+0x56>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	025b      	lsls	r3, r3, #9
 8001e00:	607b      	str	r3, [r7, #4]

	SELECT();
 8001e02:	f7ff fcb5 	bl	8001770 <SELECT>

	if (count == 1)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d110      	bne.n	8001e2e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	2058      	movs	r0, #88	; 0x58
 8001e10:	f7ff fe11 	bl	8001a36 <SD_SendCmd>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d13a      	bne.n	8001e90 <SD_disk_write+0xe4>
 8001e1a:	21fe      	movs	r1, #254	; 0xfe
 8001e1c:	68b8      	ldr	r0, [r7, #8]
 8001e1e:	f7ff fdc7 	bl	80019b0 <SD_TxDataBlock>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d033      	beq.n	8001e90 <SD_disk_write+0xe4>
			count = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	e030      	b.n	8001e90 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <SD_disk_write+0x104>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2077      	movs	r0, #119	; 0x77
 8001e3e:	f7ff fdfa 	bl	8001a36 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e42:	6839      	ldr	r1, [r7, #0]
 8001e44:	2057      	movs	r0, #87	; 0x57
 8001e46:	f7ff fdf6 	bl	8001a36 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	2059      	movs	r0, #89	; 0x59
 8001e4e:	f7ff fdf2 	bl	8001a36 <SD_SendCmd>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d11b      	bne.n	8001e90 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e58:	21fc      	movs	r1, #252	; 0xfc
 8001e5a:	68b8      	ldr	r0, [r7, #8]
 8001e5c:	f7ff fda8 	bl	80019b0 <SD_TxDataBlock>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <SD_disk_write+0xd0>
				buff += 512;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ee      	bne.n	8001e58 <SD_disk_write+0xac>
 8001e7a:	e000      	b.n	8001e7e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e7c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001e7e:	21fd      	movs	r1, #253	; 0xfd
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff fd95 	bl	80019b0 <SD_TxDataBlock>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <SD_disk_write+0xe4>
			{
				count = 1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001e90:	f7ff fc7e 	bl	8001790 <DESELECT>
	SPI_RxByte();
 8001e94:	f7ff fcc0 	bl	8001818 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf14      	ite	ne
 8001e9e:	2301      	movne	r3, #1
 8001ea0:	2300      	moveq	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	200000f0 	.word	0x200000f0

08001eb4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b08b      	sub	sp, #44	; 0x2c
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	603a      	str	r2, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SD_disk_ioctl+0x1e>
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e115      	b.n	80020fe <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001ed8:	79bb      	ldrb	r3, [r7, #6]
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d124      	bne.n	8001f28 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d012      	beq.n	8001f0c <SD_disk_ioctl+0x58>
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	dc1a      	bgt.n	8001f20 <SD_disk_ioctl+0x6c>
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <SD_disk_ioctl+0x40>
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d006      	beq.n	8001f00 <SD_disk_ioctl+0x4c>
 8001ef2:	e015      	b.n	8001f20 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001ef4:	f7ff fd16 	bl	8001924 <SD_PowerOff>
			res = RES_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001efe:	e0fc      	b.n	80020fa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001f00:	f7ff fcce 	bl	80018a0 <SD_PowerOn>
			res = RES_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f0a:	e0f6      	b.n	80020fa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	1c5c      	adds	r4, r3, #1
 8001f10:	f7ff fd14 	bl	800193c <SD_CheckPower>
 8001f14:	4603      	mov	r3, r0
 8001f16:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f1e:	e0ec      	b.n	80020fa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001f20:	2304      	movs	r3, #4
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f26:	e0e8      	b.n	80020fa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f28:	4b77      	ldr	r3, [pc, #476]	; (8002108 <SD_disk_ioctl+0x254>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <SD_disk_ioctl+0x86>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0e1      	b.n	80020fe <SD_disk_ioctl+0x24a>

		SELECT();
 8001f3a:	f7ff fc19 	bl	8001770 <SELECT>

		switch (ctrl)
 8001f3e:	79bb      	ldrb	r3, [r7, #6]
 8001f40:	2b0d      	cmp	r3, #13
 8001f42:	f200 80cb 	bhi.w	80020dc <SD_disk_ioctl+0x228>
 8001f46:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <SD_disk_ioctl+0x98>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08002047 	.word	0x08002047
 8001f50:	08001f85 	.word	0x08001f85
 8001f54:	08002037 	.word	0x08002037
 8001f58:	080020dd 	.word	0x080020dd
 8001f5c:	080020dd 	.word	0x080020dd
 8001f60:	080020dd 	.word	0x080020dd
 8001f64:	080020dd 	.word	0x080020dd
 8001f68:	080020dd 	.word	0x080020dd
 8001f6c:	080020dd 	.word	0x080020dd
 8001f70:	080020dd 	.word	0x080020dd
 8001f74:	080020dd 	.word	0x080020dd
 8001f78:	08002059 	.word	0x08002059
 8001f7c:	0800207d 	.word	0x0800207d
 8001f80:	080020a1 	.word	0x080020a1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001f84:	2100      	movs	r1, #0
 8001f86:	2049      	movs	r0, #73	; 0x49
 8001f88:	f7ff fd55 	bl	8001a36 <SD_SendCmd>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80a8 	bne.w	80020e4 <SD_disk_ioctl+0x230>
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	2110      	movs	r1, #16
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fcda 	bl	8001954 <SD_RxDataBlock>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 809e 	beq.w	80020e4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001fa8:	7b3b      	ldrb	r3, [r7, #12]
 8001faa:	099b      	lsrs	r3, r3, #6
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10e      	bne.n	8001fd0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001fb2:	7d7b      	ldrb	r3, [r7, #21]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	7d3b      	ldrb	r3, [r7, #20]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001fc6:	8bfb      	ldrh	r3, [r7, #30]
 8001fc8:	029a      	lsls	r2, r3, #10
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e02e      	b.n	800202e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001fd0:	7c7b      	ldrb	r3, [r7, #17]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	7dbb      	ldrb	r3, [r7, #22]
 8001fda:	09db      	lsrs	r3, r3, #7
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	7d7b      	ldrb	r3, [r7, #21]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f003 0306 	and.w	r3, r3, #6
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001ff8:	7d3b      	ldrb	r3, [r7, #20]
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	b29b      	uxth	r3, r3
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	b29b      	uxth	r3, r3
 8002008:	4413      	add	r3, r2
 800200a:	b29a      	uxth	r2, r3
 800200c:	7cbb      	ldrb	r3, [r7, #18]
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	b29b      	uxth	r3, r3
 8002012:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002016:	b29b      	uxth	r3, r3
 8002018:	4413      	add	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002020:	8bfa      	ldrh	r2, [r7, #30]
 8002022:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002026:	3b09      	subs	r3, #9
 8002028:	409a      	lsls	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002034:	e056      	b.n	80020e4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800203c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002044:	e055      	b.n	80020f2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002046:	f7ff fc11 	bl	800186c <SD_ReadyWait>
 800204a:	4603      	mov	r3, r0
 800204c:	2bff      	cmp	r3, #255	; 0xff
 800204e:	d14b      	bne.n	80020e8 <SD_disk_ioctl+0x234>
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002056:	e047      	b.n	80020e8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002058:	2100      	movs	r1, #0
 800205a:	2049      	movs	r0, #73	; 0x49
 800205c:	f7ff fceb 	bl	8001a36 <SD_SendCmd>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d142      	bne.n	80020ec <SD_disk_ioctl+0x238>
 8002066:	2110      	movs	r1, #16
 8002068:	6a38      	ldr	r0, [r7, #32]
 800206a:	f7ff fc73 	bl	8001954 <SD_RxDataBlock>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d03b      	beq.n	80020ec <SD_disk_ioctl+0x238>
 8002074:	2300      	movs	r3, #0
 8002076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800207a:	e037      	b.n	80020ec <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800207c:	2100      	movs	r1, #0
 800207e:	204a      	movs	r0, #74	; 0x4a
 8002080:	f7ff fcd9 	bl	8001a36 <SD_SendCmd>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d132      	bne.n	80020f0 <SD_disk_ioctl+0x23c>
 800208a:	2110      	movs	r1, #16
 800208c:	6a38      	ldr	r0, [r7, #32]
 800208e:	f7ff fc61 	bl	8001954 <SD_RxDataBlock>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d02b      	beq.n	80020f0 <SD_disk_ioctl+0x23c>
 8002098:	2300      	movs	r3, #0
 800209a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800209e:	e027      	b.n	80020f0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80020a0:	2100      	movs	r1, #0
 80020a2:	207a      	movs	r0, #122	; 0x7a
 80020a4:	f7ff fcc7 	bl	8001a36 <SD_SendCmd>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020b4:	e00b      	b.n	80020ce <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80020b6:	6a3c      	ldr	r4, [r7, #32]
 80020b8:	1c63      	adds	r3, r4, #1
 80020ba:	623b      	str	r3, [r7, #32]
 80020bc:	f7ff fbac 	bl	8001818 <SPI_RxByte>
 80020c0:	4603      	mov	r3, r0
 80020c2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80020c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020c8:	3301      	adds	r3, #1
 80020ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d9ef      	bls.n	80020b6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80020dc:	2304      	movs	r3, #4
 80020de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020e2:	e006      	b.n	80020f2 <SD_disk_ioctl+0x23e>
			break;
 80020e4:	bf00      	nop
 80020e6:	e004      	b.n	80020f2 <SD_disk_ioctl+0x23e>
			break;
 80020e8:	bf00      	nop
 80020ea:	e002      	b.n	80020f2 <SD_disk_ioctl+0x23e>
			break;
 80020ec:	bf00      	nop
 80020ee:	e000      	b.n	80020f2 <SD_disk_ioctl+0x23e>
			break;
 80020f0:	bf00      	nop
		}

		DESELECT();
 80020f2:	f7ff fb4d 	bl	8001790 <DESELECT>
		SPI_RxByte();
 80020f6:	f7ff fb8f 	bl	8001818 <SPI_RxByte>
	}

	return res;
 80020fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020fe:	4618      	mov	r0, r3
 8002100:	372c      	adds	r7, #44	; 0x2c
 8002102:	46bd      	mov	sp, r7
 8002104:	bd90      	pop	{r4, r7, pc}
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000

0800210c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002110:	f000 ff0e 	bl	8002f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002114:	f000 f898 	bl	8002248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002118:	f000 fa44 	bl	80025a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800211c:	f000 f900 	bl	8002320 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002120:	f000 f986 	bl	8002430 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002124:	f000 f9ba 	bl	800249c <MX_SPI2_Init>
  MX_TIM2_Init();
 8002128:	f000 f9ee 	bl	8002508 <MX_TIM2_Init>
  MX_FATFS_Init();
 800212c:	f004 fcda 	bl	8006ae4 <MX_FATFS_Init>
  MX_RTC_Init();
 8002130:	f000 f924 	bl	800237c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  lis_init();
 8002134:	f000 fae2 	bl	80026fc <lis_init>

  HAL_TIM_Base_Start_IT(&htim2);
 8002138:	4838      	ldr	r0, [pc, #224]	; (800221c <main+0x110>)
 800213a:	f004 f897 	bl	800626c <HAL_TIM_Base_Start_IT>
  BMP180_Start();
 800213e:	f7ff fb11 	bl	8001764 <BMP180_Start>

  HAL_Delay(40);
 8002142:	2028      	movs	r0, #40	; 0x28
 8002144:	f000 ff66 	bl	8003014 <HAL_Delay>




  result = f_mount(&fatfs, "", 0);			// Bu kısmı her seferinde bi önceki verileri silip yeniden dosya acmak icin kullanıyoruz
 8002148:	2200      	movs	r2, #0
 800214a:	4935      	ldr	r1, [pc, #212]	; (8002220 <main+0x114>)
 800214c:	4835      	ldr	r0, [pc, #212]	; (8002224 <main+0x118>)
 800214e:	f006 fa7b 	bl	8008648 <f_mount>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <main+0x11c>)
 8002158:	701a      	strb	r2, [r3, #0]
  if(result != FR_OK)
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <main+0x11c>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d000      	beq.n	8002164 <main+0x58>
  {
	  while(1);
 8002162:	e7fe      	b.n	8002162 <main+0x56>
  }

  result = f_open(&file_pointer, "DATA.txt", FA_OPEN_APPEND);
 8002164:	2230      	movs	r2, #48	; 0x30
 8002166:	4931      	ldr	r1, [pc, #196]	; (800222c <main+0x120>)
 8002168:	4831      	ldr	r0, [pc, #196]	; (8002230 <main+0x124>)
 800216a:	f006 fab3 	bl	80086d4 <f_open>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <main+0x11c>)
 8002174:	701a      	strb	r2, [r3, #0]
  if(result == FR_OK)
 8002176:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <main+0x11c>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d107      	bne.n	800218e <main+0x82>
  {


    if(result == FR_OK) __NOP();
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <main+0x11c>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <main+0x7e>
 8002186:	bf00      	nop
 8002188:	e002      	b.n	8002190 <main+0x84>
    else __NOP();
 800218a:	bf00      	nop
 800218c:	e000      	b.n	8002190 <main+0x84>
   }
   else
   {
     __NOP();
 800218e:	bf00      	nop
    }
   f_close(&file_pointer);
 8002190:	4827      	ldr	r0, [pc, #156]	; (8002230 <main+0x124>)
 8002192:	f006 fe50 	bl	8008e36 <f_close>


   result = f_mount(&fatfs, "", 0);			// Bu kısmı her seferinde bi önceki verileri silip yeniden dosya acmak icin kullanıyoruz
 8002196:	2200      	movs	r2, #0
 8002198:	4921      	ldr	r1, [pc, #132]	; (8002220 <main+0x114>)
 800219a:	4822      	ldr	r0, [pc, #136]	; (8002224 <main+0x118>)
 800219c:	f006 fa54 	bl	8008648 <f_mount>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <main+0x11c>)
 80021a6:	701a      	strb	r2, [r3, #0]
   if(result != FR_OK)
 80021a8:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <main+0x11c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d000      	beq.n	80021b2 <main+0xa6>
   {
 	  while(1);
 80021b0:	e7fe      	b.n	80021b0 <main+0xa4>
   }

   result = f_open(&file_pointer, "CRASH.txt", FA_OPEN_APPEND);
 80021b2:	2230      	movs	r2, #48	; 0x30
 80021b4:	491f      	ldr	r1, [pc, #124]	; (8002234 <main+0x128>)
 80021b6:	481e      	ldr	r0, [pc, #120]	; (8002230 <main+0x124>)
 80021b8:	f006 fa8c 	bl	80086d4 <f_open>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <main+0x11c>)
 80021c2:	701a      	strb	r2, [r3, #0]
   if(result == FR_OK)
 80021c4:	4b18      	ldr	r3, [pc, #96]	; (8002228 <main+0x11c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <main+0xd0>
   {


     if(result == FR_OK) __NOP();
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <main+0x11c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <main+0xcc>
 80021d4:	bf00      	nop
 80021d6:	e002      	b.n	80021de <main+0xd2>
     else __NOP();
 80021d8:	bf00      	nop
 80021da:	e000      	b.n	80021de <main+0xd2>
    }
    else
    {
      __NOP();
 80021dc:	bf00      	nop
     }
    f_close(&file_pointer);
 80021de:	4814      	ldr	r0, [pc, #80]	; (8002230 <main+0x124>)
 80021e0:	f006 fe29 	bl	8008e36 <f_close>

    /* USER CODE BEGIN 3 */

	  //timer_count = TIM2->CNT;

	  if(flag_control == 1 && timer_flag == 1)
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <main+0x12c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d10c      	bne.n	8002206 <main+0xfa>
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <main+0x130>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d108      	bne.n	8002206 <main+0xfa>
	  {
		  //__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_UPDATE);
		  crash_flag = 1;
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <main+0x134>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
		  Read_all();
 80021fa:	f000 fb13 	bl	8002824 <Read_all>
		  HAL_Delay(30);
 80021fe:	201e      	movs	r0, #30
 8002200:	f000 ff08 	bl	8003014 <HAL_Delay>
		  while(1);
 8002204:	e7fe      	b.n	8002204 <main+0xf8>
	  }
	  else
	  {
		  if(count_interrupt == 1)
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <main+0x138>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d1ea      	bne.n	80021e4 <main+0xd8>
		  {
			  Read_all();
 800220e:	f000 fb09 	bl	8002824 <Read_all>
			  count_interrupt = 0;
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <main+0x138>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
	  if(flag_control == 1 && timer_flag == 1)
 8002218:	e7e4      	b.n	80021e4 <main+0xd8>
 800221a:	bf00      	nop
 800221c:	20000218 	.word	0x20000218
 8002220:	0800a324 	.word	0x0800a324
 8002224:	20000260 	.word	0x20000260
 8002228:	20000490 	.word	0x20000490
 800222c:	0800a328 	.word	0x0800a328
 8002230:	20000494 	.word	0x20000494
 8002234:	0800a334 	.word	0x0800a334
 8002238:	200006d4 	.word	0x200006d4
 800223c:	200006d8 	.word	0x200006d8
 8002240:	200006e0 	.word	0x200006e0
 8002244:	200006dc 	.word	0x200006dc

08002248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b094      	sub	sp, #80	; 0x50
 800224c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224e:	f107 0320 	add.w	r3, r7, #32
 8002252:	2230      	movs	r2, #48	; 0x30
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f007 f932 	bl	80094c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <SystemClock_Config+0xd0>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	4a28      	ldr	r2, [pc, #160]	; (8002318 <SystemClock_Config+0xd0>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6413      	str	r3, [r2, #64]	; 0x40
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <SystemClock_Config+0xd0>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002288:	2300      	movs	r3, #0
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	4b23      	ldr	r3, [pc, #140]	; (800231c <SystemClock_Config+0xd4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a22      	ldr	r2, [pc, #136]	; (800231c <SystemClock_Config+0xd4>)
 8002292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <SystemClock_Config+0xd4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80022a4:	2309      	movs	r3, #9
 80022a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022ae:	2301      	movs	r3, #1
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b2:	2302      	movs	r3, #2
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022bc:	2304      	movs	r3, #4
 80022be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022c0:	23a8      	movs	r3, #168	; 0xa8
 80022c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022c8:	2304      	movs	r3, #4
 80022ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022cc:	f107 0320 	add.w	r3, r7, #32
 80022d0:	4618      	mov	r0, r3
 80022d2:	f002 f96f 	bl	80045b4 <HAL_RCC_OscConfig>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80022dc:	f000 fc7e 	bl	8002bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e0:	230f      	movs	r3, #15
 80022e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e4:	2302      	movs	r3, #2
 80022e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	2105      	movs	r1, #5
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 fbd0 	bl	8004aa4 <HAL_RCC_ClockConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800230a:	f000 fc67 	bl	8002bdc <Error_Handler>
  }
}
 800230e:	bf00      	nop
 8002310:	3750      	adds	r7, #80	; 0x50
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	40007000 	.word	0x40007000

08002320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <MX_I2C1_Init+0x50>)
 8002326:	4a13      	ldr	r2, [pc, #76]	; (8002374 <MX_I2C1_Init+0x54>)
 8002328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_I2C1_Init+0x50>)
 800232c:	4a12      	ldr	r2, [pc, #72]	; (8002378 <MX_I2C1_Init+0x58>)
 800232e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_I2C1_Init+0x50>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_I2C1_Init+0x50>)
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_I2C1_Init+0x50>)
 800233e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002342:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <MX_I2C1_Init+0x50>)
 8002346:	2200      	movs	r2, #0
 8002348:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_I2C1_Init+0x50>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <MX_I2C1_Init+0x50>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_I2C1_Init+0x50>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800235c:	4804      	ldr	r0, [pc, #16]	; (8002370 <MX_I2C1_Init+0x50>)
 800235e:	f001 f969 	bl	8003634 <HAL_I2C_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002368:	f000 fc38 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200000f4 	.word	0x200000f4
 8002374:	40005400 	.word	0x40005400
 8002378:	000186a0 	.word	0x000186a0

0800237c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002390:	2300      	movs	r3, #0
 8002392:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <MX_RTC_Init+0xac>)
 8002396:	4a25      	ldr	r2, [pc, #148]	; (800242c <MX_RTC_Init+0xb0>)
 8002398:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <MX_RTC_Init+0xac>)
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <MX_RTC_Init+0xac>)
 80023a2:	227f      	movs	r2, #127	; 0x7f
 80023a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 249;
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <MX_RTC_Init+0xac>)
 80023a8:	22f9      	movs	r2, #249	; 0xf9
 80023aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <MX_RTC_Init+0xac>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <MX_RTC_Init+0xac>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <MX_RTC_Init+0xac>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023be:	481a      	ldr	r0, [pc, #104]	; (8002428 <MX_RTC_Init+0xac>)
 80023c0:	f002 fe5e 	bl	8005080 <HAL_RTC_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80023ca:	f000 fc07 	bl	8002bdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 80023ce:	2322      	movs	r3, #34	; 0x22
 80023d0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x02;
 80023d2:	2302      	movs	r3, #2
 80023d4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x00;
 80023d6:	2300      	movs	r3, #0
 80023d8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	2201      	movs	r2, #1
 80023e6:	4619      	mov	r1, r3
 80023e8:	480f      	ldr	r0, [pc, #60]	; (8002428 <MX_RTC_Init+0xac>)
 80023ea:	f002 febf 	bl	800516c <HAL_RTC_SetTime>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80023f4:	f000 fbf2 	bl	8002bdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80023f8:	2305      	movs	r3, #5
 80023fa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80023fc:	2305      	movs	r3, #5
 80023fe:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8002400:	2316      	movs	r3, #22
 8002402:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8002404:	2323      	movs	r3, #35	; 0x23
 8002406:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002408:	463b      	mov	r3, r7
 800240a:	2201      	movs	r2, #1
 800240c:	4619      	mov	r1, r3
 800240e:	4806      	ldr	r0, [pc, #24]	; (8002428 <MX_RTC_Init+0xac>)
 8002410:	f002 ffa4 	bl	800535c <HAL_RTC_SetDate>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800241a:	f000 fbdf 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000148 	.word	0x20000148
 800242c:	40002800 	.word	0x40002800

08002430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <MX_SPI1_Init+0x64>)
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <MX_SPI1_Init+0x68>)
 8002438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <MX_SPI1_Init+0x64>)
 800243c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <MX_SPI1_Init+0x64>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <MX_SPI1_Init+0x64>)
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <MX_SPI1_Init+0x64>)
 8002450:	2202      	movs	r2, #2
 8002452:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <MX_SPI1_Init+0x64>)
 8002456:	2201      	movs	r2, #1
 8002458:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <MX_SPI1_Init+0x64>)
 800245c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002460:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <MX_SPI1_Init+0x64>)
 8002464:	2200      	movs	r2, #0
 8002466:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <MX_SPI1_Init+0x64>)
 800246a:	2200      	movs	r2, #0
 800246c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <MX_SPI1_Init+0x64>)
 8002470:	2200      	movs	r2, #0
 8002472:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <MX_SPI1_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <MX_SPI1_Init+0x64>)
 800247c:	220a      	movs	r2, #10
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002480:	4804      	ldr	r0, [pc, #16]	; (8002494 <MX_SPI1_Init+0x64>)
 8002482:	f003 f8fb 	bl	800567c <HAL_SPI_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800248c:	f000 fba6 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000168 	.word	0x20000168
 8002498:	40013000 	.word	0x40013000

0800249c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <MX_SPI2_Init+0x64>)
 80024a2:	4a18      	ldr	r2, [pc, #96]	; (8002504 <MX_SPI2_Init+0x68>)
 80024a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <MX_SPI2_Init+0x64>)
 80024a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024ae:	4b14      	ldr	r3, [pc, #80]	; (8002500 <MX_SPI2_Init+0x64>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <MX_SPI2_Init+0x64>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_SPI2_Init+0x64>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <MX_SPI2_Init+0x64>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_SPI2_Init+0x64>)
 80024c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_SPI2_Init+0x64>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <MX_SPI2_Init+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_SPI2_Init+0x64>)
 80024dc:	2200      	movs	r2, #0
 80024de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <MX_SPI2_Init+0x64>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_SPI2_Init+0x64>)
 80024e8:	220a      	movs	r2, #10
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024ec:	4804      	ldr	r0, [pc, #16]	; (8002500 <MX_SPI2_Init+0x64>)
 80024ee:	f003 f8c5 	bl	800567c <HAL_SPI_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024f8:	f000 fb70 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200001c0 	.word	0x200001c0
 8002504:	40003800 	.word	0x40003800

08002508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250e:	f107 0308 	add.w	r3, r7, #8
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251c:	463b      	mov	r3, r7
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002524:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800252a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 800252c:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <MX_TIM2_Init+0x98>)
 800252e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002532:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <MX_TIM2_Init+0x98>)
 800253c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002540:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <MX_TIM2_Init+0x98>)
 800254a:	2200      	movs	r2, #0
 800254c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800254e:	4814      	ldr	r0, [pc, #80]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002550:	f003 fe3c 	bl	80061cc <HAL_TIM_Base_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800255a:	f000 fb3f 	bl	8002bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800255e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002562:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002564:	f107 0308 	add.w	r3, r7, #8
 8002568:	4619      	mov	r1, r3
 800256a:	480d      	ldr	r0, [pc, #52]	; (80025a0 <MX_TIM2_Init+0x98>)
 800256c:	f003 fff6 	bl	800655c <HAL_TIM_ConfigClockSource>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002576:	f000 fb31 	bl	8002bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002582:	463b      	mov	r3, r7
 8002584:	4619      	mov	r1, r3
 8002586:	4806      	ldr	r0, [pc, #24]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002588:	f004 fa1c 	bl	80069c4 <HAL_TIMEx_MasterConfigSynchronization>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002592:	f000 fb23 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000218 	.word	0x20000218

080025a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
 80025b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <MX_GPIO_Init+0x108>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a3a      	ldr	r2, [pc, #232]	; (80026ac <MX_GPIO_Init+0x108>)
 80025c4:	f043 0310 	orr.w	r3, r3, #16
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b38      	ldr	r3, [pc, #224]	; (80026ac <MX_GPIO_Init+0x108>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4b34      	ldr	r3, [pc, #208]	; (80026ac <MX_GPIO_Init+0x108>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a33      	ldr	r2, [pc, #204]	; (80026ac <MX_GPIO_Init+0x108>)
 80025e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b31      	ldr	r3, [pc, #196]	; (80026ac <MX_GPIO_Init+0x108>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <MX_GPIO_Init+0x108>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a2c      	ldr	r2, [pc, #176]	; (80026ac <MX_GPIO_Init+0x108>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <MX_GPIO_Init+0x108>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <MX_GPIO_Init+0x108>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a25      	ldr	r2, [pc, #148]	; (80026ac <MX_GPIO_Init+0x108>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <MX_GPIO_Init+0x108>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lis_cs_GPIO_Port, lis_cs_Pin, GPIO_PIN_RESET);
 800262a:	2200      	movs	r2, #0
 800262c:	2108      	movs	r1, #8
 800262e:	4820      	ldr	r0, [pc, #128]	; (80026b0 <MX_GPIO_Init+0x10c>)
 8002630:	f000 ffc2 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sd_cs_GPIO_Port, sd_cs_Pin, GPIO_PIN_RESET);
 8002634:	2200      	movs	r2, #0
 8002636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800263a:	481e      	ldr	r0, [pc, #120]	; (80026b4 <MX_GPIO_Init+0x110>)
 800263c:	f000 ffbc 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : lis_cs_Pin */
  GPIO_InitStruct.Pin = lis_cs_Pin;
 8002640:	2308      	movs	r3, #8
 8002642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002644:	2301      	movs	r3, #1
 8002646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lis_cs_GPIO_Port, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	4816      	ldr	r0, [pc, #88]	; (80026b0 <MX_GPIO_Init+0x10c>)
 8002658:	f000 fe12 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pin : sd_cs_Pin */
  GPIO_InitStruct.Pin = sd_cs_Pin;
 800265c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002662:	2301      	movs	r3, #1
 8002664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(sd_cs_GPIO_Port, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	480f      	ldr	r0, [pc, #60]	; (80026b4 <MX_GPIO_Init+0x110>)
 8002676:	f000 fe03 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800267a:	2301      	movs	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800267e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4619      	mov	r1, r3
 800268e:	4808      	ldr	r0, [pc, #32]	; (80026b0 <MX_GPIO_Init+0x10c>)
 8002690:	f000 fdf6 	bl	8003280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	2100      	movs	r1, #0
 8002698:	2006      	movs	r0, #6
 800269a:	f000 fdba 	bl	8003212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800269e:	2006      	movs	r0, #6
 80026a0:	f000 fdd3 	bl	800324a <HAL_NVIC_EnableIRQ>

}
 80026a4:	bf00      	nop
 80026a6:	3728      	adds	r7, #40	; 0x28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40020400 	.word	0x40020400

080026b8 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 4 */


void EXTI0_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	  flag_control = 1;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <EXTI0_IRQHandler+0x14>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f000 ff92 	bl	80035ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */


  /* USER CODE END EXTI0_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	200006d4 	.word	0x200006d4

080026d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	timer_flag = 1;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <TIM2_IRQHandler+0x20>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
	count_interrupt++;
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <TIM2_IRQHandler+0x24>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <TIM2_IRQHandler+0x24>)
 80026e2:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026e4:	4804      	ldr	r0, [pc, #16]	; (80026f8 <TIM2_IRQHandler+0x28>)
 80026e6:	f003 fe31 	bl	800634c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200006d8 	.word	0x200006d8
 80026f4:	200006dc 	.word	0x200006dc
 80026f8:	20000218 	.word	0x20000218

080026fc <lis_init>:


void lis_init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0

	ReadSpi(WHO_AM_I);
 8002700:	200f      	movs	r0, #15
 8002702:	f000 f857 	bl	80027b4 <ReadSpi>

	// free-fall
	WriteSpi(CTRL_REG3, 0x48);
 8002706:	2148      	movs	r1, #72	; 0x48
 8002708:	2023      	movs	r0, #35	; 0x23
 800270a:	f000 f82d 	bl	8002768 <WriteSpi>
	WriteSpi(CTRL_REG4, 0x77);
 800270e:	2177      	movs	r1, #119	; 0x77
 8002710:	2020      	movs	r0, #32
 8002712:	f000 f829 	bl	8002768 <WriteSpi>
	WriteSpi(TIM1_1L, 0x28);
 8002716:	2128      	movs	r1, #40	; 0x28
 8002718:	2055      	movs	r0, #85	; 0x55
 800271a:	f000 f825 	bl	8002768 <WriteSpi>
	WriteSpi(THRS2_1, 0x18);
 800271e:	2118      	movs	r1, #24
 8002720:	2056      	movs	r0, #86	; 0x56
 8002722:	f000 f821 	bl	8002768 <WriteSpi>
	WriteSpi(MASK1_B, 0xA8);
 8002726:	21a8      	movs	r1, #168	; 0xa8
 8002728:	2059      	movs	r0, #89	; 0x59
 800272a:	f000 f81d 	bl	8002768 <WriteSpi>
	WriteSpi(MASK1_A, 0xA8);
 800272e:	21a8      	movs	r1, #168	; 0xa8
 8002730:	205a      	movs	r0, #90	; 0x5a
 8002732:	f000 f819 	bl	8002768 <WriteSpi>
	WriteSpi(SETT1, 0x03);
 8002736:	2103      	movs	r1, #3
 8002738:	205b      	movs	r0, #91	; 0x5b
 800273a:	f000 f815 	bl	8002768 <WriteSpi>
	WriteSpi(ST1_1, 0x0A);
 800273e:	210a      	movs	r1, #10
 8002740:	2040      	movs	r0, #64	; 0x40
 8002742:	f000 f811 	bl	8002768 <WriteSpi>
	WriteSpi(ST1_2, 0x61);
 8002746:	2161      	movs	r1, #97	; 0x61
 8002748:	2041      	movs	r0, #65	; 0x41
 800274a:	f000 f80d 	bl	8002768 <WriteSpi>
	WriteSpi(ST1_3, 0x11);
 800274e:	2111      	movs	r1, #17
 8002750:	2042      	movs	r0, #66	; 0x42
 8002752:	f000 f809 	bl	8002768 <WriteSpi>
	WriteSpi(CTRL_REG1, 0x01);
 8002756:	2101      	movs	r1, #1
 8002758:	2021      	movs	r0, #33	; 0x21
 800275a:	f000 f805 	bl	8002768 <WriteSpi>
	HAL_Delay(100);
 800275e:	2064      	movs	r0, #100	; 0x64
 8002760:	f000 fc58 	bl	8003014 <HAL_Delay>
	WriteSpi(CTRL_REG5, 0x00);
	WriteSpi(0x57, 0x55);
	WriteSpi(ST1_1, 0x05);
	WriteSpi(ST1_2, 0x11);
	HAL_Delay(50);*/
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}

08002768 <WriteSpi>:

void WriteSpi(uint8_t addres, uint8_t data)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	460a      	mov	r2, r1
 8002772:	71fb      	strb	r3, [r7, #7]
 8002774:	4613      	mov	r3, r2
 8002776:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, DISABLE);
 8002778:	2200      	movs	r2, #0
 800277a:	2108      	movs	r1, #8
 800277c:	480b      	ldr	r0, [pc, #44]	; (80027ac <WriteSpi+0x44>)
 800277e:	f000 ff1b 	bl	80035b8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &addres, 1, 100);
 8002782:	1df9      	adds	r1, r7, #7
 8002784:	2364      	movs	r3, #100	; 0x64
 8002786:	2201      	movs	r2, #1
 8002788:	4809      	ldr	r0, [pc, #36]	; (80027b0 <WriteSpi+0x48>)
 800278a:	f003 f800 	bl	800578e <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 800278e:	1db9      	adds	r1, r7, #6
 8002790:	2364      	movs	r3, #100	; 0x64
 8002792:	2201      	movs	r2, #1
 8002794:	4806      	ldr	r0, [pc, #24]	; (80027b0 <WriteSpi+0x48>)
 8002796:	f002 fffa 	bl	800578e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, ENABLE);
 800279a:	2201      	movs	r2, #1
 800279c:	2108      	movs	r1, #8
 800279e:	4803      	ldr	r0, [pc, #12]	; (80027ac <WriteSpi+0x44>)
 80027a0:	f000 ff0a 	bl	80035b8 <HAL_GPIO_WritePin>

}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	20000168 	.word	0x20000168

080027b4 <ReadSpi>:


uint8_t ReadSpi(uint8_t addres)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]

	uint8_t buffer;

	if(flag_control == 1)
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <ReadSpi+0x64>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <ReadSpi+0x18>
	{
		addres = addres;
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	71fb      	strb	r3, [r7, #7]
 80027ca:	e008      	b.n	80027de <ReadSpi+0x2a>
	}
	else if (flag_control == 0)
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <ReadSpi+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d104      	bne.n	80027de <ReadSpi+0x2a>
	{
		addres = addres | 0x80;		// addresin basina 1 yazarak okuma yapcagimizi soyluyoruz
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	71fb      	strb	r3, [r7, #7]
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
 80027e0:	2108      	movs	r1, #8
 80027e2:	480e      	ldr	r0, [pc, #56]	; (800281c <ReadSpi+0x68>)
 80027e4:	f000 fee8 	bl	80035b8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &addres, 1, 100);
 80027e8:	1df9      	adds	r1, r7, #7
 80027ea:	2364      	movs	r3, #100	; 0x64
 80027ec:	2201      	movs	r2, #1
 80027ee:	480c      	ldr	r0, [pc, #48]	; (8002820 <ReadSpi+0x6c>)
 80027f0:	f002 ffcd 	bl	800578e <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &buffer, 1, 100);
 80027f4:	f107 010f 	add.w	r1, r7, #15
 80027f8:	2364      	movs	r3, #100	; 0x64
 80027fa:	2201      	movs	r2, #1
 80027fc:	4808      	ldr	r0, [pc, #32]	; (8002820 <ReadSpi+0x6c>)
 80027fe:	f003 f902 	bl	8005a06 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8002802:	2201      	movs	r2, #1
 8002804:	2108      	movs	r1, #8
 8002806:	4805      	ldr	r0, [pc, #20]	; (800281c <ReadSpi+0x68>)
 8002808:	f000 fed6 	bl	80035b8 <HAL_GPIO_WritePin>

	return buffer;
 800280c:	7bfb      	ldrb	r3, [r7, #15]

}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200006d4 	.word	0x200006d4
 800281c:	40021000 	.word	0x40021000
 8002820:	20000168 	.word	0x20000168

08002824 <Read_all>:


void Read_all(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af02      	add	r7, sp, #8
	  x = ReadSpi(x_address);
 800282a:	2029      	movs	r0, #41	; 0x29
 800282c:	f7ff ffc2 	bl	80027b4 <ReadSpi>
 8002830:	4603      	mov	r3, r0
 8002832:	b25a      	sxtb	r2, r3
 8002834:	4b6c      	ldr	r3, [pc, #432]	; (80029e8 <Read_all+0x1c4>)
 8002836:	701a      	strb	r2, [r3, #0]

	  y = ReadSpi(y_address);
 8002838:	202b      	movs	r0, #43	; 0x2b
 800283a:	f7ff ffbb 	bl	80027b4 <ReadSpi>
 800283e:	4603      	mov	r3, r0
 8002840:	b25a      	sxtb	r2, r3
 8002842:	4b6a      	ldr	r3, [pc, #424]	; (80029ec <Read_all+0x1c8>)
 8002844:	701a      	strb	r2, [r3, #0]

	  z = ReadSpi(z_address);
 8002846:	202d      	movs	r0, #45	; 0x2d
 8002848:	f7ff ffb4 	bl	80027b4 <ReadSpi>
 800284c:	4603      	mov	r3, r0
 800284e:	b25a      	sxtb	r2, r3
 8002850:	4b67      	ldr	r3, [pc, #412]	; (80029f0 <Read_all+0x1cc>)
 8002852:	701a      	strb	r2, [r3, #0]

	  Temperature = BMP180_GetTemp();
 8002854:	f7fe fc0e 	bl	8001074 <BMP180_GetTemp>
 8002858:	eef0 7a40 	vmov.f32	s15, s0
 800285c:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <Read_all+0x1d0>)
 800285e:	edc3 7a00 	vstr	s15, [r3]

	  Pressure = BMP180_GetPress (0);
 8002862:	2000      	movs	r0, #0
 8002864:	f7fe fd02 	bl	800126c <BMP180_GetPress>
 8002868:	eef0 7a40 	vmov.f32	s15, s0
 800286c:	4b62      	ldr	r3, [pc, #392]	; (80029f8 <Read_all+0x1d4>)
 800286e:	edc3 7a00 	vstr	s15, [r3]

	  Altitude = BMP180_GetAlt(0);
 8002872:	2000      	movs	r0, #0
 8002874:	f7fe ff2c 	bl	80016d0 <BMP180_GetAlt>
 8002878:	eef0 7a40 	vmov.f32	s15, s0
 800287c:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <Read_all+0x1d8>)
 800287e:	edc3 7a00 	vstr	s15, [r3]


	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002882:	2200      	movs	r2, #0
 8002884:	495e      	ldr	r1, [pc, #376]	; (8002a00 <Read_all+0x1dc>)
 8002886:	485f      	ldr	r0, [pc, #380]	; (8002a04 <Read_all+0x1e0>)
 8002888:	f002 fd0a 	bl	80052a0 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800288c:	2200      	movs	r2, #0
 800288e:	495e      	ldr	r1, [pc, #376]	; (8002a08 <Read_all+0x1e4>)
 8002890:	485c      	ldr	r0, [pc, #368]	; (8002a04 <Read_all+0x1e0>)
 8002892:	f002 fde7 	bl	8005464 <HAL_RTC_GetDate>

	  time_second = sTime.Seconds;
 8002896:	4b5a      	ldr	r3, [pc, #360]	; (8002a00 <Read_all+0x1dc>)
 8002898:	789a      	ldrb	r2, [r3, #2]
 800289a:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <Read_all+0x1e8>)
 800289c:	701a      	strb	r2, [r3, #0]
	  time_minute = sTime.Minutes;
 800289e:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <Read_all+0x1dc>)
 80028a0:	785a      	ldrb	r2, [r3, #1]
 80028a2:	4b5b      	ldr	r3, [pc, #364]	; (8002a10 <Read_all+0x1ec>)
 80028a4:	701a      	strb	r2, [r3, #0]
	  time_hour = sTime.Hours;
 80028a6:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <Read_all+0x1dc>)
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	4b5a      	ldr	r3, [pc, #360]	; (8002a14 <Read_all+0x1f0>)
 80028ac:	701a      	strb	r2, [r3, #0]
	  date_week = sDate.WeekDay;
 80028ae:	4b56      	ldr	r3, [pc, #344]	; (8002a08 <Read_all+0x1e4>)
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <Read_all+0x1f4>)
 80028b4:	701a      	strb	r2, [r3, #0]
	  date_month = sDate.Month;
 80028b6:	4b54      	ldr	r3, [pc, #336]	; (8002a08 <Read_all+0x1e4>)
 80028b8:	785a      	ldrb	r2, [r3, #1]
 80028ba:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <Read_all+0x1f8>)
 80028bc:	701a      	strb	r2, [r3, #0]
	  date_year = sDate.Year;
 80028be:	4b52      	ldr	r3, [pc, #328]	; (8002a08 <Read_all+0x1e4>)
 80028c0:	78da      	ldrb	r2, [r3, #3]
 80028c2:	4b57      	ldr	r3, [pc, #348]	; (8002a20 <Read_all+0x1fc>)
 80028c4:	701a      	strb	r2, [r3, #0]


	  if(crash_flag == 1)
 80028c6:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <Read_all+0x200>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	f040 80ca 	bne.w	8002a64 <Read_all+0x240>
	  {
		  result = f_open(&file_pointer, "CRASH.txt", FA_OPEN_APPEND | FA_WRITE);			// Bu kısmı her seferinde bi önceki verileri silip yeniden dosya acmak icin kullanıyoruz
 80028d0:	2232      	movs	r2, #50	; 0x32
 80028d2:	4955      	ldr	r1, [pc, #340]	; (8002a28 <Read_all+0x204>)
 80028d4:	4855      	ldr	r0, [pc, #340]	; (8002a2c <Read_all+0x208>)
 80028d6:	f005 fefd 	bl	80086d4 <f_open>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <Read_all+0x20c>)
 80028e0:	701a      	strb	r2, [r3, #0]
		  //result = f_open(&file_pointer, "CRASH.txt", FA_CREATE_ALWAYS | FA_WRITE);
		  if(result == FR_OK)
 80028e2:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <Read_all+0x20c>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d176      	bne.n	80029d8 <Read_all+0x1b4>
		  {
			 f_printf(&file_pointer, "\n");
 80028ea:	4952      	ldr	r1, [pc, #328]	; (8002a34 <Read_all+0x210>)
 80028ec:	484f      	ldr	r0, [pc, #316]	; (8002a2c <Read_all+0x208>)
 80028ee:	f006 fb43 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "==================================\n");
 80028f2:	4951      	ldr	r1, [pc, #324]	; (8002a38 <Read_all+0x214>)
 80028f4:	484d      	ldr	r0, [pc, #308]	; (8002a2c <Read_all+0x208>)
 80028f6:	f006 fb3f 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "============CRASH DATA============\n");
 80028fa:	4950      	ldr	r1, [pc, #320]	; (8002a3c <Read_all+0x218>)
 80028fc:	484b      	ldr	r0, [pc, #300]	; (8002a2c <Read_all+0x208>)
 80028fe:	f006 fb3b 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "==================================\n");
 8002902:	494d      	ldr	r1, [pc, #308]	; (8002a38 <Read_all+0x214>)
 8002904:	4849      	ldr	r0, [pc, #292]	; (8002a2c <Read_all+0x208>)
 8002906:	f006 fb37 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "Clock : ");
 800290a:	494d      	ldr	r1, [pc, #308]	; (8002a40 <Read_all+0x21c>)
 800290c:	4847      	ldr	r0, [pc, #284]	; (8002a2c <Read_all+0x208>)
 800290e:	f006 fb33 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "%d:%d:%d",(int16_t)time_second,(int16_t)time_minute,(int16_t)time_hour);
 8002912:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <Read_all+0x1e8>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <Read_all+0x1ec>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	4619      	mov	r1, r3
 800291e:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <Read_all+0x1f0>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	460b      	mov	r3, r1
 8002926:	4947      	ldr	r1, [pc, #284]	; (8002a44 <Read_all+0x220>)
 8002928:	4840      	ldr	r0, [pc, #256]	; (8002a2c <Read_all+0x208>)
 800292a:	f006 fb25 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "\n");
 800292e:	4941      	ldr	r1, [pc, #260]	; (8002a34 <Read_all+0x210>)
 8002930:	483e      	ldr	r0, [pc, #248]	; (8002a2c <Read_all+0x208>)
 8002932:	f006 fb21 	bl	8008f78 <f_printf>

			 f_printf(&file_pointer, "Date : ");
 8002936:	4944      	ldr	r1, [pc, #272]	; (8002a48 <Read_all+0x224>)
 8002938:	483c      	ldr	r0, [pc, #240]	; (8002a2c <Read_all+0x208>)
 800293a:	f006 fb1d 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "%d.%d.%d",(int16_t)date_week,(int16_t)date_month,(int16_t)date_year);
 800293e:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <Read_all+0x1f4>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	4b35      	ldr	r3, [pc, #212]	; (8002a1c <Read_all+0x1f8>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	4b35      	ldr	r3, [pc, #212]	; (8002a20 <Read_all+0x1fc>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	460b      	mov	r3, r1
 8002952:	493e      	ldr	r1, [pc, #248]	; (8002a4c <Read_all+0x228>)
 8002954:	4835      	ldr	r0, [pc, #212]	; (8002a2c <Read_all+0x208>)
 8002956:	f006 fb0f 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "\n");
 800295a:	4936      	ldr	r1, [pc, #216]	; (8002a34 <Read_all+0x210>)
 800295c:	4833      	ldr	r0, [pc, #204]	; (8002a2c <Read_all+0x208>)
 800295e:	f006 fb0b 	bl	8008f78 <f_printf>

			 f_printf(&file_pointer, "Pressure = ");
 8002962:	493b      	ldr	r1, [pc, #236]	; (8002a50 <Read_all+0x22c>)
 8002964:	4831      	ldr	r0, [pc, #196]	; (8002a2c <Read_all+0x208>)
 8002966:	f006 fb07 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "%d",(int32_t)Pressure);
 800296a:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <Read_all+0x1d4>)
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002974:	ee17 2a90 	vmov	r2, s15
 8002978:	4936      	ldr	r1, [pc, #216]	; (8002a54 <Read_all+0x230>)
 800297a:	482c      	ldr	r0, [pc, #176]	; (8002a2c <Read_all+0x208>)
 800297c:	f006 fafc 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, " Pa");
 8002980:	4935      	ldr	r1, [pc, #212]	; (8002a58 <Read_all+0x234>)
 8002982:	482a      	ldr	r0, [pc, #168]	; (8002a2c <Read_all+0x208>)
 8002984:	f006 faf8 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "\n");
 8002988:	492a      	ldr	r1, [pc, #168]	; (8002a34 <Read_all+0x210>)
 800298a:	4828      	ldr	r0, [pc, #160]	; (8002a2c <Read_all+0x208>)
 800298c:	f006 faf4 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "Temperature = ");
 8002990:	4932      	ldr	r1, [pc, #200]	; (8002a5c <Read_all+0x238>)
 8002992:	4826      	ldr	r0, [pc, #152]	; (8002a2c <Read_all+0x208>)
 8002994:	f006 faf0 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "%d",(int16_t)Temperature);
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <Read_all+0x1d0>)
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a2:	ee17 3a90 	vmov	r3, s15
 80029a6:	b21b      	sxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	492a      	ldr	r1, [pc, #168]	; (8002a54 <Read_all+0x230>)
 80029ac:	481f      	ldr	r0, [pc, #124]	; (8002a2c <Read_all+0x208>)
 80029ae:	f006 fae3 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "°C");
 80029b2:	492b      	ldr	r1, [pc, #172]	; (8002a60 <Read_all+0x23c>)
 80029b4:	481d      	ldr	r0, [pc, #116]	; (8002a2c <Read_all+0x208>)
 80029b6:	f006 fadf 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "\n");
 80029ba:	491e      	ldr	r1, [pc, #120]	; (8002a34 <Read_all+0x210>)
 80029bc:	481b      	ldr	r0, [pc, #108]	; (8002a2c <Read_all+0x208>)
 80029be:	f006 fadb 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "\n");
 80029c2:	491c      	ldr	r1, [pc, #112]	; (8002a34 <Read_all+0x210>)
 80029c4:	4819      	ldr	r0, [pc, #100]	; (8002a2c <Read_all+0x208>)
 80029c6:	f006 fad7 	bl	8008f78 <f_printf>




		  	 if(result == FR_OK) __NOP();
 80029ca:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <Read_all+0x20c>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <Read_all+0x1b2>
 80029d2:	bf00      	nop
 80029d4:	e000      	b.n	80029d8 <Read_all+0x1b4>
		  	 else __NOP();
 80029d6:	bf00      	nop
		   }
		   HAL_Delay(20);
 80029d8:	2014      	movs	r0, #20
 80029da:	f000 fb1b 	bl	8003014 <HAL_Delay>
		   f_close(&file_pointer);
 80029de:	4813      	ldr	r0, [pc, #76]	; (8002a2c <Read_all+0x208>)
 80029e0:	f006 fa29 	bl	8008e36 <f_close>
		   }
		   HAL_Delay(20);
		   f_close(&file_pointer);
	  }

}
 80029e4:	e0c8      	b.n	8002b78 <Read_all+0x354>
 80029e6:	bf00      	nop
 80029e8:	200006d0 	.word	0x200006d0
 80029ec:	200006d1 	.word	0x200006d1
 80029f0:	200006d2 	.word	0x200006d2
 80029f4:	200006c4 	.word	0x200006c4
 80029f8:	200006c8 	.word	0x200006c8
 80029fc:	200006cc 	.word	0x200006cc
 8002a00:	200006ec 	.word	0x200006ec
 8002a04:	20000148 	.word	0x20000148
 8002a08:	20000700 	.word	0x20000700
 8002a0c:	200006e5 	.word	0x200006e5
 8002a10:	200006e4 	.word	0x200006e4
 8002a14:	200006e6 	.word	0x200006e6
 8002a18:	200006e7 	.word	0x200006e7
 8002a1c:	200006e8 	.word	0x200006e8
 8002a20:	200006e9 	.word	0x200006e9
 8002a24:	200006e0 	.word	0x200006e0
 8002a28:	0800a334 	.word	0x0800a334
 8002a2c:	20000494 	.word	0x20000494
 8002a30:	20000490 	.word	0x20000490
 8002a34:	0800a340 	.word	0x0800a340
 8002a38:	0800a344 	.word	0x0800a344
 8002a3c:	0800a368 	.word	0x0800a368
 8002a40:	0800a38c 	.word	0x0800a38c
 8002a44:	0800a398 	.word	0x0800a398
 8002a48:	0800a3a4 	.word	0x0800a3a4
 8002a4c:	0800a3ac 	.word	0x0800a3ac
 8002a50:	0800a3b8 	.word	0x0800a3b8
 8002a54:	0800a3c4 	.word	0x0800a3c4
 8002a58:	0800a3c8 	.word	0x0800a3c8
 8002a5c:	0800a3cc 	.word	0x0800a3cc
 8002a60:	0800a3dc 	.word	0x0800a3dc
		  result = f_open(&file_pointer, "DATA.txt", FA_OPEN_APPEND | FA_WRITE);			// Bu kısmı her seferinde bi önceki verileri silip yeniden dosya acmak icin kullanıyoruz
 8002a64:	2232      	movs	r2, #50	; 0x32
 8002a66:	4946      	ldr	r1, [pc, #280]	; (8002b80 <Read_all+0x35c>)
 8002a68:	4846      	ldr	r0, [pc, #280]	; (8002b84 <Read_all+0x360>)
 8002a6a:	f005 fe33 	bl	80086d4 <f_open>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b45      	ldr	r3, [pc, #276]	; (8002b88 <Read_all+0x364>)
 8002a74:	701a      	strb	r2, [r3, #0]
		  if(result == FR_OK)
 8002a76:	4b44      	ldr	r3, [pc, #272]	; (8002b88 <Read_all+0x364>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d176      	bne.n	8002b6c <Read_all+0x348>
			 f_printf(&file_pointer, "\n");
 8002a7e:	4943      	ldr	r1, [pc, #268]	; (8002b8c <Read_all+0x368>)
 8002a80:	4840      	ldr	r0, [pc, #256]	; (8002b84 <Read_all+0x360>)
 8002a82:	f006 fa79 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "==================================\n");
 8002a86:	4942      	ldr	r1, [pc, #264]	; (8002b90 <Read_all+0x36c>)
 8002a88:	483e      	ldr	r0, [pc, #248]	; (8002b84 <Read_all+0x360>)
 8002a8a:	f006 fa75 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "===========NORMAL DATA============\n");
 8002a8e:	4941      	ldr	r1, [pc, #260]	; (8002b94 <Read_all+0x370>)
 8002a90:	483c      	ldr	r0, [pc, #240]	; (8002b84 <Read_all+0x360>)
 8002a92:	f006 fa71 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "==================================\n");
 8002a96:	493e      	ldr	r1, [pc, #248]	; (8002b90 <Read_all+0x36c>)
 8002a98:	483a      	ldr	r0, [pc, #232]	; (8002b84 <Read_all+0x360>)
 8002a9a:	f006 fa6d 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "Clock : ");
 8002a9e:	493e      	ldr	r1, [pc, #248]	; (8002b98 <Read_all+0x374>)
 8002aa0:	4838      	ldr	r0, [pc, #224]	; (8002b84 <Read_all+0x360>)
 8002aa2:	f006 fa69 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "%d:%d:%d",(int16_t)time_second,(int16_t)time_minute,(int16_t)time_hour);
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <Read_all+0x378>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b3c      	ldr	r3, [pc, #240]	; (8002ba0 <Read_all+0x37c>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <Read_all+0x380>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	493b      	ldr	r1, [pc, #236]	; (8002ba8 <Read_all+0x384>)
 8002abc:	4831      	ldr	r0, [pc, #196]	; (8002b84 <Read_all+0x360>)
 8002abe:	f006 fa5b 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "\n");
 8002ac2:	4932      	ldr	r1, [pc, #200]	; (8002b8c <Read_all+0x368>)
 8002ac4:	482f      	ldr	r0, [pc, #188]	; (8002b84 <Read_all+0x360>)
 8002ac6:	f006 fa57 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "Date : ");
 8002aca:	4938      	ldr	r1, [pc, #224]	; (8002bac <Read_all+0x388>)
 8002acc:	482d      	ldr	r0, [pc, #180]	; (8002b84 <Read_all+0x360>)
 8002ace:	f006 fa53 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "%d.%d.%d",(int16_t)date_week,(int16_t)date_month,(int16_t)date_year);
 8002ad2:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <Read_all+0x38c>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <Read_all+0x390>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <Read_all+0x394>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4935      	ldr	r1, [pc, #212]	; (8002bbc <Read_all+0x398>)
 8002ae8:	4826      	ldr	r0, [pc, #152]	; (8002b84 <Read_all+0x360>)
 8002aea:	f006 fa45 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "\n");
 8002aee:	4927      	ldr	r1, [pc, #156]	; (8002b8c <Read_all+0x368>)
 8002af0:	4824      	ldr	r0, [pc, #144]	; (8002b84 <Read_all+0x360>)
 8002af2:	f006 fa41 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "Pressure = ");
 8002af6:	4932      	ldr	r1, [pc, #200]	; (8002bc0 <Read_all+0x39c>)
 8002af8:	4822      	ldr	r0, [pc, #136]	; (8002b84 <Read_all+0x360>)
 8002afa:	f006 fa3d 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "%d",(int32_t)Pressure);
 8002afe:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <Read_all+0x3a0>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b08:	ee17 2a90 	vmov	r2, s15
 8002b0c:	492e      	ldr	r1, [pc, #184]	; (8002bc8 <Read_all+0x3a4>)
 8002b0e:	481d      	ldr	r0, [pc, #116]	; (8002b84 <Read_all+0x360>)
 8002b10:	f006 fa32 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, " Pa");
 8002b14:	492d      	ldr	r1, [pc, #180]	; (8002bcc <Read_all+0x3a8>)
 8002b16:	481b      	ldr	r0, [pc, #108]	; (8002b84 <Read_all+0x360>)
 8002b18:	f006 fa2e 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "\n");
 8002b1c:	491b      	ldr	r1, [pc, #108]	; (8002b8c <Read_all+0x368>)
 8002b1e:	4819      	ldr	r0, [pc, #100]	; (8002b84 <Read_all+0x360>)
 8002b20:	f006 fa2a 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "Temperature = ");
 8002b24:	492a      	ldr	r1, [pc, #168]	; (8002bd0 <Read_all+0x3ac>)
 8002b26:	4817      	ldr	r0, [pc, #92]	; (8002b84 <Read_all+0x360>)
 8002b28:	f006 fa26 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "%d",(int16_t)Temperature);
 8002b2c:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <Read_all+0x3b0>)
 8002b2e:	edd3 7a00 	vldr	s15, [r3]
 8002b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b36:	ee17 3a90 	vmov	r3, s15
 8002b3a:	b21b      	sxth	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4922      	ldr	r1, [pc, #136]	; (8002bc8 <Read_all+0x3a4>)
 8002b40:	4810      	ldr	r0, [pc, #64]	; (8002b84 <Read_all+0x360>)
 8002b42:	f006 fa19 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "°C");
 8002b46:	4924      	ldr	r1, [pc, #144]	; (8002bd8 <Read_all+0x3b4>)
 8002b48:	480e      	ldr	r0, [pc, #56]	; (8002b84 <Read_all+0x360>)
 8002b4a:	f006 fa15 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "\n");
 8002b4e:	490f      	ldr	r1, [pc, #60]	; (8002b8c <Read_all+0x368>)
 8002b50:	480c      	ldr	r0, [pc, #48]	; (8002b84 <Read_all+0x360>)
 8002b52:	f006 fa11 	bl	8008f78 <f_printf>
			 f_printf(&file_pointer, "\n");
 8002b56:	490d      	ldr	r1, [pc, #52]	; (8002b8c <Read_all+0x368>)
 8002b58:	480a      	ldr	r0, [pc, #40]	; (8002b84 <Read_all+0x360>)
 8002b5a:	f006 fa0d 	bl	8008f78 <f_printf>
		  	 if(result == FR_OK) __NOP();
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <Read_all+0x364>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <Read_all+0x346>
 8002b66:	bf00      	nop
 8002b68:	e000      	b.n	8002b6c <Read_all+0x348>
		  	 else __NOP();
 8002b6a:	bf00      	nop
		   HAL_Delay(20);
 8002b6c:	2014      	movs	r0, #20
 8002b6e:	f000 fa51 	bl	8003014 <HAL_Delay>
		   f_close(&file_pointer);
 8002b72:	4804      	ldr	r0, [pc, #16]	; (8002b84 <Read_all+0x360>)
 8002b74:	f006 f95f 	bl	8008e36 <f_close>
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	0800a328 	.word	0x0800a328
 8002b84:	20000494 	.word	0x20000494
 8002b88:	20000490 	.word	0x20000490
 8002b8c:	0800a340 	.word	0x0800a340
 8002b90:	0800a344 	.word	0x0800a344
 8002b94:	0800a3e0 	.word	0x0800a3e0
 8002b98:	0800a38c 	.word	0x0800a38c
 8002b9c:	200006e5 	.word	0x200006e5
 8002ba0:	200006e4 	.word	0x200006e4
 8002ba4:	200006e6 	.word	0x200006e6
 8002ba8:	0800a398 	.word	0x0800a398
 8002bac:	0800a3a4 	.word	0x0800a3a4
 8002bb0:	200006e7 	.word	0x200006e7
 8002bb4:	200006e8 	.word	0x200006e8
 8002bb8:	200006e9 	.word	0x200006e9
 8002bbc:	0800a3ac 	.word	0x0800a3ac
 8002bc0:	0800a3b8 	.word	0x0800a3b8
 8002bc4:	200006c8 	.word	0x200006c8
 8002bc8:	0800a3c4 	.word	0x0800a3c4
 8002bcc:	0800a3c8 	.word	0x0800a3c8
 8002bd0:	0800a3cc 	.word	0x0800a3cc
 8002bd4:	200006c4 	.word	0x200006c4
 8002bd8:	0800a3dc 	.word	0x0800a3dc

08002bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002be0:	b672      	cpsid	i
}
 8002be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <Error_Handler+0x8>
	...

08002be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_MspInit+0x4c>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <HAL_MspInit+0x4c>)
 8002bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_MspInit+0x4c>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <HAL_MspInit+0x4c>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a08      	ldr	r2, [pc, #32]	; (8002c34 <HAL_MspInit+0x4c>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_MspInit+0x4c>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800

08002c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a19      	ldr	r2, [pc, #100]	; (8002cbc <HAL_I2C_MspInit+0x84>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d12b      	bne.n	8002cb2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c76:	23c0      	movs	r3, #192	; 0xc0
 8002c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c7a:	2312      	movs	r3, #18
 8002c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c82:	2303      	movs	r3, #3
 8002c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c86:	2304      	movs	r3, #4
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	480c      	ldr	r0, [pc, #48]	; (8002cc4 <HAL_I2C_MspInit+0x8c>)
 8002c92:	f000 faf5 	bl	8003280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002ca0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_I2C_MspInit+0x88>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cb2:	bf00      	nop
 8002cb4:	3728      	adds	r7, #40	; 0x28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40005400 	.word	0x40005400
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020400 	.word	0x40020400

08002cc8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cd0:	f107 0308 	add.w	r3, r7, #8
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <HAL_RTC_MspInit+0x4c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d111      	bne.n	8002d0c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 f8e0 	bl	8004ebc <HAL_RCCEx_PeriphCLKConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002d02:	f7ff ff6b 	bl	8002bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <HAL_RTC_MspInit+0x50>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d0c:	bf00      	nop
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40002800 	.word	0x40002800
 8002d18:	42470e3c 	.word	0x42470e3c

08002d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08c      	sub	sp, #48	; 0x30
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d24:	f107 031c 	add.w	r3, r7, #28
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a32      	ldr	r2, [pc, #200]	; (8002e04 <HAL_SPI_MspInit+0xe8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d12c      	bne.n	8002d98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4a30      	ldr	r2, [pc, #192]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	4b2e      	ldr	r3, [pc, #184]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d76:	23e0      	movs	r3, #224	; 0xe0
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d86:	2305      	movs	r3, #5
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8a:	f107 031c 	add.w	r3, r7, #28
 8002d8e:	4619      	mov	r1, r3
 8002d90:	481e      	ldr	r0, [pc, #120]	; (8002e0c <HAL_SPI_MspInit+0xf0>)
 8002d92:	f000 fa75 	bl	8003280 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d96:	e031      	b.n	8002dfc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_SPI_MspInit+0xf4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d12c      	bne.n	8002dfc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_SPI_MspInit+0xec>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002dda:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dec:	2305      	movs	r3, #5
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	4619      	mov	r1, r3
 8002df6:	4807      	ldr	r0, [pc, #28]	; (8002e14 <HAL_SPI_MspInit+0xf8>)
 8002df8:	f000 fa42 	bl	8003280 <HAL_GPIO_Init>
}
 8002dfc:	bf00      	nop
 8002dfe:	3730      	adds	r7, #48	; 0x30
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40013000 	.word	0x40013000
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40003800 	.word	0x40003800
 8002e14:	40020400 	.word	0x40020400

08002e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e28:	d115      	bne.n	8002e56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_TIM_Base_MspInit+0x48>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <HAL_TIM_Base_MspInit+0x48>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_TIM_Base_MspInit+0x48>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2101      	movs	r1, #1
 8002e4a:	201c      	movs	r0, #28
 8002e4c:	f000 f9e1 	bl	8003212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e50:	201c      	movs	r0, #28
 8002e52:	f000 f9fa 	bl	800324a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800

08002e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <NMI_Handler+0x4>

08002e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e6e:	e7fe      	b.n	8002e6e <HardFault_Handler+0x4>

08002e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <MemManage_Handler+0x4>

08002e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e7a:	e7fe      	b.n	8002e7a <BusFault_Handler+0x4>

08002e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <UsageFault_Handler+0x4>

08002e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eb0:	f000 f890 	bl	8002fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <SystemInit+0x20>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <SystemInit+0x20>)
 8002ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ee0:	480d      	ldr	r0, [pc, #52]	; (8002f18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ee2:	490e      	ldr	r1, [pc, #56]	; (8002f1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ee4:	4a0e      	ldr	r2, [pc, #56]	; (8002f20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee8:	e002      	b.n	8002ef0 <LoopCopyDataInit>

08002eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eee:	3304      	adds	r3, #4

08002ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef4:	d3f9      	bcc.n	8002eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ef6:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ef8:	4c0b      	ldr	r4, [pc, #44]	; (8002f28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002efc:	e001      	b.n	8002f02 <LoopFillZerobss>

08002efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f00:	3204      	adds	r2, #4

08002f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f04:	d3fb      	bcc.n	8002efe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f06:	f7ff ffd7 	bl	8002eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f0a:	f006 fab5 	bl	8009478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0e:	f7ff f8fd 	bl	800210c <main>
  bx  lr    
 8002f12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f1c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002f20:	0800a520 	.word	0x0800a520
  ldr r2, =_sbss
 8002f24:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002f28:	20000744 	.word	0x20000744

08002f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f2c:	e7fe      	b.n	8002f2c <ADC_IRQHandler>
	...

08002f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <HAL_Init+0x40>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0d      	ldr	r2, [pc, #52]	; (8002f70 <HAL_Init+0x40>)
 8002f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <HAL_Init+0x40>)
 8002f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a07      	ldr	r2, [pc, #28]	; (8002f70 <HAL_Init+0x40>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f58:	2003      	movs	r0, #3
 8002f5a:	f000 f94f 	bl	80031fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f5e:	200f      	movs	r0, #15
 8002f60:	f000 f808 	bl	8002f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f64:	f7ff fe40 	bl	8002be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023c00 	.word	0x40023c00

08002f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_InitTick+0x54>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <HAL_InitTick+0x58>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	4619      	mov	r1, r3
 8002f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f967 	bl	8003266 <HAL_SYSTICK_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00e      	b.n	8002fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b0f      	cmp	r3, #15
 8002fa6:	d80a      	bhi.n	8002fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	f000 f92f 	bl	8003212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fb4:	4a06      	ldr	r2, [pc, #24]	; (8002fd0 <HAL_InitTick+0x5c>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e000      	b.n	8002fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000004 	.word	0x20000004
 8002fcc:	2000000c 	.word	0x2000000c
 8002fd0:	20000008 	.word	0x20000008

08002fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_IncTick+0x20>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_IncTick+0x24>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_IncTick+0x24>)
 8002fe6:	6013      	str	r3, [r2, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	2000000c 	.word	0x2000000c
 8002ff8:	20000704 	.word	0x20000704

08002ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_GetTick+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000704 	.word	0x20000704

08003014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7ff ffee 	bl	8002ffc <HAL_GetTick>
 8003020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d005      	beq.n	800303a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <HAL_Delay+0x44>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800303a:	bf00      	nop
 800303c:	f7ff ffde 	bl	8002ffc <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d8f7      	bhi.n	800303c <HAL_Delay+0x28>
  {
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000000c 	.word	0x2000000c

0800305c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <__NVIC_SetPriorityGrouping+0x44>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003078:	4013      	ands	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800308e:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	60d3      	str	r3, [r2, #12]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <__NVIC_GetPriorityGrouping+0x18>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	f003 0307 	and.w	r3, r3, #7
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	db0b      	blt.n	80030ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	4907      	ldr	r1, [pc, #28]	; (80030f8 <__NVIC_EnableIRQ+0x38>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2001      	movs	r0, #1
 80030e2:	fa00 f202 	lsl.w	r2, r0, r2
 80030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	e000e100 	.word	0xe000e100

080030fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	6039      	str	r1, [r7, #0]
 8003106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310c:	2b00      	cmp	r3, #0
 800310e:	db0a      	blt.n	8003126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	490c      	ldr	r1, [pc, #48]	; (8003148 <__NVIC_SetPriority+0x4c>)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	0112      	lsls	r2, r2, #4
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	440b      	add	r3, r1
 8003120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003124:	e00a      	b.n	800313c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4908      	ldr	r1, [pc, #32]	; (800314c <__NVIC_SetPriority+0x50>)
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	3b04      	subs	r3, #4
 8003134:	0112      	lsls	r2, r2, #4
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	440b      	add	r3, r1
 800313a:	761a      	strb	r2, [r3, #24]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000e100 	.word	0xe000e100
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f1c3 0307 	rsb	r3, r3, #7
 800316a:	2b04      	cmp	r3, #4
 800316c:	bf28      	it	cs
 800316e:	2304      	movcs	r3, #4
 8003170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3304      	adds	r3, #4
 8003176:	2b06      	cmp	r3, #6
 8003178:	d902      	bls.n	8003180 <NVIC_EncodePriority+0x30>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3b03      	subs	r3, #3
 800317e:	e000      	b.n	8003182 <NVIC_EncodePriority+0x32>
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	f04f 32ff 	mov.w	r2, #4294967295
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	401a      	ands	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003198:	f04f 31ff 	mov.w	r1, #4294967295
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	43d9      	mvns	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	4313      	orrs	r3, r2
         );
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3724      	adds	r7, #36	; 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c8:	d301      	bcc.n	80031ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00f      	b.n	80031ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <SysTick_Config+0x40>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031d6:	210f      	movs	r1, #15
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295
 80031dc:	f7ff ff8e 	bl	80030fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <SysTick_Config+0x40>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031e6:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <SysTick_Config+0x40>)
 80031e8:	2207      	movs	r2, #7
 80031ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	e000e010 	.word	0xe000e010

080031fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ff29 	bl	800305c <__NVIC_SetPriorityGrouping>
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003224:	f7ff ff3e 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 8003228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	6978      	ldr	r0, [r7, #20]
 8003230:	f7ff ff8e 	bl	8003150 <NVIC_EncodePriority>
 8003234:	4602      	mov	r2, r0
 8003236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff5d 	bl	80030fc <__NVIC_SetPriority>
}
 8003242:	bf00      	nop
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	4603      	mov	r3, r0
 8003252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff31 	bl	80030c0 <__NVIC_EnableIRQ>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ffa2 	bl	80031b8 <SysTick_Config>
 8003274:	4603      	mov	r3, r0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	; 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	e16b      	b.n	8003574 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800329c:	2201      	movs	r2, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	f040 815a 	bne.w	800356e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d005      	beq.n	80032d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d130      	bne.n	8003334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	2203      	movs	r2, #3
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003308:	2201      	movs	r2, #1
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 0201 	and.w	r2, r3, #1
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	2b03      	cmp	r3, #3
 800333e:	d017      	beq.n	8003370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d123      	bne.n	80033c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	08da      	lsrs	r2, r3, #3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3208      	adds	r2, #8
 8003384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	220f      	movs	r2, #15
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	08da      	lsrs	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3208      	adds	r2, #8
 80033be:	69b9      	ldr	r1, [r7, #24]
 80033c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2203      	movs	r2, #3
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 0203 	and.w	r2, r3, #3
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80b4 	beq.w	800356e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	4b60      	ldr	r3, [pc, #384]	; (800358c <HAL_GPIO_Init+0x30c>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	4a5f      	ldr	r2, [pc, #380]	; (800358c <HAL_GPIO_Init+0x30c>)
 8003410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003414:	6453      	str	r3, [r2, #68]	; 0x44
 8003416:	4b5d      	ldr	r3, [pc, #372]	; (800358c <HAL_GPIO_Init+0x30c>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003422:	4a5b      	ldr	r2, [pc, #364]	; (8003590 <HAL_GPIO_Init+0x310>)
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	3302      	adds	r3, #2
 800342a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	220f      	movs	r2, #15
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a52      	ldr	r2, [pc, #328]	; (8003594 <HAL_GPIO_Init+0x314>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d02b      	beq.n	80034a6 <HAL_GPIO_Init+0x226>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a51      	ldr	r2, [pc, #324]	; (8003598 <HAL_GPIO_Init+0x318>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d025      	beq.n	80034a2 <HAL_GPIO_Init+0x222>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a50      	ldr	r2, [pc, #320]	; (800359c <HAL_GPIO_Init+0x31c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01f      	beq.n	800349e <HAL_GPIO_Init+0x21e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a4f      	ldr	r2, [pc, #316]	; (80035a0 <HAL_GPIO_Init+0x320>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d019      	beq.n	800349a <HAL_GPIO_Init+0x21a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a4e      	ldr	r2, [pc, #312]	; (80035a4 <HAL_GPIO_Init+0x324>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_GPIO_Init+0x216>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a4d      	ldr	r2, [pc, #308]	; (80035a8 <HAL_GPIO_Init+0x328>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00d      	beq.n	8003492 <HAL_GPIO_Init+0x212>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a4c      	ldr	r2, [pc, #304]	; (80035ac <HAL_GPIO_Init+0x32c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <HAL_GPIO_Init+0x20e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4b      	ldr	r2, [pc, #300]	; (80035b0 <HAL_GPIO_Init+0x330>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_GPIO_Init+0x20a>
 8003486:	2307      	movs	r3, #7
 8003488:	e00e      	b.n	80034a8 <HAL_GPIO_Init+0x228>
 800348a:	2308      	movs	r3, #8
 800348c:	e00c      	b.n	80034a8 <HAL_GPIO_Init+0x228>
 800348e:	2306      	movs	r3, #6
 8003490:	e00a      	b.n	80034a8 <HAL_GPIO_Init+0x228>
 8003492:	2305      	movs	r3, #5
 8003494:	e008      	b.n	80034a8 <HAL_GPIO_Init+0x228>
 8003496:	2304      	movs	r3, #4
 8003498:	e006      	b.n	80034a8 <HAL_GPIO_Init+0x228>
 800349a:	2303      	movs	r3, #3
 800349c:	e004      	b.n	80034a8 <HAL_GPIO_Init+0x228>
 800349e:	2302      	movs	r3, #2
 80034a0:	e002      	b.n	80034a8 <HAL_GPIO_Init+0x228>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_GPIO_Init+0x228>
 80034a6:	2300      	movs	r3, #0
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	f002 0203 	and.w	r2, r2, #3
 80034ae:	0092      	lsls	r2, r2, #2
 80034b0:	4093      	lsls	r3, r2
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034b8:	4935      	ldr	r1, [pc, #212]	; (8003590 <HAL_GPIO_Init+0x310>)
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	089b      	lsrs	r3, r3, #2
 80034be:	3302      	adds	r3, #2
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034c6:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <HAL_GPIO_Init+0x334>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ea:	4a32      	ldr	r2, [pc, #200]	; (80035b4 <HAL_GPIO_Init+0x334>)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034f0:	4b30      	ldr	r3, [pc, #192]	; (80035b4 <HAL_GPIO_Init+0x334>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003514:	4a27      	ldr	r2, [pc, #156]	; (80035b4 <HAL_GPIO_Init+0x334>)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <HAL_GPIO_Init+0x334>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_GPIO_Init+0x334>)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003544:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_GPIO_Init+0x334>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003568:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <HAL_GPIO_Init+0x334>)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3301      	adds	r3, #1
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b0f      	cmp	r3, #15
 8003578:	f67f ae90 	bls.w	800329c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	3724      	adds	r7, #36	; 0x24
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800
 8003590:	40013800 	.word	0x40013800
 8003594:	40020000 	.word	0x40020000
 8003598:	40020400 	.word	0x40020400
 800359c:	40020800 	.word	0x40020800
 80035a0:	40020c00 	.word	0x40020c00
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40021400 	.word	0x40021400
 80035ac:	40021800 	.word	0x40021800
 80035b0:	40021c00 	.word	0x40021c00
 80035b4:	40013c00 	.word	0x40013c00

080035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c8:	787b      	ldrb	r3, [r7, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035d4:	e003      	b.n	80035de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	041a      	lsls	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	619a      	str	r2, [r3, #24]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035f6:	4b08      	ldr	r3, [pc, #32]	; (8003618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003602:	4a05      	ldr	r2, [pc, #20]	; (8003618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f806 	bl	800361c <HAL_GPIO_EXTI_Callback>
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40013c00 	.word	0x40013c00

0800361c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e12b      	b.n	800389e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff faec 	bl	8002c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	; 0x24
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003686:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003696:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003698:	f001 fbfc 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 800369c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4a81      	ldr	r2, [pc, #516]	; (80038a8 <HAL_I2C_Init+0x274>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d807      	bhi.n	80036b8 <HAL_I2C_Init+0x84>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a80      	ldr	r2, [pc, #512]	; (80038ac <HAL_I2C_Init+0x278>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	bf94      	ite	ls
 80036b0:	2301      	movls	r3, #1
 80036b2:	2300      	movhi	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e006      	b.n	80036c6 <HAL_I2C_Init+0x92>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a7d      	ldr	r2, [pc, #500]	; (80038b0 <HAL_I2C_Init+0x27c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	bf94      	ite	ls
 80036c0:	2301      	movls	r3, #1
 80036c2:	2300      	movhi	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0e7      	b.n	800389e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a78      	ldr	r2, [pc, #480]	; (80038b4 <HAL_I2C_Init+0x280>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	0c9b      	lsrs	r3, r3, #18
 80036d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a6a      	ldr	r2, [pc, #424]	; (80038a8 <HAL_I2C_Init+0x274>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d802      	bhi.n	8003708 <HAL_I2C_Init+0xd4>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	3301      	adds	r3, #1
 8003706:	e009      	b.n	800371c <HAL_I2C_Init+0xe8>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	4a69      	ldr	r2, [pc, #420]	; (80038b8 <HAL_I2C_Init+0x284>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	099b      	lsrs	r3, r3, #6
 800371a:	3301      	adds	r3, #1
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	430b      	orrs	r3, r1
 8003722:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800372e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	495c      	ldr	r1, [pc, #368]	; (80038a8 <HAL_I2C_Init+0x274>)
 8003738:	428b      	cmp	r3, r1
 800373a:	d819      	bhi.n	8003770 <HAL_I2C_Init+0x13c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1e59      	subs	r1, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fbb1 f3f3 	udiv	r3, r1, r3
 800374a:	1c59      	adds	r1, r3, #1
 800374c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003750:	400b      	ands	r3, r1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_I2C_Init+0x138>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1e59      	subs	r1, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fbb1 f3f3 	udiv	r3, r1, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376a:	e051      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 800376c:	2304      	movs	r3, #4
 800376e:	e04f      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d111      	bne.n	800379c <HAL_I2C_Init+0x168>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e58      	subs	r0, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	440b      	add	r3, r1
 8003786:	fbb0 f3f3 	udiv	r3, r0, r3
 800378a:	3301      	adds	r3, #1
 800378c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e012      	b.n	80037c2 <HAL_I2C_Init+0x18e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1e58      	subs	r0, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	0099      	lsls	r1, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Init+0x196>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e022      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10e      	bne.n	80037f0 <HAL_I2C_Init+0x1bc>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1e58      	subs	r0, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	460b      	mov	r3, r1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	440b      	add	r3, r1
 80037e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ee:	e00f      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e58      	subs	r0, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	0099      	lsls	r1, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	fbb0 f3f3 	udiv	r3, r0, r3
 8003806:	3301      	adds	r3, #1
 8003808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	6809      	ldr	r1, [r1, #0]
 8003814:	4313      	orrs	r3, r2
 8003816:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800383e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6911      	ldr	r1, [r2, #16]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68d2      	ldr	r2, [r2, #12]
 800384a:	4311      	orrs	r1, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	430b      	orrs	r3, r1
 8003852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	000186a0 	.word	0x000186a0
 80038ac:	001e847f 	.word	0x001e847f
 80038b0:	003d08ff 	.word	0x003d08ff
 80038b4:	431bde83 	.word	0x431bde83
 80038b8:	10624dd3 	.word	0x10624dd3

080038bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	817b      	strh	r3, [r7, #10]
 80038ce:	460b      	mov	r3, r1
 80038d0:	813b      	strh	r3, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038d6:	f7ff fb91 	bl	8002ffc <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	f040 80d9 	bne.w	8003a9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2319      	movs	r3, #25
 80038f0:	2201      	movs	r2, #1
 80038f2:	496d      	ldr	r1, [pc, #436]	; (8003aa8 <HAL_I2C_Mem_Write+0x1ec>)
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fc7f 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
 8003902:	e0cc      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Mem_Write+0x56>
 800390e:	2302      	movs	r3, #2
 8003910:	e0c5      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d007      	beq.n	8003938 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2221      	movs	r2, #33	; 0x21
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2240      	movs	r2, #64	; 0x40
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a4d      	ldr	r2, [pc, #308]	; (8003aac <HAL_I2C_Mem_Write+0x1f0>)
 8003978:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800397a:	88f8      	ldrh	r0, [r7, #6]
 800397c:	893a      	ldrh	r2, [r7, #8]
 800397e:	8979      	ldrh	r1, [r7, #10]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	4603      	mov	r3, r0
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fab6 	bl	8003efc <I2C_RequestMemoryWrite>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d052      	beq.n	8003a3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e081      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fd00 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d107      	bne.n	80039c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e06b      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d11b      	bne.n	8003a3c <HAL_I2C_Mem_Write+0x180>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d017      	beq.n	8003a3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1aa      	bne.n	800399a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fcec 	bl	8004426 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d107      	bne.n	8003a6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e016      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	00100002 	.word	0x00100002
 8003aac:	ffff0000 	.word	0xffff0000

08003ab0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	; 0x30
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	4608      	mov	r0, r1
 8003aba:	4611      	mov	r1, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	4603      	mov	r3, r0
 8003ac0:	817b      	strh	r3, [r7, #10]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	813b      	strh	r3, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aca:	f7ff fa97 	bl	8002ffc <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	f040 8208 	bne.w	8003eee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2319      	movs	r3, #25
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	497b      	ldr	r1, [pc, #492]	; (8003cd4 <HAL_I2C_Mem_Read+0x224>)
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fb85 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
 8003af6:	e1fb      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_I2C_Mem_Read+0x56>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e1f4      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x440>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d007      	beq.n	8003b2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2222      	movs	r2, #34	; 0x22
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2240      	movs	r2, #64	; 0x40
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a5b      	ldr	r2, [pc, #364]	; (8003cd8 <HAL_I2C_Mem_Read+0x228>)
 8003b6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b6e:	88f8      	ldrh	r0, [r7, #6]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	8979      	ldrh	r1, [r7, #10]
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fa52 	bl	8004028 <I2C_RequestMemoryRead>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e1b0      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d113      	bne.n	8003bbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b96:	2300      	movs	r3, #0
 8003b98:	623b      	str	r3, [r7, #32]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	623b      	str	r3, [r7, #32]
 8003baa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e184      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d11b      	bne.n	8003bfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	e164      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d11b      	bne.n	8003c3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	e144      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c54:	e138      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	f200 80f1 	bhi.w	8003e42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d123      	bne.n	8003cb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fc1b 	bl	80044a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e139      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cae:	e10b      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d14e      	bne.n	8003d56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4906      	ldr	r1, [pc, #24]	; (8003cdc <HAL_I2C_Mem_Read+0x22c>)
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fa98 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e10e      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x440>
 8003cd2:	bf00      	nop
 8003cd4:	00100002 	.word	0x00100002
 8003cd8:	ffff0000 	.word	0xffff0000
 8003cdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d54:	e0b8      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4966      	ldr	r1, [pc, #408]	; (8003ef8 <HAL_I2C_Mem_Read+0x448>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fa49 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0bf      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	2200      	movs	r2, #0
 8003dba:	494f      	ldr	r1, [pc, #316]	; (8003ef8 <HAL_I2C_Mem_Read+0x448>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fa1b 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e091      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e40:	e042      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fb2e 	bl	80044a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e04c      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d118      	bne.n	8003ec8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f47f aec2 	bne.w	8003c56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e000      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
  }
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3728      	adds	r7, #40	; 0x28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	00010004 	.word	0x00010004

08003efc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	4608      	mov	r0, r1
 8003f06:	4611      	mov	r1, r2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	817b      	strh	r3, [r7, #10]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	813b      	strh	r3, [r7, #8]
 8003f12:	4613      	mov	r3, r2
 8003f14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f960 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4c:	d103      	bne.n	8003f56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e05f      	b.n	800401a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f5a:	897b      	ldrh	r3, [r7, #10]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	6a3a      	ldr	r2, [r7, #32]
 8003f6e:	492d      	ldr	r1, [pc, #180]	; (8004024 <I2C_RequestMemoryWrite+0x128>)
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f998 	bl	80042a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e04c      	b.n	800401a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f98:	6a39      	ldr	r1, [r7, #32]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fa02 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d107      	bne.n	8003fbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e02b      	b.n	800401a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d105      	bne.n	8003fd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc8:	893b      	ldrh	r3, [r7, #8]
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	611a      	str	r2, [r3, #16]
 8003fd2:	e021      	b.n	8004018 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fd4:	893b      	ldrh	r3, [r7, #8]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe4:	6a39      	ldr	r1, [r7, #32]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f9dc 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00d      	beq.n	800400e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d107      	bne.n	800400a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004008:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e005      	b.n	800401a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800400e:	893b      	ldrh	r3, [r7, #8]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	00010002 	.word	0x00010002

08004028 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	461a      	mov	r2, r3
 8004036:	4603      	mov	r3, r0
 8004038:	817b      	strh	r3, [r7, #10]
 800403a:	460b      	mov	r3, r1
 800403c:	813b      	strh	r3, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004050:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004060:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	2200      	movs	r2, #0
 800406a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f8c2 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004088:	d103      	bne.n	8004092 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e0aa      	b.n	80041ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004096:	897b      	ldrh	r3, [r7, #10]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	6a3a      	ldr	r2, [r7, #32]
 80040aa:	4952      	ldr	r1, [pc, #328]	; (80041f4 <I2C_RequestMemoryRead+0x1cc>)
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f8fa 	bl	80042a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e097      	b.n	80041ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d4:	6a39      	ldr	r1, [r7, #32]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f964 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00d      	beq.n	80040fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d107      	bne.n	80040fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e076      	b.n	80041ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004104:	893b      	ldrh	r3, [r7, #8]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	611a      	str	r2, [r3, #16]
 800410e:	e021      	b.n	8004154 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004110:	893b      	ldrh	r3, [r7, #8]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	b29b      	uxth	r3, r3
 8004116:	b2da      	uxtb	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800411e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004120:	6a39      	ldr	r1, [r7, #32]
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f93e 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2b04      	cmp	r3, #4
 8004134:	d107      	bne.n	8004146 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004144:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e050      	b.n	80041ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800414a:	893b      	ldrh	r3, [r7, #8]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004156:	6a39      	ldr	r1, [r7, #32]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f923 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	2b04      	cmp	r3, #4
 800416a:	d107      	bne.n	800417c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e035      	b.n	80041ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2200      	movs	r2, #0
 8004198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f82b 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00d      	beq.n	80041c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b6:	d103      	bne.n	80041c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e013      	b.n	80041ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041c4:	897b      	ldrh	r3, [r7, #10]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	6a3a      	ldr	r2, [r7, #32]
 80041d8:	4906      	ldr	r1, [pc, #24]	; (80041f4 <I2C_RequestMemoryRead+0x1cc>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f863 	bl	80042a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	00010002 	.word	0x00010002

080041f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004208:	e025      	b.n	8004256 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d021      	beq.n	8004256 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004212:	f7fe fef3 	bl	8002ffc <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d302      	bcc.n	8004228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d116      	bne.n	8004256 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e023      	b.n	800429e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10d      	bne.n	800427c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	43da      	mvns	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	e00c      	b.n	8004296 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	43da      	mvns	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	429a      	cmp	r2, r3
 800429a:	d0b6      	beq.n	800420a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
 80042b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b4:	e051      	b.n	800435a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c4:	d123      	bne.n	800430e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f043 0204 	orr.w	r2, r3, #4
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e046      	b.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d021      	beq.n	800435a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004316:	f7fe fe71 	bl	8002ffc <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	d302      	bcc.n	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d116      	bne.n	800435a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f043 0220 	orr.w	r2, r3, #32
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e020      	b.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	d10c      	bne.n	800437e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	43da      	mvns	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4013      	ands	r3, r2
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	bf14      	ite	ne
 8004376:	2301      	movne	r3, #1
 8004378:	2300      	moveq	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	e00b      	b.n	8004396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	43da      	mvns	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4013      	ands	r3, r2
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d18d      	bne.n	80042b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b0:	e02d      	b.n	800440e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f8ce 	bl	8004554 <I2C_IsAcknowledgeFailed>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e02d      	b.n	800441e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d021      	beq.n	800440e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fe fe17 	bl	8002ffc <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d116      	bne.n	800440e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e007      	b.n	800441e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d1ca      	bne.n	80043b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004432:	e02d      	b.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f88d 	bl	8004554 <I2C_IsAcknowledgeFailed>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e02d      	b.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d021      	beq.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444c:	f7fe fdd6 	bl	8002ffc <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	429a      	cmp	r2, r3
 800445a:	d302      	bcc.n	8004462 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d116      	bne.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e007      	b.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b04      	cmp	r3, #4
 800449c:	d1ca      	bne.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b4:	e042      	b.n	800453c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b10      	cmp	r3, #16
 80044c2:	d119      	bne.n	80044f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0210 	mvn.w	r2, #16
 80044cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e029      	b.n	800454c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f8:	f7fe fd80 	bl	8002ffc <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	429a      	cmp	r2, r3
 8004506:	d302      	bcc.n	800450e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d116      	bne.n	800453c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e007      	b.n	800454c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b40      	cmp	r3, #64	; 0x40
 8004548:	d1b5      	bne.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456a:	d11b      	bne.n	80045a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004574:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f043 0204 	orr.w	r2, r3, #4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e267      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d075      	beq.n	80046be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045d2:	4b88      	ldr	r3, [pc, #544]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d00c      	beq.n	80045f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045de:	4b85      	ldr	r3, [pc, #532]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d112      	bne.n	8004610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ea:	4b82      	ldr	r3, [pc, #520]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f6:	d10b      	bne.n	8004610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	4b7e      	ldr	r3, [pc, #504]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d05b      	beq.n	80046bc <HAL_RCC_OscConfig+0x108>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d157      	bne.n	80046bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e242      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004618:	d106      	bne.n	8004628 <HAL_RCC_OscConfig+0x74>
 800461a:	4b76      	ldr	r3, [pc, #472]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a75      	ldr	r2, [pc, #468]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	e01d      	b.n	8004664 <HAL_RCC_OscConfig+0xb0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x98>
 8004632:	4b70      	ldr	r3, [pc, #448]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a6f      	ldr	r2, [pc, #444]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	4b6d      	ldr	r3, [pc, #436]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a6c      	ldr	r2, [pc, #432]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e00b      	b.n	8004664 <HAL_RCC_OscConfig+0xb0>
 800464c:	4b69      	ldr	r3, [pc, #420]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a68      	ldr	r2, [pc, #416]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	4b66      	ldr	r3, [pc, #408]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a65      	ldr	r2, [pc, #404]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 800465e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d013      	beq.n	8004694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fe fcc6 	bl	8002ffc <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004674:	f7fe fcc2 	bl	8002ffc <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	; 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e207      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004686:	4b5b      	ldr	r3, [pc, #364]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0xc0>
 8004692:	e014      	b.n	80046be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fe fcb2 	bl	8002ffc <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800469c:	f7fe fcae 	bl	8002ffc <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b64      	cmp	r3, #100	; 0x64
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e1f3      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ae:	4b51      	ldr	r3, [pc, #324]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0xe8>
 80046ba:	e000      	b.n	80046be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d063      	beq.n	8004792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ca:	4b4a      	ldr	r3, [pc, #296]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d6:	4b47      	ldr	r3, [pc, #284]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d11c      	bne.n	800471c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e2:	4b44      	ldr	r3, [pc, #272]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d116      	bne.n	800471c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ee:	4b41      	ldr	r3, [pc, #260]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_RCC_OscConfig+0x152>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d001      	beq.n	8004706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e1c7      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004706:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4937      	ldr	r1, [pc, #220]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471a:	e03a      	b.n	8004792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004724:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <HAL_RCC_OscConfig+0x244>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fe fc67 	bl	8002ffc <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004732:	f7fe fc63 	bl	8002ffc <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e1a8      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004744:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004750:	4b28      	ldr	r3, [pc, #160]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4925      	ldr	r1, [pc, #148]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004760:	4313      	orrs	r3, r2
 8004762:	600b      	str	r3, [r1, #0]
 8004764:	e015      	b.n	8004792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004766:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <HAL_RCC_OscConfig+0x244>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fe fc46 	bl	8002ffc <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004774:	f7fe fc42 	bl	8002ffc <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e187      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004786:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d036      	beq.n	800480c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d016      	beq.n	80047d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a6:	4b15      	ldr	r3, [pc, #84]	; (80047fc <HAL_RCC_OscConfig+0x248>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fe fc26 	bl	8002ffc <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047b4:	f7fe fc22 	bl	8002ffc <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e167      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_RCC_OscConfig+0x240>)
 80047c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x200>
 80047d2:	e01b      	b.n	800480c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_RCC_OscConfig+0x248>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047da:	f7fe fc0f 	bl	8002ffc <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e0:	e00e      	b.n	8004800 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e2:	f7fe fc0b 	bl	8002ffc <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d907      	bls.n	8004800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e150      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
 80047f4:	40023800 	.word	0x40023800
 80047f8:	42470000 	.word	0x42470000
 80047fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004800:	4b88      	ldr	r3, [pc, #544]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ea      	bne.n	80047e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8097 	beq.w	8004948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481e:	4b81      	ldr	r3, [pc, #516]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10f      	bne.n	800484a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	4b7d      	ldr	r3, [pc, #500]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	4a7c      	ldr	r2, [pc, #496]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004838:	6413      	str	r3, [r2, #64]	; 0x40
 800483a:	4b7a      	ldr	r3, [pc, #488]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	4b77      	ldr	r3, [pc, #476]	; (8004a28 <HAL_RCC_OscConfig+0x474>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d118      	bne.n	8004888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004856:	4b74      	ldr	r3, [pc, #464]	; (8004a28 <HAL_RCC_OscConfig+0x474>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a73      	ldr	r2, [pc, #460]	; (8004a28 <HAL_RCC_OscConfig+0x474>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004862:	f7fe fbcb 	bl	8002ffc <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486a:	f7fe fbc7 	bl	8002ffc <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e10c      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487c:	4b6a      	ldr	r3, [pc, #424]	; (8004a28 <HAL_RCC_OscConfig+0x474>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d106      	bne.n	800489e <HAL_RCC_OscConfig+0x2ea>
 8004890:	4b64      	ldr	r3, [pc, #400]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004894:	4a63      	ldr	r2, [pc, #396]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	6713      	str	r3, [r2, #112]	; 0x70
 800489c:	e01c      	b.n	80048d8 <HAL_RCC_OscConfig+0x324>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b05      	cmp	r3, #5
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x30c>
 80048a6:	4b5f      	ldr	r3, [pc, #380]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048aa:	4a5e      	ldr	r2, [pc, #376]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048ac:	f043 0304 	orr.w	r3, r3, #4
 80048b0:	6713      	str	r3, [r2, #112]	; 0x70
 80048b2:	4b5c      	ldr	r3, [pc, #368]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	4a5b      	ldr	r2, [pc, #364]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	6713      	str	r3, [r2, #112]	; 0x70
 80048be:	e00b      	b.n	80048d8 <HAL_RCC_OscConfig+0x324>
 80048c0:	4b58      	ldr	r3, [pc, #352]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c4:	4a57      	ldr	r2, [pc, #348]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	6713      	str	r3, [r2, #112]	; 0x70
 80048cc:	4b55      	ldr	r3, [pc, #340]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4a54      	ldr	r2, [pc, #336]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 80048d2:	f023 0304 	bic.w	r3, r3, #4
 80048d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d015      	beq.n	800490c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fe fb8c 	bl	8002ffc <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e8:	f7fe fb88 	bl	8002ffc <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e0cb      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fe:	4b49      	ldr	r3, [pc, #292]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0ee      	beq.n	80048e8 <HAL_RCC_OscConfig+0x334>
 800490a:	e014      	b.n	8004936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490c:	f7fe fb76 	bl	8002ffc <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004912:	e00a      	b.n	800492a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004914:	f7fe fb72 	bl	8002ffc <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e0b5      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800492a:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ee      	bne.n	8004914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d105      	bne.n	8004948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493c:	4b39      	ldr	r3, [pc, #228]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	4a38      	ldr	r2, [pc, #224]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004946:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80a1 	beq.w	8004a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004952:	4b34      	ldr	r3, [pc, #208]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b08      	cmp	r3, #8
 800495c:	d05c      	beq.n	8004a18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d141      	bne.n	80049ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004966:	4b31      	ldr	r3, [pc, #196]	; (8004a2c <HAL_RCC_OscConfig+0x478>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fe fb46 	bl	8002ffc <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004974:	f7fe fb42 	bl	8002ffc <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e087      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69da      	ldr	r2, [r3, #28]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	019b      	lsls	r3, r3, #6
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	3b01      	subs	r3, #1
 80049ac:	041b      	lsls	r3, r3, #16
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	061b      	lsls	r3, r3, #24
 80049b6:	491b      	ldr	r1, [pc, #108]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_RCC_OscConfig+0x478>)
 80049be:	2201      	movs	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c2:	f7fe fb1b 	bl	8002ffc <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ca:	f7fe fb17 	bl	8002ffc <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e05c      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x416>
 80049e8:	e054      	b.n	8004a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ea:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <HAL_RCC_OscConfig+0x478>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7fe fb04 	bl	8002ffc <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fe fb00 	bl	8002ffc <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e045      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x444>
 8004a16:	e03d      	b.n	8004a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e038      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a30:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <HAL_RCC_OscConfig+0x4ec>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d028      	beq.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d121      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d11a      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d111      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	085b      	lsrs	r3, r3, #1
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800

08004aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0cc      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b68      	ldr	r3, [pc, #416]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d90c      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b65      	ldr	r3, [pc, #404]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b63      	ldr	r3, [pc, #396]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0b8      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d020      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af8:	4b59      	ldr	r3, [pc, #356]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4a58      	ldr	r2, [pc, #352]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b10:	4b53      	ldr	r3, [pc, #332]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4a52      	ldr	r2, [pc, #328]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b1c:	4b50      	ldr	r3, [pc, #320]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	494d      	ldr	r1, [pc, #308]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d044      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b42:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d119      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e07f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d107      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b62:	4b3f      	ldr	r3, [pc, #252]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e06f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b72:	4b3b      	ldr	r3, [pc, #236]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e067      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b82:	4b37      	ldr	r3, [pc, #220]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f023 0203 	bic.w	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	4934      	ldr	r1, [pc, #208]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b94:	f7fe fa32 	bl	8002ffc <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f7fe fa2e 	bl	8002ffc <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e04f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb2:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 020c 	and.w	r2, r3, #12
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d1eb      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b25      	ldr	r3, [pc, #148]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d20c      	bcs.n	8004bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e032      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4916      	ldr	r1, [pc, #88]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	490e      	ldr	r1, [pc, #56]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c2a:	f000 f821 	bl	8004c70 <HAL_RCC_GetSysClockFreq>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	490a      	ldr	r1, [pc, #40]	; (8004c64 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3c:	5ccb      	ldrb	r3, [r1, r3]
 8004c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c42:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe f992 	bl	8002f74 <HAL_InitTick>

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40023c00 	.word	0x40023c00
 8004c60:	40023800 	.word	0x40023800
 8004c64:	0800a448 	.word	0x0800a448
 8004c68:	20000004 	.word	0x20000004
 8004c6c:	20000008 	.word	0x20000008

08004c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c74:	b094      	sub	sp, #80	; 0x50
 8004c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c80:	2300      	movs	r3, #0
 8004c82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c88:	4b79      	ldr	r3, [pc, #484]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 030c 	and.w	r3, r3, #12
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d00d      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	f200 80e1 	bhi.w	8004e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d003      	beq.n	8004caa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ca2:	e0db      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca4:	4b73      	ldr	r3, [pc, #460]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ca6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ca8:	e0db      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004caa:	4b73      	ldr	r3, [pc, #460]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cae:	e0d8      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cb0:	4b6f      	ldr	r3, [pc, #444]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cba:	4b6d      	ldr	r3, [pc, #436]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d063      	beq.n	8004d8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	099b      	lsrs	r3, r3, #6
 8004ccc:	2200      	movs	r2, #0
 8004cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004cda:	2300      	movs	r3, #0
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	f04f 0000 	mov.w	r0, #0
 8004cea:	f04f 0100 	mov.w	r1, #0
 8004cee:	0159      	lsls	r1, r3, #5
 8004cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf4:	0150      	lsls	r0, r2, #5
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	1a51      	subs	r1, r2, r1
 8004cfe:	6139      	str	r1, [r7, #16]
 8004d00:	4629      	mov	r1, r5
 8004d02:	eb63 0301 	sbc.w	r3, r3, r1
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d14:	4659      	mov	r1, fp
 8004d16:	018b      	lsls	r3, r1, #6
 8004d18:	4651      	mov	r1, sl
 8004d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d1e:	4651      	mov	r1, sl
 8004d20:	018a      	lsls	r2, r1, #6
 8004d22:	4651      	mov	r1, sl
 8004d24:	ebb2 0801 	subs.w	r8, r2, r1
 8004d28:	4659      	mov	r1, fp
 8004d2a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d42:	4690      	mov	r8, r2
 8004d44:	4699      	mov	r9, r3
 8004d46:	4623      	mov	r3, r4
 8004d48:	eb18 0303 	adds.w	r3, r8, r3
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	462b      	mov	r3, r5
 8004d50:	eb49 0303 	adc.w	r3, r9, r3
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d62:	4629      	mov	r1, r5
 8004d64:	024b      	lsls	r3, r1, #9
 8004d66:	4621      	mov	r1, r4
 8004d68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	024a      	lsls	r2, r1, #9
 8004d70:	4610      	mov	r0, r2
 8004d72:	4619      	mov	r1, r3
 8004d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d76:	2200      	movs	r2, #0
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d80:	f7fb ff26 	bl	8000bd0 <__aeabi_uldivmod>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4613      	mov	r3, r2
 8004d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d8c:	e058      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d8e:	4b38      	ldr	r3, [pc, #224]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	099b      	lsrs	r3, r3, #6
 8004d94:	2200      	movs	r2, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	4611      	mov	r1, r2
 8004d9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d9e:	623b      	str	r3, [r7, #32]
 8004da0:	2300      	movs	r3, #0
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
 8004da4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004da8:	4642      	mov	r2, r8
 8004daa:	464b      	mov	r3, r9
 8004dac:	f04f 0000 	mov.w	r0, #0
 8004db0:	f04f 0100 	mov.w	r1, #0
 8004db4:	0159      	lsls	r1, r3, #5
 8004db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dba:	0150      	lsls	r0, r2, #5
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ddc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004de0:	ebb2 040a 	subs.w	r4, r2, sl
 8004de4:	eb63 050b 	sbc.w	r5, r3, fp
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	00eb      	lsls	r3, r5, #3
 8004df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df6:	00e2      	lsls	r2, r4, #3
 8004df8:	4614      	mov	r4, r2
 8004dfa:	461d      	mov	r5, r3
 8004dfc:	4643      	mov	r3, r8
 8004dfe:	18e3      	adds	r3, r4, r3
 8004e00:	603b      	str	r3, [r7, #0]
 8004e02:	464b      	mov	r3, r9
 8004e04:	eb45 0303 	adc.w	r3, r5, r3
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e16:	4629      	mov	r1, r5
 8004e18:	028b      	lsls	r3, r1, #10
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e20:	4621      	mov	r1, r4
 8004e22:	028a      	lsls	r2, r1, #10
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	61fa      	str	r2, [r7, #28]
 8004e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e34:	f7fb fecc 	bl	8000bd0 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e5a:	e002      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3750      	adds	r7, #80	; 0x50
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	00f42400 	.word	0x00f42400
 8004e78:	007a1200 	.word	0x007a1200

08004e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e80:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000004 	.word	0x20000004

08004e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e98:	f7ff fff0 	bl	8004e7c <HAL_RCC_GetHCLKFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	0a9b      	lsrs	r3, r3, #10
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	4903      	ldr	r1, [pc, #12]	; (8004eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	0800a458 	.word	0x0800a458

08004ebc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d105      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d035      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ee4:	4b62      	ldr	r3, [pc, #392]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eea:	f7fe f887 	bl	8002ffc <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ef2:	f7fe f883 	bl	8002ffc <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e0b0      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f04:	4b5b      	ldr	r3, [pc, #364]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f0      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	019a      	lsls	r2, r3, #6
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	071b      	lsls	r3, r3, #28
 8004f1c:	4955      	ldr	r1, [pc, #340]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f24:	4b52      	ldr	r3, [pc, #328]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f2a:	f7fe f867 	bl	8002ffc <HAL_GetTick>
 8004f2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f32:	f7fe f863 	bl	8002ffc <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e090      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f44:	4b4b      	ldr	r3, [pc, #300]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8083 	beq.w	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	4b44      	ldr	r3, [pc, #272]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	4a43      	ldr	r2, [pc, #268]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6e:	4b41      	ldr	r3, [pc, #260]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f7a:	4b3f      	ldr	r3, [pc, #252]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a3e      	ldr	r2, [pc, #248]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f84:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f86:	f7fe f839 	bl	8002ffc <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f8e:	f7fe f835 	bl	8002ffc <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e062      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fa0:	4b35      	ldr	r3, [pc, #212]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fac:	4b31      	ldr	r3, [pc, #196]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d02f      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d028      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fca:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fd4:	4b29      	ldr	r3, [pc, #164]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fda:	4b28      	ldr	r3, [pc, #160]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fe0:	4a24      	ldr	r2, [pc, #144]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fe6:	4b23      	ldr	r3, [pc, #140]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d114      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ff2:	f7fe f803 	bl	8002ffc <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff8:	e00a      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ffa:	f7fd ffff 	bl	8002ffc <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	f241 3288 	movw	r2, #5000	; 0x1388
 8005008:	4293      	cmp	r3, r2
 800500a:	d901      	bls.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e02a      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005010:	4b18      	ldr	r3, [pc, #96]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0ee      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005028:	d10d      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800502a:	4b12      	ldr	r3, [pc, #72]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800503a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503e:	490d      	ldr	r1, [pc, #52]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005040:	4313      	orrs	r3, r2
 8005042:	608b      	str	r3, [r1, #8]
 8005044:	e005      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005046:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800504c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005050:	6093      	str	r3, [r2, #8]
 8005052:	4b08      	ldr	r3, [pc, #32]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005054:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800505e:	4905      	ldr	r1, [pc, #20]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005060:	4313      	orrs	r3, r2
 8005062:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	42470068 	.word	0x42470068
 8005074:	40023800 	.word	0x40023800
 8005078:	40007000 	.word	0x40007000
 800507c:	42470e40 	.word	0x42470e40

08005080 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e066      	b.n	8005164 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	7f5b      	ldrb	r3, [r3, #29]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d105      	bne.n	80050ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fd fe0e 	bl	8002cc8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	22ca      	movs	r2, #202	; 0xca
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2253      	movs	r2, #83	; 0x53
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa45 	bl	8005552 <RTC_EnterInitMode>
 80050c8:	4603      	mov	r3, r0
 80050ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d12c      	bne.n	800512c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6899      	ldr	r1, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68d2      	ldr	r2, [r2, #12]
 800510c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6919      	ldr	r1, [r3, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	041a      	lsls	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fa4c 	bl	80055c0 <RTC_ExitInitMode>
 8005128:	4603      	mov	r3, r0
 800512a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d113      	bne.n	800515a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	22ff      	movs	r2, #255	; 0xff
 8005160:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	7f1b      	ldrb	r3, [r3, #28]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_RTC_SetTime+0x1c>
 8005184:	2302      	movs	r3, #2
 8005186:	e087      	b.n	8005298 <HAL_RTC_SetTime+0x12c>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2202      	movs	r2, #2
 8005192:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d126      	bne.n	80051e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d102      	bne.n	80051ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2200      	movs	r2, #0
 80051ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fa29 	bl	800560a <RTC_ByteToBcd2>
 80051b8:	4603      	mov	r3, r0
 80051ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fa22 	bl	800560a <RTC_ByteToBcd2>
 80051c6:	4603      	mov	r3, r0
 80051c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	789b      	ldrb	r3, [r3, #2]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fa1a 	bl	800560a <RTC_ByteToBcd2>
 80051d6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	78db      	ldrb	r3, [r3, #3]
 80051e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e018      	b.n	800521a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2200      	movs	r2, #0
 80051fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	785b      	ldrb	r3, [r3, #1]
 8005206:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005208:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800520e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	78db      	ldrb	r3, [r3, #3]
 8005214:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	22ca      	movs	r2, #202	; 0xca
 8005220:	625a      	str	r2, [r3, #36]	; 0x24
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2253      	movs	r2, #83	; 0x53
 8005228:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f991 	bl	8005552 <RTC_EnterInitMode>
 8005230:	4603      	mov	r3, r0
 8005232:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005234:	7cfb      	ldrb	r3, [r7, #19]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d120      	bne.n	800527c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005244:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005248:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005258:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6899      	ldr	r1, [r3, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	431a      	orrs	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f9a4 	bl	80055c0 <RTC_ExitInitMode>
 8005278:	4603      	mov	r3, r0
 800527a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800527c:	7cfb      	ldrb	r3, [r7, #19]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d102      	bne.n	8005288 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	22ff      	movs	r2, #255	; 0xff
 800528e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	771a      	strb	r2, [r3, #28]

  return status;
 8005296:	7cfb      	ldrb	r3, [r7, #19]
}
 8005298:	4618      	mov	r0, r3
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd90      	pop	{r4, r7, pc}

080052a0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80052d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80052d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	0c1b      	lsrs	r3, r3, #16
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	0d9b      	lsrs	r3, r3, #22
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	b2da      	uxtb	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d11a      	bne.n	8005352 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f000 f98f 	bl	8005644 <RTC_Bcd2ToByte>
 8005326:	4603      	mov	r3, r0
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	785b      	ldrb	r3, [r3, #1]
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f986 	bl	8005644 <RTC_Bcd2ToByte>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	789b      	ldrb	r3, [r3, #2]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 f97d 	bl	8005644 <RTC_Bcd2ToByte>
 800534a:	4603      	mov	r3, r0
 800534c:	461a      	mov	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800535c:	b590      	push	{r4, r7, lr}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	7f1b      	ldrb	r3, [r3, #28]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_RTC_SetDate+0x1c>
 8005374:	2302      	movs	r3, #2
 8005376:	e071      	b.n	800545c <HAL_RTC_SetDate+0x100>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2202      	movs	r2, #2
 8005382:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10e      	bne.n	80053a8 <HAL_RTC_SetDate+0x4c>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	f023 0310 	bic.w	r3, r3, #16
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	330a      	adds	r3, #10
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d11c      	bne.n	80053e8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	78db      	ldrb	r3, [r3, #3]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f929 	bl	800560a <RTC_ByteToBcd2>
 80053b8:	4603      	mov	r3, r0
 80053ba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	785b      	ldrb	r3, [r3, #1]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f922 	bl	800560a <RTC_ByteToBcd2>
 80053c6:	4603      	mov	r3, r0
 80053c8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053ca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	789b      	ldrb	r3, [r3, #2]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f91a 	bl	800560a <RTC_ByteToBcd2>
 80053d6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80053d8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e00e      	b.n	8005406 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	78db      	ldrb	r3, [r3, #3]
 80053ec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80053f4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80053fa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	22ca      	movs	r2, #202	; 0xca
 800540c:	625a      	str	r2, [r3, #36]	; 0x24
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2253      	movs	r2, #83	; 0x53
 8005414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f89b 	bl	8005552 <RTC_EnterInitMode>
 800541c:	4603      	mov	r3, r0
 800541e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10c      	bne.n	8005440 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005430:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005434:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f8c2 	bl	80055c0 <RTC_ExitInitMode>
 800543c:	4603      	mov	r3, r0
 800543e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	22ff      	movs	r2, #255	; 0xff
 8005452:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	771a      	strb	r2, [r3, #28]

  return status;
 800545a:	7cfb      	ldrb	r3, [r7, #19]
}
 800545c:	4618      	mov	r0, r3
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd90      	pop	{r4, r7, pc}

08005464 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800547e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005482:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	0c1b      	lsrs	r3, r3, #16
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	0a1b      	lsrs	r3, r3, #8
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	b2da      	uxtb	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	0b5b      	lsrs	r3, r3, #13
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d11a      	bne.n	80054f8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	78db      	ldrb	r3, [r3, #3]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f8bc 	bl	8005644 <RTC_Bcd2ToByte>
 80054cc:	4603      	mov	r3, r0
 80054ce:	461a      	mov	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	785b      	ldrb	r3, [r3, #1]
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f8b3 	bl	8005644 <RTC_Bcd2ToByte>
 80054de:	4603      	mov	r3, r0
 80054e0:	461a      	mov	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	789b      	ldrb	r3, [r3, #2]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 f8aa 	bl	8005644 <RTC_Bcd2ToByte>
 80054f0:	4603      	mov	r3, r0
 80054f2:	461a      	mov	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800551c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800551e:	f7fd fd6d 	bl	8002ffc <HAL_GetTick>
 8005522:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005524:	e009      	b.n	800553a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005526:	f7fd fd69 	bl	8002ffc <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005534:	d901      	bls.n	800553a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e007      	b.n	800554a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0ee      	beq.n	8005526 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d122      	bne.n	80055b6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800557e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005580:	f7fd fd3c 	bl	8002ffc <HAL_GetTick>
 8005584:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005586:	e00c      	b.n	80055a2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005588:	f7fd fd38 	bl	8002ffc <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005596:	d904      	bls.n	80055a2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2204      	movs	r2, #4
 800559c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <RTC_EnterInitMode+0x64>
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d1e8      	bne.n	8005588 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055da:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff ff89 	bl	8005502 <HAL_RTC_WaitForSynchro>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2204      	movs	r2, #4
 80055fa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	4603      	mov	r3, r0
 8005612:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005618:	e005      	b.n	8005626 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	3301      	adds	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	3b0a      	subs	r3, #10
 8005624:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	2b09      	cmp	r3, #9
 800562a:	d8f6      	bhi.n	800561a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	b2da      	uxtb	r2, r3
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	4313      	orrs	r3, r2
 8005636:	b2db      	uxtb	r3, r3
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	b2db      	uxtb	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	0092      	lsls	r2, r2, #2
 800565c:	4413      	add	r3, r2
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	b2da      	uxtb	r2, r3
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	4413      	add	r3, r2
 800566e:	b2db      	uxtb	r3, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e07b      	b.n	8005786 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	2b00      	cmp	r3, #0
 8005694:	d108      	bne.n	80056a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800569e:	d009      	beq.n	80056b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	61da      	str	r2, [r3, #28]
 80056a6:	e005      	b.n	80056b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fd fb24 	bl	8002d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005738:	ea42 0103 	orr.w	r1, r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	f003 0104 	and.w	r1, r3, #4
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	f003 0210 	and.w	r2, r3, #16
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005774:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b088      	sub	sp, #32
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	603b      	str	r3, [r7, #0]
 800579a:	4613      	mov	r3, r2
 800579c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_SPI_Transmit+0x22>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e126      	b.n	80059fe <HAL_SPI_Transmit+0x270>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057b8:	f7fd fc20 	bl	8002ffc <HAL_GetTick>
 80057bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d002      	beq.n	80057d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
 80057d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057d2:	e10b      	b.n	80059ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_SPI_Transmit+0x52>
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057e4:	e102      	b.n	80059ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2203      	movs	r2, #3
 80057ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	88fa      	ldrh	r2, [r7, #6]
 80057fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582c:	d10f      	bne.n	800584e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800584c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b40      	cmp	r3, #64	; 0x40
 800585a:	d007      	beq.n	800586c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800586a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005874:	d14b      	bne.n	800590e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <HAL_SPI_Transmit+0xf6>
 800587e:	8afb      	ldrh	r3, [r7, #22]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d13e      	bne.n	8005902 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	881a      	ldrh	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	1c9a      	adds	r2, r3, #2
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058a8:	e02b      	b.n	8005902 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d112      	bne.n	80058de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	881a      	ldrh	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	1c9a      	adds	r2, r3, #2
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	86da      	strh	r2, [r3, #54]	; 0x36
 80058dc:	e011      	b.n	8005902 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058de:	f7fd fb8d 	bl	8002ffc <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d803      	bhi.n	80058f6 <HAL_SPI_Transmit+0x168>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d102      	bne.n	80058fc <HAL_SPI_Transmit+0x16e>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d102      	bne.n	8005902 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005900:	e074      	b.n	80059ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1ce      	bne.n	80058aa <HAL_SPI_Transmit+0x11c>
 800590c:	e04c      	b.n	80059a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_SPI_Transmit+0x18e>
 8005916:	8afb      	ldrh	r3, [r7, #22]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d140      	bne.n	800599e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	7812      	ldrb	r2, [r2, #0]
 8005928:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005942:	e02c      	b.n	800599e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b02      	cmp	r3, #2
 8005950:	d113      	bne.n	800597a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	330c      	adds	r3, #12
 800595c:	7812      	ldrb	r2, [r2, #0]
 800595e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	86da      	strh	r2, [r3, #54]	; 0x36
 8005978:	e011      	b.n	800599e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800597a:	f7fd fb3f 	bl	8002ffc <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d803      	bhi.n	8005992 <HAL_SPI_Transmit+0x204>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005990:	d102      	bne.n	8005998 <HAL_SPI_Transmit+0x20a>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800599c:	e026      	b.n	80059ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1cd      	bne.n	8005944 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fbcb 	bl	8006148 <SPI_EndRxTxTransaction>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	77fb      	strb	r3, [r7, #31]
 80059e8:	e000      	b.n	80059ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80059ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b088      	sub	sp, #32
 8005a0a:	af02      	add	r7, sp, #8
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a22:	d112      	bne.n	8005a4a <HAL_SPI_Receive+0x44>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10e      	bne.n	8005a4a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a34:	88fa      	ldrh	r2, [r7, #6]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f8f1 	bl	8005c28 <HAL_SPI_TransmitReceive>
 8005a46:	4603      	mov	r3, r0
 8005a48:	e0ea      	b.n	8005c20 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_SPI_Receive+0x52>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e0e3      	b.n	8005c20 <HAL_SPI_Receive+0x21a>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a60:	f7fd facc 	bl	8002ffc <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
 8005a74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a76:	e0ca      	b.n	8005c0e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_SPI_Receive+0x7e>
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a88:	e0c1      	b.n	8005c0e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad0:	d10f      	bne.n	8005af2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005af0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d007      	beq.n	8005b10 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d162      	bne.n	8005bde <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b18:	e02e      	b.n	8005b78 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d115      	bne.n	8005b54 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f103 020c 	add.w	r2, r3, #12
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	7812      	ldrb	r2, [r2, #0]
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b52:	e011      	b.n	8005b78 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b54:	f7fd fa52 	bl	8002ffc <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d803      	bhi.n	8005b6c <HAL_SPI_Receive+0x166>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6a:	d102      	bne.n	8005b72 <HAL_SPI_Receive+0x16c>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d102      	bne.n	8005b78 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b76:	e04a      	b.n	8005c0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1cb      	bne.n	8005b1a <HAL_SPI_Receive+0x114>
 8005b82:	e031      	b.n	8005be8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d113      	bne.n	8005bba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	b292      	uxth	r2, r2
 8005b9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	1c9a      	adds	r2, r3, #2
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bb8:	e011      	b.n	8005bde <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bba:	f7fd fa1f 	bl	8002ffc <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d803      	bhi.n	8005bd2 <HAL_SPI_Receive+0x1cc>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d102      	bne.n	8005bd8 <HAL_SPI_Receive+0x1d2>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bdc:	e017      	b.n	8005c0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1cd      	bne.n	8005b84 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fa45 	bl	800607c <SPI_EndRxTransaction>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
 8005c0a:	e000      	b.n	8005c0e <HAL_SPI_Receive+0x208>
  }

error :
 8005c0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08c      	sub	sp, #48	; 0x30
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c36:	2301      	movs	r3, #1
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d101      	bne.n	8005c4e <HAL_SPI_TransmitReceive+0x26>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	e18a      	b.n	8005f64 <HAL_SPI_TransmitReceive+0x33c>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c56:	f7fd f9d1 	bl	8002ffc <HAL_GetTick>
 8005c5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c6c:	887b      	ldrh	r3, [r7, #2]
 8005c6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d00f      	beq.n	8005c98 <HAL_SPI_TransmitReceive+0x70>
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c7e:	d107      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d103      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x68>
 8005c88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d003      	beq.n	8005c98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c96:	e15b      	b.n	8005f50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_SPI_TransmitReceive+0x82>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <HAL_SPI_TransmitReceive+0x82>
 8005ca4:	887b      	ldrh	r3, [r7, #2]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005cb0:	e14e      	b.n	8005f50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d003      	beq.n	8005cc6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2205      	movs	r2, #5
 8005cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	887a      	ldrh	r2, [r7, #2]
 8005cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	887a      	ldrh	r2, [r7, #2]
 8005cdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	887a      	ldrh	r2, [r7, #2]
 8005ce8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	887a      	ldrh	r2, [r7, #2]
 8005cee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b40      	cmp	r3, #64	; 0x40
 8005d08:	d007      	beq.n	8005d1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d22:	d178      	bne.n	8005e16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <HAL_SPI_TransmitReceive+0x10a>
 8005d2c:	8b7b      	ldrh	r3, [r7, #26]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d166      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	881a      	ldrh	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	1c9a      	adds	r2, r3, #2
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d56:	e053      	b.n	8005e00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d11b      	bne.n	8005d9e <HAL_SPI_TransmitReceive+0x176>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d016      	beq.n	8005d9e <HAL_SPI_TransmitReceive+0x176>
 8005d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d113      	bne.n	8005d9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	881a      	ldrh	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	1c9a      	adds	r2, r3, #2
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d119      	bne.n	8005de0 <HAL_SPI_TransmitReceive+0x1b8>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d014      	beq.n	8005de0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	b292      	uxth	r2, r2
 8005dc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	1c9a      	adds	r2, r3, #2
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005de0:	f7fd f90c 	bl	8002ffc <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d807      	bhi.n	8005e00 <HAL_SPI_TransmitReceive+0x1d8>
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d003      	beq.n	8005e00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005dfe:	e0a7      	b.n	8005f50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1a6      	bne.n	8005d58 <HAL_SPI_TransmitReceive+0x130>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1a1      	bne.n	8005d58 <HAL_SPI_TransmitReceive+0x130>
 8005e14:	e07c      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_SPI_TransmitReceive+0x1fc>
 8005e1e:	8b7b      	ldrh	r3, [r7, #26]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d16b      	bne.n	8005efc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	7812      	ldrb	r2, [r2, #0]
 8005e30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e4a:	e057      	b.n	8005efc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d11c      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x26c>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d017      	beq.n	8005e94 <HAL_SPI_TransmitReceive+0x26c>
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d114      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	330c      	adds	r3, #12
 8005e74:	7812      	ldrb	r2, [r2, #0]
 8005e76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d119      	bne.n	8005ed6 <HAL_SPI_TransmitReceive+0x2ae>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d014      	beq.n	8005ed6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ed6:	f7fd f891 	bl	8002ffc <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d803      	bhi.n	8005eee <HAL_SPI_TransmitReceive+0x2c6>
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d102      	bne.n	8005ef4 <HAL_SPI_TransmitReceive+0x2cc>
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d103      	bne.n	8005efc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005efa:	e029      	b.n	8005f50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1a2      	bne.n	8005e4c <HAL_SPI_TransmitReceive+0x224>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d19d      	bne.n	8005e4c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f917 	bl	8006148 <SPI_EndRxTxTransaction>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d006      	beq.n	8005f2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005f2c:	e010      	b.n	8005f50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	e000      	b.n	8005f50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3730      	adds	r7, #48	; 0x30
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f7c:	f7fd f83e 	bl	8002ffc <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4413      	add	r3, r2
 8005f8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f8c:	f7fd f836 	bl	8002ffc <HAL_GetTick>
 8005f90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f92:	4b39      	ldr	r3, [pc, #228]	; (8006078 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	015b      	lsls	r3, r3, #5
 8005f98:	0d1b      	lsrs	r3, r3, #20
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	fb02 f303 	mul.w	r3, r2, r3
 8005fa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fa2:	e054      	b.n	800604e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005faa:	d050      	beq.n	800604e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fac:	f7fd f826 	bl	8002ffc <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d902      	bls.n	8005fc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d13d      	bne.n	800603e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fda:	d111      	bne.n	8006000 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe4:	d004      	beq.n	8005ff0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fee:	d107      	bne.n	8006000 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ffe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006008:	d10f      	bne.n	800602a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006028:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e017      	b.n	800606e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	3b01      	subs	r3, #1
 800604c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4013      	ands	r3, r2
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	429a      	cmp	r2, r3
 800605c:	bf0c      	ite	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	2300      	movne	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	461a      	mov	r2, r3
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	429a      	cmp	r2, r3
 800606a:	d19b      	bne.n	8005fa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3720      	adds	r7, #32
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000004 	.word	0x20000004

0800607c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006090:	d111      	bne.n	80060b6 <SPI_EndRxTransaction+0x3a>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609a:	d004      	beq.n	80060a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a4:	d107      	bne.n	80060b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060be:	d12a      	bne.n	8006116 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c8:	d012      	beq.n	80060f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	2180      	movs	r1, #128	; 0x80
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f7ff ff49 	bl	8005f6c <SPI_WaitFlagStateUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d02d      	beq.n	800613c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e026      	b.n	800613e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2200      	movs	r2, #0
 80060f8:	2101      	movs	r1, #1
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f7ff ff36 	bl	8005f6c <SPI_WaitFlagStateUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01a      	beq.n	800613c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	f043 0220 	orr.w	r2, r3, #32
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e013      	b.n	800613e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2200      	movs	r2, #0
 800611e:	2101      	movs	r1, #1
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff ff23 	bl	8005f6c <SPI_WaitFlagStateUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	f043 0220 	orr.w	r2, r3, #32
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e000      	b.n	800613e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006154:	4b1b      	ldr	r3, [pc, #108]	; (80061c4 <SPI_EndRxTxTransaction+0x7c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1b      	ldr	r2, [pc, #108]	; (80061c8 <SPI_EndRxTxTransaction+0x80>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	0d5b      	lsrs	r3, r3, #21
 8006160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006164:	fb02 f303 	mul.w	r3, r2, r3
 8006168:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006172:	d112      	bne.n	800619a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2200      	movs	r2, #0
 800617c:	2180      	movs	r1, #128	; 0x80
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff fef4 	bl	8005f6c <SPI_WaitFlagStateUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d016      	beq.n	80061b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618e:	f043 0220 	orr.w	r2, r3, #32
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e00f      	b.n	80061ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b0:	2b80      	cmp	r3, #128	; 0x80
 80061b2:	d0f2      	beq.n	800619a <SPI_EndRxTxTransaction+0x52>
 80061b4:	e000      	b.n	80061b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80061b6:	bf00      	nop
  }

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000004 	.word	0x20000004
 80061c8:	165e9f81 	.word	0x165e9f81

080061cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e041      	b.n	8006262 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fc fe10 	bl	8002e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3304      	adds	r3, #4
 8006208:	4619      	mov	r1, r3
 800620a:	4610      	mov	r0, r2
 800620c:	f000 faa0 	bl	8006750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	d001      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e04e      	b.n	8006322 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a23      	ldr	r2, [pc, #140]	; (8006330 <HAL_TIM_Base_Start_IT+0xc4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d022      	beq.n	80062ec <HAL_TIM_Base_Start_IT+0x80>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ae:	d01d      	beq.n	80062ec <HAL_TIM_Base_Start_IT+0x80>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1f      	ldr	r2, [pc, #124]	; (8006334 <HAL_TIM_Base_Start_IT+0xc8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d018      	beq.n	80062ec <HAL_TIM_Base_Start_IT+0x80>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1e      	ldr	r2, [pc, #120]	; (8006338 <HAL_TIM_Base_Start_IT+0xcc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d013      	beq.n	80062ec <HAL_TIM_Base_Start_IT+0x80>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1c      	ldr	r2, [pc, #112]	; (800633c <HAL_TIM_Base_Start_IT+0xd0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00e      	beq.n	80062ec <HAL_TIM_Base_Start_IT+0x80>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1b      	ldr	r2, [pc, #108]	; (8006340 <HAL_TIM_Base_Start_IT+0xd4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_TIM_Base_Start_IT+0x80>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a19      	ldr	r2, [pc, #100]	; (8006344 <HAL_TIM_Base_Start_IT+0xd8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_TIM_Base_Start_IT+0x80>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a18      	ldr	r2, [pc, #96]	; (8006348 <HAL_TIM_Base_Start_IT+0xdc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d111      	bne.n	8006310 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b06      	cmp	r3, #6
 80062fc:	d010      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630e:	e007      	b.n	8006320 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40010000 	.word	0x40010000
 8006334:	40000400 	.word	0x40000400
 8006338:	40000800 	.word	0x40000800
 800633c:	40000c00 	.word	0x40000c00
 8006340:	40010400 	.word	0x40010400
 8006344:	40014000 	.word	0x40014000
 8006348:	40001800 	.word	0x40001800

0800634c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b02      	cmp	r3, #2
 8006360:	d122      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b02      	cmp	r3, #2
 800636e:	d11b      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0202 	mvn.w	r2, #2
 8006378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9bf 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 8006394:	e005      	b.n	80063a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f9b1 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f9c2 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d122      	bne.n	80063fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d11b      	bne.n	80063fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0204 	mvn.w	r2, #4
 80063cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f995 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f987 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f998 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	2b08      	cmp	r3, #8
 8006408:	d122      	bne.n	8006450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b08      	cmp	r3, #8
 8006416:	d11b      	bne.n	8006450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0208 	mvn.w	r2, #8
 8006420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2204      	movs	r2, #4
 8006426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f96b 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f95d 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f96e 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b10      	cmp	r3, #16
 800645c:	d122      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b10      	cmp	r3, #16
 800646a:	d11b      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0210 	mvn.w	r2, #16
 8006474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2208      	movs	r2, #8
 800647a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f941 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 8006490:	e005      	b.n	800649e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f933 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f944 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d10e      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d107      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0201 	mvn.w	r2, #1
 80064c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f90d 	bl	80066ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d10e      	bne.n	80064fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d107      	bne.n	80064fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 faea 	bl	8006ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006506:	2b40      	cmp	r3, #64	; 0x40
 8006508:	d10e      	bne.n	8006528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d107      	bne.n	8006528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f909 	bl	800673a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b20      	cmp	r3, #32
 8006534:	d10e      	bne.n	8006554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b20      	cmp	r3, #32
 8006542:	d107      	bne.n	8006554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0220 	mvn.w	r2, #32
 800654c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fab4 	bl	8006abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIM_ConfigClockSource+0x1c>
 8006574:	2302      	movs	r3, #2
 8006576:	e0b4      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x186>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800659e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b0:	d03e      	beq.n	8006630 <HAL_TIM_ConfigClockSource+0xd4>
 80065b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b6:	f200 8087 	bhi.w	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065be:	f000 8086 	beq.w	80066ce <HAL_TIM_ConfigClockSource+0x172>
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c6:	d87f      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065c8:	2b70      	cmp	r3, #112	; 0x70
 80065ca:	d01a      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0xa6>
 80065cc:	2b70      	cmp	r3, #112	; 0x70
 80065ce:	d87b      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d0:	2b60      	cmp	r3, #96	; 0x60
 80065d2:	d050      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x11a>
 80065d4:	2b60      	cmp	r3, #96	; 0x60
 80065d6:	d877      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d8:	2b50      	cmp	r3, #80	; 0x50
 80065da:	d03c      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0xfa>
 80065dc:	2b50      	cmp	r3, #80	; 0x50
 80065de:	d873      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d058      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x13a>
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d86f      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e8:	2b30      	cmp	r3, #48	; 0x30
 80065ea:	d064      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0x15a>
 80065ec:	2b30      	cmp	r3, #48	; 0x30
 80065ee:	d86b      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d060      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0x15a>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d867      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d05c      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0x15a>
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d05a      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0x15a>
 8006600:	e062      	b.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6899      	ldr	r1, [r3, #8]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f000 f9b7 	bl	8006984 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	609a      	str	r2, [r3, #8]
      break;
 800662e:	e04f      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	6899      	ldr	r1, [r3, #8]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f000 f9a0 	bl	8006984 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006652:	609a      	str	r2, [r3, #8]
      break;
 8006654:	e03c      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6859      	ldr	r1, [r3, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	461a      	mov	r2, r3
 8006664:	f000 f914 	bl	8006890 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2150      	movs	r1, #80	; 0x50
 800666e:	4618      	mov	r0, r3
 8006670:	f000 f96d 	bl	800694e <TIM_ITRx_SetConfig>
      break;
 8006674:	e02c      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	6859      	ldr	r1, [r3, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	461a      	mov	r2, r3
 8006684:	f000 f933 	bl	80068ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2160      	movs	r1, #96	; 0x60
 800668e:	4618      	mov	r0, r3
 8006690:	f000 f95d 	bl	800694e <TIM_ITRx_SetConfig>
      break;
 8006694:	e01c      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	6859      	ldr	r1, [r3, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f000 f8f4 	bl	8006890 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2140      	movs	r1, #64	; 0x40
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f94d 	bl	800694e <TIM_ITRx_SetConfig>
      break;
 80066b4:	e00c      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f000 f944 	bl	800694e <TIM_ITRx_SetConfig>
      break;
 80066c6:	e003      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	73fb      	strb	r3, [r7, #15]
      break;
 80066cc:	e000      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a40      	ldr	r2, [pc, #256]	; (8006864 <TIM_Base_SetConfig+0x114>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d013      	beq.n	8006790 <TIM_Base_SetConfig+0x40>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676e:	d00f      	beq.n	8006790 <TIM_Base_SetConfig+0x40>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a3d      	ldr	r2, [pc, #244]	; (8006868 <TIM_Base_SetConfig+0x118>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00b      	beq.n	8006790 <TIM_Base_SetConfig+0x40>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a3c      	ldr	r2, [pc, #240]	; (800686c <TIM_Base_SetConfig+0x11c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d007      	beq.n	8006790 <TIM_Base_SetConfig+0x40>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a3b      	ldr	r2, [pc, #236]	; (8006870 <TIM_Base_SetConfig+0x120>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d003      	beq.n	8006790 <TIM_Base_SetConfig+0x40>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a3a      	ldr	r2, [pc, #232]	; (8006874 <TIM_Base_SetConfig+0x124>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d108      	bne.n	80067a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a2f      	ldr	r2, [pc, #188]	; (8006864 <TIM_Base_SetConfig+0x114>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d02b      	beq.n	8006802 <TIM_Base_SetConfig+0xb2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b0:	d027      	beq.n	8006802 <TIM_Base_SetConfig+0xb2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a2c      	ldr	r2, [pc, #176]	; (8006868 <TIM_Base_SetConfig+0x118>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d023      	beq.n	8006802 <TIM_Base_SetConfig+0xb2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a2b      	ldr	r2, [pc, #172]	; (800686c <TIM_Base_SetConfig+0x11c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d01f      	beq.n	8006802 <TIM_Base_SetConfig+0xb2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a2a      	ldr	r2, [pc, #168]	; (8006870 <TIM_Base_SetConfig+0x120>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d01b      	beq.n	8006802 <TIM_Base_SetConfig+0xb2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a29      	ldr	r2, [pc, #164]	; (8006874 <TIM_Base_SetConfig+0x124>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d017      	beq.n	8006802 <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a28      	ldr	r2, [pc, #160]	; (8006878 <TIM_Base_SetConfig+0x128>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <TIM_Base_SetConfig+0xb2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a27      	ldr	r2, [pc, #156]	; (800687c <TIM_Base_SetConfig+0x12c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00f      	beq.n	8006802 <TIM_Base_SetConfig+0xb2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a26      	ldr	r2, [pc, #152]	; (8006880 <TIM_Base_SetConfig+0x130>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00b      	beq.n	8006802 <TIM_Base_SetConfig+0xb2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a25      	ldr	r2, [pc, #148]	; (8006884 <TIM_Base_SetConfig+0x134>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d007      	beq.n	8006802 <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a24      	ldr	r2, [pc, #144]	; (8006888 <TIM_Base_SetConfig+0x138>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d003      	beq.n	8006802 <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a23      	ldr	r2, [pc, #140]	; (800688c <TIM_Base_SetConfig+0x13c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d108      	bne.n	8006814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a0a      	ldr	r2, [pc, #40]	; (8006864 <TIM_Base_SetConfig+0x114>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d003      	beq.n	8006848 <TIM_Base_SetConfig+0xf8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a0c      	ldr	r2, [pc, #48]	; (8006874 <TIM_Base_SetConfig+0x124>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d103      	bne.n	8006850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	615a      	str	r2, [r3, #20]
}
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40010000 	.word	0x40010000
 8006868:	40000400 	.word	0x40000400
 800686c:	40000800 	.word	0x40000800
 8006870:	40000c00 	.word	0x40000c00
 8006874:	40010400 	.word	0x40010400
 8006878:	40014000 	.word	0x40014000
 800687c:	40014400 	.word	0x40014400
 8006880:	40014800 	.word	0x40014800
 8006884:	40001800 	.word	0x40001800
 8006888:	40001c00 	.word	0x40001c00
 800688c:	40002000 	.word	0x40002000

08006890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	f023 0201 	bic.w	r2, r3, #1
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f023 030a 	bic.w	r3, r3, #10
 80068cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	621a      	str	r2, [r3, #32]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b087      	sub	sp, #28
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f023 0210 	bic.w	r2, r3, #16
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006918:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	031b      	lsls	r3, r3, #12
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	4313      	orrs	r3, r2
 8006922:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800692a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	621a      	str	r2, [r3, #32]
}
 8006942:	bf00      	nop
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800694e:	b480      	push	{r7}
 8006950:	b085      	sub	sp, #20
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	f043 0307 	orr.w	r3, r3, #7
 8006970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	609a      	str	r2, [r3, #8]
}
 8006978:	bf00      	nop
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800699e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	021a      	lsls	r2, r3, #8
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	609a      	str	r2, [r3, #8]
}
 80069b8:	bf00      	nop
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069d8:	2302      	movs	r3, #2
 80069da:	e05a      	b.n	8006a92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a21      	ldr	r2, [pc, #132]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d022      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a28:	d01d      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d018      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1b      	ldr	r2, [pc, #108]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1a      	ldr	r2, [pc, #104]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00e      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a18      	ldr	r2, [pc, #96]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d009      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d004      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a15      	ldr	r2, [pc, #84]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d10c      	bne.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40010000 	.word	0x40010000
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40000800 	.word	0x40000800
 8006aac:	40000c00 	.word	0x40000c00
 8006ab0:	40010400 	.word	0x40010400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40001800 	.word	0x40001800

08006abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006ae8:	4904      	ldr	r1, [pc, #16]	; (8006afc <MX_FATFS_Init+0x18>)
 8006aea:	4805      	ldr	r0, [pc, #20]	; (8006b00 <MX_FATFS_Init+0x1c>)
 8006aec:	f002 fcae 	bl	800944c <FATFS_LinkDriver>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	4b03      	ldr	r3, [pc, #12]	; (8006b04 <MX_FATFS_Init+0x20>)
 8006af6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006af8:	bf00      	nop
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	2000070c 	.word	0x2000070c
 8006b00:	20000010 	.word	0x20000010
 8006b04:	20000708 	.word	0x20000708

08006b08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006b0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fa ffdb 	bl	8001ae0 <SD_disk_initialize>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fb f8b2 	bl	8001cac <SD_disk_status>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006b64:	7bf8      	ldrb	r0, [r7, #15]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	f7fb f8b4 	bl	8001cd8 <SD_disk_read>
 8006b70:	4603      	mov	r3, r0
 8006b72:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	607a      	str	r2, [r7, #4]
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006b8c:	7bf8      	ldrb	r0, [r7, #15]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	f7fb f90a 	bl	8001dac <SD_disk_write>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4603      	mov	r3, r0
 8006bac:	603a      	str	r2, [r7, #0]
 8006bae:	71fb      	strb	r3, [r7, #7]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	79b9      	ldrb	r1, [r7, #6]
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fb f97a 	bl	8001eb4 <SD_disk_ioctl>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	4a08      	ldr	r2, [pc, #32]	; (8006bfc <disk_status+0x30>)
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	79fa      	ldrb	r2, [r7, #7]
 8006be4:	4905      	ldr	r1, [pc, #20]	; (8006bfc <disk_status+0x30>)
 8006be6:	440a      	add	r2, r1
 8006be8:	7a12      	ldrb	r2, [r2, #8]
 8006bea:	4610      	mov	r0, r2
 8006bec:	4798      	blx	r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20000738 	.word	0x20000738

08006c00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	4a0d      	ldr	r2, [pc, #52]	; (8006c48 <disk_initialize+0x48>)
 8006c12:	5cd3      	ldrb	r3, [r2, r3]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d111      	bne.n	8006c3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	4a0b      	ldr	r2, [pc, #44]	; (8006c48 <disk_initialize+0x48>)
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <disk_initialize+0x48>)
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	79fa      	ldrb	r2, [r7, #7]
 8006c2e:	4906      	ldr	r1, [pc, #24]	; (8006c48 <disk_initialize+0x48>)
 8006c30:	440a      	add	r2, r1
 8006c32:	7a12      	ldrb	r2, [r2, #8]
 8006c34:	4610      	mov	r0, r2
 8006c36:	4798      	blx	r3
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000738 	.word	0x20000738

08006c4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006c4c:	b590      	push	{r4, r7, lr}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	4a0a      	ldr	r2, [pc, #40]	; (8006c88 <disk_read+0x3c>)
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	689c      	ldr	r4, [r3, #8]
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	4a07      	ldr	r2, [pc, #28]	; (8006c88 <disk_read+0x3c>)
 8006c6c:	4413      	add	r3, r2
 8006c6e:	7a18      	ldrb	r0, [r3, #8]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	47a0      	blx	r4
 8006c78:	4603      	mov	r3, r0
 8006c7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd90      	pop	{r4, r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000738 	.word	0x20000738

08006c8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c8c:	b590      	push	{r4, r7, lr}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	4a0a      	ldr	r2, [pc, #40]	; (8006cc8 <disk_write+0x3c>)
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	68dc      	ldr	r4, [r3, #12]
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	4a07      	ldr	r2, [pc, #28]	; (8006cc8 <disk_write+0x3c>)
 8006cac:	4413      	add	r3, r2
 8006cae:	7a18      	ldrb	r0, [r3, #8]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	47a0      	blx	r4
 8006cb8:	4603      	mov	r3, r0
 8006cba:	75fb      	strb	r3, [r7, #23]
  return res;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd90      	pop	{r4, r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000738 	.word	0x20000738

08006ccc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	603a      	str	r2, [r7, #0]
 8006cd6:	71fb      	strb	r3, [r7, #7]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
 8006cde:	4a09      	ldr	r2, [pc, #36]	; (8006d04 <disk_ioctl+0x38>)
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	79fa      	ldrb	r2, [r7, #7]
 8006cea:	4906      	ldr	r1, [pc, #24]	; (8006d04 <disk_ioctl+0x38>)
 8006cec:	440a      	add	r2, r1
 8006cee:	7a10      	ldrb	r0, [r2, #8]
 8006cf0:	79b9      	ldrb	r1, [r7, #6]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	4798      	blx	r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]
  return res;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	20000738 	.word	0x20000738

08006d08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3301      	adds	r3, #1
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006d18:	89fb      	ldrh	r3, [r7, #14]
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	b21a      	sxth	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	b21b      	sxth	r3, r3
 8006d24:	4313      	orrs	r3, r2
 8006d26:	b21b      	sxth	r3, r3
 8006d28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006d2a:	89fb      	ldrh	r3, [r7, #14]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3303      	adds	r3, #3
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	3202      	adds	r2, #2
 8006d50:	7812      	ldrb	r2, [r2, #0]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	3201      	adds	r2, #1
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006d70:	68fb      	ldr	r3, [r7, #12]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	460b      	mov	r3, r1
 8006d88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	887a      	ldrh	r2, [r7, #2]
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	887b      	ldrh	r3, [r7, #2]
 8006d98:	0a1b      	lsrs	r3, r3, #8
 8006d9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	607a      	str	r2, [r7, #4]
 8006da2:	887a      	ldrh	r2, [r7, #2]
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	701a      	strb	r2, [r3, #0]
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	0a1b      	lsrs	r3, r3, #8
 8006dce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	607a      	str	r2, [r7, #4]
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	0a1b      	lsrs	r3, r3, #8
 8006de0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	0a1b      	lsrs	r3, r3, #8
 8006df2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	607a      	str	r2, [r7, #4]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00d      	beq.n	8006e42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	1c53      	adds	r3, r2, #1
 8006e2a:	613b      	str	r3, [r7, #16]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	1c59      	adds	r1, r3, #1
 8006e30:	6179      	str	r1, [r7, #20]
 8006e32:	7812      	ldrb	r2, [r2, #0]
 8006e34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	607b      	str	r3, [r7, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1f1      	bne.n	8006e26 <mem_cpy+0x1a>
	}
}
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006e4e:	b480      	push	{r7}
 8006e50:	b087      	sub	sp, #28
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	617a      	str	r2, [r7, #20]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	607b      	str	r3, [r7, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f3      	bne.n	8006e5e <mem_set+0x10>
}
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006e84:	b480      	push	{r7}
 8006e86:	b089      	sub	sp, #36	; 0x24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	61fa      	str	r2, [r7, #28]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	61ba      	str	r2, [r7, #24]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	1acb      	subs	r3, r1, r3
 8006eb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	607b      	str	r3, [r7, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <mem_cmp+0x40>
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0eb      	beq.n	8006e9c <mem_cmp+0x18>

	return r;
 8006ec4:	697b      	ldr	r3, [r7, #20]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3724      	adds	r7, #36	; 0x24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006edc:	e002      	b.n	8006ee4 <chk_chr+0x12>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	607b      	str	r3, [r7, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d005      	beq.n	8006ef8 <chk_chr+0x26>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d1f2      	bne.n	8006ede <chk_chr+0xc>
	return *str;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	781b      	ldrb	r3, [r3, #0]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f12:	2300      	movs	r3, #0
 8006f14:	60bb      	str	r3, [r7, #8]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	e029      	b.n	8006f70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006f1c:	4a27      	ldr	r2, [pc, #156]	; (8006fbc <chk_lock+0xb4>)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	4413      	add	r3, r2
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d01d      	beq.n	8006f66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f2a:	4a24      	ldr	r2, [pc, #144]	; (8006fbc <chk_lock+0xb4>)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	4413      	add	r3, r2
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d116      	bne.n	8006f6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006f3c:	4a1f      	ldr	r2, [pc, #124]	; (8006fbc <chk_lock+0xb4>)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	4413      	add	r3, r2
 8006f44:	3304      	adds	r3, #4
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d10c      	bne.n	8006f6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f50:	4a1a      	ldr	r2, [pc, #104]	; (8006fbc <chk_lock+0xb4>)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	4413      	add	r3, r2
 8006f58:	3308      	adds	r3, #8
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d102      	bne.n	8006f6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f64:	e007      	b.n	8006f76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006f66:	2301      	movs	r3, #1
 8006f68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d9d2      	bls.n	8006f1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d109      	bne.n	8006f90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d102      	bne.n	8006f88 <chk_lock+0x80>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d101      	bne.n	8006f8c <chk_lock+0x84>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e010      	b.n	8006fae <chk_lock+0xa6>
 8006f8c:	2312      	movs	r3, #18
 8006f8e:	e00e      	b.n	8006fae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d108      	bne.n	8006fa8 <chk_lock+0xa0>
 8006f96:	4a09      	ldr	r2, [pc, #36]	; (8006fbc <chk_lock+0xb4>)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	4413      	add	r3, r2
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa6:	d101      	bne.n	8006fac <chk_lock+0xa4>
 8006fa8:	2310      	movs	r3, #16
 8006faa:	e000      	b.n	8006fae <chk_lock+0xa6>
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20000718 	.word	0x20000718

08006fc0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	607b      	str	r3, [r7, #4]
 8006fca:	e002      	b.n	8006fd2 <enq_lock+0x12>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	607b      	str	r3, [r7, #4]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d806      	bhi.n	8006fe6 <enq_lock+0x26>
 8006fd8:	4a09      	ldr	r2, [pc, #36]	; (8007000 <enq_lock+0x40>)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	4413      	add	r3, r2
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1f2      	bne.n	8006fcc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	bf14      	ite	ne
 8006fec:	2301      	movne	r3, #1
 8006fee:	2300      	moveq	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	20000718 	.word	0x20000718

08007004 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	e01f      	b.n	8007054 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007014:	4a41      	ldr	r2, [pc, #260]	; (800711c <inc_lock+0x118>)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	4413      	add	r3, r2
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d113      	bne.n	800704e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007026:	4a3d      	ldr	r2, [pc, #244]	; (800711c <inc_lock+0x118>)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	4413      	add	r3, r2
 800702e:	3304      	adds	r3, #4
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007036:	429a      	cmp	r2, r3
 8007038:	d109      	bne.n	800704e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800703a:	4a38      	ldr	r2, [pc, #224]	; (800711c <inc_lock+0x118>)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	4413      	add	r3, r2
 8007042:	3308      	adds	r3, #8
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800704a:	429a      	cmp	r2, r3
 800704c:	d006      	beq.n	800705c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d9dc      	bls.n	8007014 <inc_lock+0x10>
 800705a:	e000      	b.n	800705e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800705c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b02      	cmp	r3, #2
 8007062:	d132      	bne.n	80070ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	e002      	b.n	8007070 <inc_lock+0x6c>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3301      	adds	r3, #1
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d806      	bhi.n	8007084 <inc_lock+0x80>
 8007076:	4a29      	ldr	r2, [pc, #164]	; (800711c <inc_lock+0x118>)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	4413      	add	r3, r2
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1f2      	bne.n	800706a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d101      	bne.n	800708e <inc_lock+0x8a>
 800708a:	2300      	movs	r3, #0
 800708c:	e040      	b.n	8007110 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4922      	ldr	r1, [pc, #136]	; (800711c <inc_lock+0x118>)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	440b      	add	r3, r1
 800709a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	491e      	ldr	r1, [pc, #120]	; (800711c <inc_lock+0x118>)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	440b      	add	r3, r1
 80070a8:	3304      	adds	r3, #4
 80070aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	695a      	ldr	r2, [r3, #20]
 80070b0:	491a      	ldr	r1, [pc, #104]	; (800711c <inc_lock+0x118>)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	440b      	add	r3, r1
 80070b8:	3308      	adds	r3, #8
 80070ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80070bc:	4a17      	ldr	r2, [pc, #92]	; (800711c <inc_lock+0x118>)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	4413      	add	r3, r2
 80070c4:	330c      	adds	r3, #12
 80070c6:	2200      	movs	r2, #0
 80070c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d009      	beq.n	80070e4 <inc_lock+0xe0>
 80070d0:	4a12      	ldr	r2, [pc, #72]	; (800711c <inc_lock+0x118>)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	4413      	add	r3, r2
 80070d8:	330c      	adds	r3, #12
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <inc_lock+0xe0>
 80070e0:	2300      	movs	r3, #0
 80070e2:	e015      	b.n	8007110 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d108      	bne.n	80070fc <inc_lock+0xf8>
 80070ea:	4a0c      	ldr	r2, [pc, #48]	; (800711c <inc_lock+0x118>)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	4413      	add	r3, r2
 80070f2:	330c      	adds	r3, #12
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	3301      	adds	r3, #1
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	e001      	b.n	8007100 <inc_lock+0xfc>
 80070fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007100:	4906      	ldr	r1, [pc, #24]	; (800711c <inc_lock+0x118>)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	440b      	add	r3, r1
 8007108:	330c      	adds	r3, #12
 800710a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3301      	adds	r3, #1
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	20000718 	.word	0x20000718

08007120 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3b01      	subs	r3, #1
 800712c:	607b      	str	r3, [r7, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d825      	bhi.n	8007180 <dec_lock+0x60>
		n = Files[i].ctr;
 8007134:	4a17      	ldr	r2, [pc, #92]	; (8007194 <dec_lock+0x74>)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	4413      	add	r3, r2
 800713c:	330c      	adds	r3, #12
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007142:	89fb      	ldrh	r3, [r7, #14]
 8007144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007148:	d101      	bne.n	800714e <dec_lock+0x2e>
 800714a:	2300      	movs	r3, #0
 800714c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800714e:	89fb      	ldrh	r3, [r7, #14]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <dec_lock+0x3a>
 8007154:	89fb      	ldrh	r3, [r7, #14]
 8007156:	3b01      	subs	r3, #1
 8007158:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800715a:	4a0e      	ldr	r2, [pc, #56]	; (8007194 <dec_lock+0x74>)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	4413      	add	r3, r2
 8007162:	330c      	adds	r3, #12
 8007164:	89fa      	ldrh	r2, [r7, #14]
 8007166:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007168:	89fb      	ldrh	r3, [r7, #14]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d105      	bne.n	800717a <dec_lock+0x5a>
 800716e:	4a09      	ldr	r2, [pc, #36]	; (8007194 <dec_lock+0x74>)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	011b      	lsls	r3, r3, #4
 8007174:	4413      	add	r3, r2
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	737b      	strb	r3, [r7, #13]
 800717e:	e001      	b.n	8007184 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007180:	2302      	movs	r3, #2
 8007182:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007184:	7b7b      	ldrb	r3, [r7, #13]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	20000718 	.word	0x20000718

08007198 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e010      	b.n	80071c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80071a6:	4a0d      	ldr	r2, [pc, #52]	; (80071dc <clear_lock+0x44>)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	4413      	add	r3, r2
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d105      	bne.n	80071c2 <clear_lock+0x2a>
 80071b6:	4a09      	ldr	r2, [pc, #36]	; (80071dc <clear_lock+0x44>)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	4413      	add	r3, r2
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3301      	adds	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d9eb      	bls.n	80071a6 <clear_lock+0xe>
	}
}
 80071ce:	bf00      	nop
 80071d0:	bf00      	nop
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	20000718 	.word	0x20000718

080071e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	78db      	ldrb	r3, [r3, #3]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d034      	beq.n	800725e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	7858      	ldrb	r0, [r3, #1]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007204:	2301      	movs	r3, #1
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	f7ff fd40 	bl	8006c8c <disk_write>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007212:	2301      	movs	r3, #1
 8007214:	73fb      	strb	r3, [r7, #15]
 8007216:	e022      	b.n	800725e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	1ad2      	subs	r2, r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	429a      	cmp	r2, r3
 800722c:	d217      	bcs.n	800725e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	789b      	ldrb	r3, [r3, #2]
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	e010      	b.n	8007258 <sync_window+0x78>
					wsect += fs->fsize;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4413      	add	r3, r2
 800723e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	7858      	ldrb	r0, [r3, #1]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800724a:	2301      	movs	r3, #1
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	f7ff fd1d 	bl	8006c8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	3b01      	subs	r3, #1
 8007256:	613b      	str	r3, [r7, #16]
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d8eb      	bhi.n	8007236 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800725e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	429a      	cmp	r2, r3
 800727e:	d01b      	beq.n	80072b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff ffad 	bl	80071e0 <sync_window>
 8007286:	4603      	mov	r3, r0
 8007288:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d113      	bne.n	80072b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	7858      	ldrb	r0, [r3, #1]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800729a:	2301      	movs	r3, #1
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	f7ff fcd5 	bl	8006c4c <disk_read>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d004      	beq.n	80072b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80072a8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff ff87 	bl	80071e0 <sync_window>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d158      	bne.n	800738e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d148      	bne.n	8007376 <sync_fs+0xb2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	791b      	ldrb	r3, [r3, #4]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d144      	bne.n	8007376 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3330      	adds	r3, #48	; 0x30
 80072f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f4:	2100      	movs	r1, #0
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff fda9 	bl	8006e4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3330      	adds	r3, #48	; 0x30
 8007300:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007304:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fd38 	bl	8006d7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3330      	adds	r3, #48	; 0x30
 8007312:	4921      	ldr	r1, [pc, #132]	; (8007398 <sync_fs+0xd4>)
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff fd4d 	bl	8006db4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3330      	adds	r3, #48	; 0x30
 800731e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007322:	491e      	ldr	r1, [pc, #120]	; (800739c <sync_fs+0xd8>)
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff fd45 	bl	8006db4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3330      	adds	r3, #48	; 0x30
 800732e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	4619      	mov	r1, r3
 8007338:	4610      	mov	r0, r2
 800733a:	f7ff fd3b 	bl	8006db4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3330      	adds	r3, #48	; 0x30
 8007342:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	4619      	mov	r1, r3
 800734c:	4610      	mov	r0, r2
 800734e:	f7ff fd31 	bl	8006db4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	7858      	ldrb	r0, [r3, #1]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736a:	2301      	movs	r3, #1
 800736c:	f7ff fc8e 	bl	8006c8c <disk_write>
			fs->fsi_flag = 0;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	2200      	movs	r2, #0
 800737c:	2100      	movs	r1, #0
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff fca4 	bl	8006ccc <disk_ioctl>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <sync_fs+0xca>
 800738a:	2301      	movs	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	41615252 	.word	0x41615252
 800739c:	61417272 	.word	0x61417272

080073a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	3b02      	subs	r3, #2
 80073ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	3b02      	subs	r3, #2
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d301      	bcc.n	80073c0 <clust2sect+0x20>
 80073bc:	2300      	movs	r3, #0
 80073be:	e008      	b.n	80073d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	895b      	ldrh	r3, [r3, #10]
 80073c4:	461a      	mov	r2, r3
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	fb03 f202 	mul.w	r2, r3, r2
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d0:	4413      	add	r3, r2
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b086      	sub	sp, #24
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d904      	bls.n	80073fe <get_fat+0x20>
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d302      	bcc.n	8007404 <get_fat+0x26>
		val = 1;	/* Internal error */
 80073fe:	2301      	movs	r3, #1
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	e08f      	b.n	8007524 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007404:	f04f 33ff 	mov.w	r3, #4294967295
 8007408:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b03      	cmp	r3, #3
 8007410:	d062      	beq.n	80074d8 <get_fat+0xfa>
 8007412:	2b03      	cmp	r3, #3
 8007414:	dc7c      	bgt.n	8007510 <get_fat+0x132>
 8007416:	2b01      	cmp	r3, #1
 8007418:	d002      	beq.n	8007420 <get_fat+0x42>
 800741a:	2b02      	cmp	r3, #2
 800741c:	d042      	beq.n	80074a4 <get_fat+0xc6>
 800741e:	e077      	b.n	8007510 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	085b      	lsrs	r3, r3, #1
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	6a1a      	ldr	r2, [r3, #32]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	0a5b      	lsrs	r3, r3, #9
 8007436:	4413      	add	r3, r2
 8007438:	4619      	mov	r1, r3
 800743a:	6938      	ldr	r0, [r7, #16]
 800743c:	f7ff ff14 	bl	8007268 <move_window>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d167      	bne.n	8007516 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	60fa      	str	r2, [r7, #12]
 800744c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4413      	add	r3, r2
 8007454:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007458:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	0a5b      	lsrs	r3, r3, #9
 8007462:	4413      	add	r3, r2
 8007464:	4619      	mov	r1, r3
 8007466:	6938      	ldr	r0, [r7, #16]
 8007468:	f7ff fefe 	bl	8007268 <move_window>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d153      	bne.n	800751a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4413      	add	r3, r2
 800747c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	461a      	mov	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4313      	orrs	r3, r2
 8007488:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <get_fat+0xbc>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	091b      	lsrs	r3, r3, #4
 8007498:	e002      	b.n	80074a0 <get_fat+0xc2>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074a0:	617b      	str	r3, [r7, #20]
			break;
 80074a2:	e03f      	b.n	8007524 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6a1a      	ldr	r2, [r3, #32]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	0a1b      	lsrs	r3, r3, #8
 80074ac:	4413      	add	r3, r2
 80074ae:	4619      	mov	r1, r3
 80074b0:	6938      	ldr	r0, [r7, #16]
 80074b2:	f7ff fed9 	bl	8007268 <move_window>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d130      	bne.n	800751e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80074ca:	4413      	add	r3, r2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fc1b 	bl	8006d08 <ld_word>
 80074d2:	4603      	mov	r3, r0
 80074d4:	617b      	str	r3, [r7, #20]
			break;
 80074d6:	e025      	b.n	8007524 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	6a1a      	ldr	r2, [r3, #32]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	09db      	lsrs	r3, r3, #7
 80074e0:	4413      	add	r3, r2
 80074e2:	4619      	mov	r1, r3
 80074e4:	6938      	ldr	r0, [r7, #16]
 80074e6:	f7ff febf 	bl	8007268 <move_window>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d118      	bne.n	8007522 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80074fe:	4413      	add	r3, r2
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff fc19 	bl	8006d38 <ld_dword>
 8007506:	4603      	mov	r3, r0
 8007508:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800750c:	617b      	str	r3, [r7, #20]
			break;
 800750e:	e009      	b.n	8007524 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007510:	2301      	movs	r3, #1
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	e006      	b.n	8007524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007516:	bf00      	nop
 8007518:	e004      	b.n	8007524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800751a:	bf00      	nop
 800751c:	e002      	b.n	8007524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800751e:	bf00      	nop
 8007520:	e000      	b.n	8007524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007522:	bf00      	nop
		}
	}

	return val;
 8007524:	697b      	ldr	r3, [r7, #20]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800752e:	b590      	push	{r4, r7, lr}
 8007530:	b089      	sub	sp, #36	; 0x24
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800753a:	2302      	movs	r3, #2
 800753c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b01      	cmp	r3, #1
 8007542:	f240 80d2 	bls.w	80076ea <put_fat+0x1bc>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	429a      	cmp	r2, r3
 800754e:	f080 80cc 	bcs.w	80076ea <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b03      	cmp	r3, #3
 8007558:	f000 8096 	beq.w	8007688 <put_fat+0x15a>
 800755c:	2b03      	cmp	r3, #3
 800755e:	f300 80cd 	bgt.w	80076fc <put_fat+0x1ce>
 8007562:	2b01      	cmp	r3, #1
 8007564:	d002      	beq.n	800756c <put_fat+0x3e>
 8007566:	2b02      	cmp	r3, #2
 8007568:	d06e      	beq.n	8007648 <put_fat+0x11a>
 800756a:	e0c7      	b.n	80076fc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	61bb      	str	r3, [r7, #24]
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	085b      	lsrs	r3, r3, #1
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	4413      	add	r3, r2
 8007578:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a1a      	ldr	r2, [r3, #32]
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	0a5b      	lsrs	r3, r3, #9
 8007582:	4413      	add	r3, r2
 8007584:	4619      	mov	r1, r3
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f7ff fe6e 	bl	8007268 <move_window>
 800758c:	4603      	mov	r3, r0
 800758e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007590:	7ffb      	ldrb	r3, [r7, #31]
 8007592:	2b00      	cmp	r3, #0
 8007594:	f040 80ab 	bne.w	80076ee <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	1c59      	adds	r1, r3, #1
 80075a2:	61b9      	str	r1, [r7, #24]
 80075a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a8:	4413      	add	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00d      	beq.n	80075d2 <put_fat+0xa4>
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b25b      	sxtb	r3, r3
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	b25a      	sxtb	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	b25b      	sxtb	r3, r3
 80075ca:	4313      	orrs	r3, r2
 80075cc:	b25b      	sxtb	r3, r3
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	e001      	b.n	80075d6 <put_fat+0xa8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2201      	movs	r2, #1
 80075de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	0a5b      	lsrs	r3, r3, #9
 80075e8:	4413      	add	r3, r2
 80075ea:	4619      	mov	r1, r3
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f7ff fe3b 	bl	8007268 <move_window>
 80075f2:	4603      	mov	r3, r0
 80075f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075f6:	7ffb      	ldrb	r3, [r7, #31]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d17a      	bne.n	80076f2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007608:	4413      	add	r3, r2
 800760a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <put_fat+0xf0>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	091b      	lsrs	r3, r3, #4
 800761a:	b2db      	uxtb	r3, r3
 800761c:	e00e      	b.n	800763c <put_fat+0x10e>
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	b25b      	sxtb	r3, r3
 8007624:	f023 030f 	bic.w	r3, r3, #15
 8007628:	b25a      	sxtb	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	0a1b      	lsrs	r3, r3, #8
 800762e:	b25b      	sxtb	r3, r3
 8007630:	f003 030f 	and.w	r3, r3, #15
 8007634:	b25b      	sxtb	r3, r3
 8007636:	4313      	orrs	r3, r2
 8007638:	b25b      	sxtb	r3, r3
 800763a:	b2db      	uxtb	r3, r3
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	70da      	strb	r2, [r3, #3]
			break;
 8007646:	e059      	b.n	80076fc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a1a      	ldr	r2, [r3, #32]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	0a1b      	lsrs	r3, r3, #8
 8007650:	4413      	add	r3, r2
 8007652:	4619      	mov	r1, r3
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f7ff fe07 	bl	8007268 <move_window>
 800765a:	4603      	mov	r3, r0
 800765c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800765e:	7ffb      	ldrb	r3, [r7, #31]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d148      	bne.n	80076f6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007672:	4413      	add	r3, r2
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	b292      	uxth	r2, r2
 8007678:	4611      	mov	r1, r2
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fb7f 	bl	8006d7e <st_word>
			fs->wflag = 1;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	70da      	strb	r2, [r3, #3]
			break;
 8007686:	e039      	b.n	80076fc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1a      	ldr	r2, [r3, #32]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	09db      	lsrs	r3, r3, #7
 8007690:	4413      	add	r3, r2
 8007692:	4619      	mov	r1, r3
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff fde7 	bl	8007268 <move_window>
 800769a:	4603      	mov	r3, r0
 800769c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800769e:	7ffb      	ldrb	r3, [r7, #31]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d12a      	bne.n	80076fa <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076b8:	4413      	add	r3, r2
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fb3c 	bl	8006d38 <ld_dword>
 80076c0:	4603      	mov	r3, r0
 80076c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80076c6:	4323      	orrs	r3, r4
 80076c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076d8:	4413      	add	r3, r2
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	f7ff fb69 	bl	8006db4 <st_dword>
			fs->wflag = 1;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2201      	movs	r2, #1
 80076e6:	70da      	strb	r2, [r3, #3]
			break;
 80076e8:	e008      	b.n	80076fc <put_fat+0x1ce>
		}
	}
 80076ea:	bf00      	nop
 80076ec:	e006      	b.n	80076fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80076ee:	bf00      	nop
 80076f0:	e004      	b.n	80076fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80076f2:	bf00      	nop
 80076f4:	e002      	b.n	80076fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80076f6:	bf00      	nop
 80076f8:	e000      	b.n	80076fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80076fa:	bf00      	nop
	return res;
 80076fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3724      	adds	r7, #36	; 0x24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd90      	pop	{r4, r7, pc}

08007706 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b088      	sub	sp, #32
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d904      	bls.n	800772c <remove_chain+0x26>
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	429a      	cmp	r2, r3
 800772a:	d301      	bcc.n	8007730 <remove_chain+0x2a>
 800772c:	2302      	movs	r3, #2
 800772e:	e04b      	b.n	80077c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00c      	beq.n	8007750 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007736:	f04f 32ff 	mov.w	r2, #4294967295
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	69b8      	ldr	r0, [r7, #24]
 800773e:	f7ff fef6 	bl	800752e <put_fat>
 8007742:	4603      	mov	r3, r0
 8007744:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007746:	7ffb      	ldrb	r3, [r7, #31]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <remove_chain+0x4a>
 800774c:	7ffb      	ldrb	r3, [r7, #31]
 800774e:	e03b      	b.n	80077c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7ff fe43 	bl	80073de <get_fat>
 8007758:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d031      	beq.n	80077c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <remove_chain+0x64>
 8007766:	2302      	movs	r3, #2
 8007768:	e02e      	b.n	80077c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007770:	d101      	bne.n	8007776 <remove_chain+0x70>
 8007772:	2301      	movs	r3, #1
 8007774:	e028      	b.n	80077c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007776:	2200      	movs	r2, #0
 8007778:	68b9      	ldr	r1, [r7, #8]
 800777a:	69b8      	ldr	r0, [r7, #24]
 800777c:	f7ff fed7 	bl	800752e <put_fat>
 8007780:	4603      	mov	r3, r0
 8007782:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007784:	7ffb      	ldrb	r3, [r7, #31]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <remove_chain+0x88>
 800778a:	7ffb      	ldrb	r3, [r7, #31]
 800778c:	e01c      	b.n	80077c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	691a      	ldr	r2, [r3, #16]
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	3b02      	subs	r3, #2
 8007798:	429a      	cmp	r2, r3
 800779a:	d20b      	bcs.n	80077b4 <remove_chain+0xae>
			fs->free_clst++;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	791b      	ldrb	r3, [r3, #4]
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d3c6      	bcc.n	8007750 <remove_chain+0x4a>
 80077c2:	e000      	b.n	80077c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80077c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3720      	adds	r7, #32
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10d      	bne.n	8007802 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d004      	beq.n	80077fc <create_chain+0x2c>
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d31b      	bcc.n	8007834 <create_chain+0x64>
 80077fc:	2301      	movs	r3, #1
 80077fe:	61bb      	str	r3, [r7, #24]
 8007800:	e018      	b.n	8007834 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff fdea 	bl	80073de <get_fat>
 800780a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d801      	bhi.n	8007816 <create_chain+0x46>
 8007812:	2301      	movs	r3, #1
 8007814:	e070      	b.n	80078f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781c:	d101      	bne.n	8007822 <create_chain+0x52>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	e06a      	b.n	80078f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	429a      	cmp	r2, r3
 800782a:	d201      	bcs.n	8007830 <create_chain+0x60>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	e063      	b.n	80078f8 <create_chain+0x128>
		scl = clst;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	3301      	adds	r3, #1
 800783c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	429a      	cmp	r2, r3
 8007846:	d307      	bcc.n	8007858 <create_chain+0x88>
				ncl = 2;
 8007848:	2302      	movs	r3, #2
 800784a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	429a      	cmp	r2, r3
 8007852:	d901      	bls.n	8007858 <create_chain+0x88>
 8007854:	2300      	movs	r3, #0
 8007856:	e04f      	b.n	80078f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007858:	69f9      	ldr	r1, [r7, #28]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff fdbf 	bl	80073de <get_fat>
 8007860:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00e      	beq.n	8007886 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d003      	beq.n	8007876 <create_chain+0xa6>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d101      	bne.n	800787a <create_chain+0xaa>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	e03e      	b.n	80078f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800787a:	69fa      	ldr	r2, [r7, #28]
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	429a      	cmp	r2, r3
 8007880:	d1da      	bne.n	8007838 <create_chain+0x68>
 8007882:	2300      	movs	r3, #0
 8007884:	e038      	b.n	80078f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007886:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007888:	f04f 32ff 	mov.w	r2, #4294967295
 800788c:	69f9      	ldr	r1, [r7, #28]
 800788e:	6938      	ldr	r0, [r7, #16]
 8007890:	f7ff fe4d 	bl	800752e <put_fat>
 8007894:	4603      	mov	r3, r0
 8007896:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d109      	bne.n	80078b2 <create_chain+0xe2>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d006      	beq.n	80078b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6938      	ldr	r0, [r7, #16]
 80078aa:	f7ff fe40 	bl	800752e <put_fat>
 80078ae:	4603      	mov	r3, r0
 80078b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d116      	bne.n	80078e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	3b02      	subs	r3, #2
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d804      	bhi.n	80078d6 <create_chain+0x106>
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	1e5a      	subs	r2, r3, #1
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	791b      	ldrb	r3, [r3, #4]
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	711a      	strb	r2, [r3, #4]
 80078e4:	e007      	b.n	80078f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d102      	bne.n	80078f2 <create_chain+0x122>
 80078ec:	f04f 33ff 	mov.w	r3, #4294967295
 80078f0:	e000      	b.n	80078f4 <create_chain+0x124>
 80078f2:	2301      	movs	r3, #1
 80078f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80078f6:	69fb      	ldr	r3, [r7, #28]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	3304      	adds	r3, #4
 8007916:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	0a5b      	lsrs	r3, r3, #9
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	8952      	ldrh	r2, [r2, #10]
 8007920:	fbb3 f3f2 	udiv	r3, r3, r2
 8007924:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1d1a      	adds	r2, r3, #4
 800792a:	613a      	str	r2, [r7, #16]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <clmt_clust+0x3a>
 8007936:	2300      	movs	r3, #0
 8007938:	e010      	b.n	800795c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	429a      	cmp	r2, r3
 8007940:	d307      	bcc.n	8007952 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	3304      	adds	r3, #4
 800794e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007950:	e7e9      	b.n	8007926 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007952:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	4413      	add	r3, r2
}
 800795c:	4618      	mov	r0, r3
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800797e:	d204      	bcs.n	800798a <dir_sdi+0x22>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	f003 031f 	and.w	r3, r3, #31
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <dir_sdi+0x26>
		return FR_INT_ERR;
 800798a:	2302      	movs	r3, #2
 800798c:	e063      	b.n	8007a56 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d106      	bne.n	80079ae <dir_sdi+0x46>
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d902      	bls.n	80079ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10c      	bne.n	80079ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	8912      	ldrh	r2, [r2, #8]
 80079bc:	4293      	cmp	r3, r2
 80079be:	d301      	bcc.n	80079c4 <dir_sdi+0x5c>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e048      	b.n	8007a56 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	61da      	str	r2, [r3, #28]
 80079cc:	e029      	b.n	8007a22 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	895b      	ldrh	r3, [r3, #10]
 80079d2:	025b      	lsls	r3, r3, #9
 80079d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079d6:	e019      	b.n	8007a0c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6979      	ldr	r1, [r7, #20]
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff fcfe 	bl	80073de <get_fat>
 80079e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ea:	d101      	bne.n	80079f0 <dir_sdi+0x88>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e032      	b.n	8007a56 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d904      	bls.n	8007a00 <dir_sdi+0x98>
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d301      	bcc.n	8007a04 <dir_sdi+0x9c>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e028      	b.n	8007a56 <dir_sdi+0xee>
			ofs -= csz;
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d2e1      	bcs.n	80079d8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007a14:	6979      	ldr	r1, [r7, #20]
 8007a16:	6938      	ldr	r0, [r7, #16]
 8007a18:	f7ff fcc2 	bl	80073a0 <clust2sect>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <dir_sdi+0xcc>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e010      	b.n	8007a56 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	69da      	ldr	r2, [r3, #28]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	0a5b      	lsrs	r3, r3, #9
 8007a3c:	441a      	add	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4e:	441a      	add	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b086      	sub	sp, #24
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	3320      	adds	r3, #32
 8007a74:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <dir_next+0x28>
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a84:	d301      	bcc.n	8007a8a <dir_next+0x2c>
 8007a86:	2304      	movs	r3, #4
 8007a88:	e0aa      	b.n	8007be0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f040 8098 	bne.w	8007bc6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10b      	bne.n	8007ac0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	8912      	ldrh	r2, [r2, #8]
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	f0c0 8088 	bcc.w	8007bc6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	61da      	str	r2, [r3, #28]
 8007abc:	2304      	movs	r3, #4
 8007abe:	e08f      	b.n	8007be0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	0a5b      	lsrs	r3, r3, #9
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	8952      	ldrh	r2, [r2, #10]
 8007ac8:	3a01      	subs	r2, #1
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d17a      	bne.n	8007bc6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4610      	mov	r0, r2
 8007ada:	f7ff fc80 	bl	80073de <get_fat>
 8007ade:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d801      	bhi.n	8007aea <dir_next+0x8c>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e07a      	b.n	8007be0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af0:	d101      	bne.n	8007af6 <dir_next+0x98>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e074      	b.n	8007be0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d358      	bcc.n	8007bb2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d104      	bne.n	8007b10 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	61da      	str	r2, [r3, #28]
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	e067      	b.n	8007be0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7ff fe59 	bl	80077d0 <create_chain>
 8007b1e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <dir_next+0xcc>
 8007b26:	2307      	movs	r3, #7
 8007b28:	e05a      	b.n	8007be0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <dir_next+0xd6>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e055      	b.n	8007be0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	d101      	bne.n	8007b40 <dir_next+0xe2>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e04f      	b.n	8007be0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff fb4d 	bl	80071e0 <sync_window>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <dir_next+0xf2>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e047      	b.n	8007be0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3330      	adds	r3, #48	; 0x30
 8007b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7ff f977 	bl	8006e4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b60:	2300      	movs	r3, #0
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	6979      	ldr	r1, [r7, #20]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f7ff fc1a 	bl	80073a0 <clust2sect>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b72:	e012      	b.n	8007b9a <dir_next+0x13c>
						fs->wflag = 1;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f7ff fb30 	bl	80071e0 <sync_window>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <dir_next+0x12c>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e02a      	b.n	8007be0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	613b      	str	r3, [r7, #16]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	895b      	ldrh	r3, [r3, #10]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d3e6      	bcc.n	8007b74 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	1ad2      	subs	r2, r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007bb8:	6979      	ldr	r1, [r7, #20]
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff fbf0 	bl	80073a0 <clust2sect>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd8:	441a      	add	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff feb4 	bl	8007968 <dir_sdi>
 8007c00:	4603      	mov	r3, r0
 8007c02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d12b      	bne.n	8007c62 <dir_alloc+0x7a>
		n = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	4619      	mov	r1, r3
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f7ff fb27 	bl	8007268 <move_window>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d11d      	bne.n	8007c60 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2be5      	cmp	r3, #229	; 0xe5
 8007c2c:	d004      	beq.n	8007c38 <dir_alloc+0x50>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d107      	bne.n	8007c48 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	613b      	str	r3, [r7, #16]
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d102      	bne.n	8007c4c <dir_alloc+0x64>
 8007c46:	e00c      	b.n	8007c62 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007c48:	2300      	movs	r3, #0
 8007c4a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7ff ff05 	bl	8007a5e <dir_next>
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0d7      	beq.n	8007c0e <dir_alloc+0x26>
 8007c5e:	e000      	b.n	8007c62 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007c60:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d101      	bne.n	8007c6c <dir_alloc+0x84>
 8007c68:	2307      	movs	r3, #7
 8007c6a:	75fb      	strb	r3, [r7, #23]
	return res;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	331a      	adds	r3, #26
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff f83f 	bl	8006d08 <ld_word>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d109      	bne.n	8007caa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	3314      	adds	r3, #20
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff f834 	bl	8006d08 <ld_word>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	041b      	lsls	r3, r3, #16
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007caa:	68fb      	ldr	r3, [r7, #12]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	331a      	adds	r3, #26
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	b292      	uxth	r2, r2
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff f857 	bl	8006d7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d109      	bne.n	8007cec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f103 0214 	add.w	r2, r3, #20
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	0c1b      	lsrs	r3, r3, #16
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	f7ff f849 	bl	8006d7e <st_word>
	}
}
 8007cec:	bf00      	nop
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007d02:	2100      	movs	r1, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff fe2f 	bl	8007968 <dir_sdi>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <dir_find+0x24>
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	e03e      	b.n	8007d96 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6938      	ldr	r0, [r7, #16]
 8007d20:	f7ff faa2 	bl	8007268 <move_window>
 8007d24:	4603      	mov	r3, r0
 8007d26:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d12f      	bne.n	8007d8e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d102      	bne.n	8007d42 <dir_find+0x4e>
 8007d3c:	2304      	movs	r3, #4
 8007d3e:	75fb      	strb	r3, [r7, #23]
 8007d40:	e028      	b.n	8007d94 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	330b      	adds	r3, #11
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	330b      	adds	r3, #11
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	f003 0308 	and.w	r3, r3, #8
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <dir_find+0x86>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a18      	ldr	r0, [r3, #32]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3324      	adds	r3, #36	; 0x24
 8007d6c:	220b      	movs	r2, #11
 8007d6e:	4619      	mov	r1, r3
 8007d70:	f7ff f888 	bl	8006e84 <mem_cmp>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00b      	beq.n	8007d92 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff fe6e 	bl	8007a5e <dir_next>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0c5      	beq.n	8007d18 <dir_find+0x24>
 8007d8c:	e002      	b.n	8007d94 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007d8e:	bf00      	nop
 8007d90:	e000      	b.n	8007d94 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d92:	bf00      	nop

	return res;
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007dac:	2101      	movs	r1, #1
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff ff1a 	bl	8007be8 <dir_alloc>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d11c      	bne.n	8007df8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	68b8      	ldr	r0, [r7, #8]
 8007dc6:	f7ff fa4f 	bl	8007268 <move_window>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d111      	bne.n	8007df8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff f836 	bl	8006e4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a18      	ldr	r0, [r3, #32]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3324      	adds	r3, #36	; 0x24
 8007dea:	220b      	movs	r2, #11
 8007dec:	4619      	mov	r1, r3
 8007dee:	f7ff f80d 	bl	8006e0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2201      	movs	r2, #1
 8007df6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3324      	adds	r3, #36	; 0x24
 8007e18:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007e1a:	220b      	movs	r2, #11
 8007e1c:	2120      	movs	r1, #32
 8007e1e:	68b8      	ldr	r0, [r7, #8]
 8007e20:	f7ff f815 	bl	8006e4e <mem_set>
	si = i = 0; ni = 8;
 8007e24:	2300      	movs	r3, #0
 8007e26:	613b      	str	r3, [r7, #16]
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	61fb      	str	r3, [r7, #28]
 8007e2c:	2308      	movs	r3, #8
 8007e2e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	61fa      	str	r2, [r7, #28]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4413      	add	r3, r2
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007e3e:	7efb      	ldrb	r3, [r7, #27]
 8007e40:	2b20      	cmp	r3, #32
 8007e42:	d94e      	bls.n	8007ee2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007e44:	7efb      	ldrb	r3, [r7, #27]
 8007e46:	2b2f      	cmp	r3, #47	; 0x2f
 8007e48:	d006      	beq.n	8007e58 <create_name+0x54>
 8007e4a:	7efb      	ldrb	r3, [r7, #27]
 8007e4c:	2b5c      	cmp	r3, #92	; 0x5c
 8007e4e:	d110      	bne.n	8007e72 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007e50:	e002      	b.n	8007e58 <create_name+0x54>
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	3301      	adds	r3, #1
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b2f      	cmp	r3, #47	; 0x2f
 8007e62:	d0f6      	beq.n	8007e52 <create_name+0x4e>
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	4413      	add	r3, r2
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b5c      	cmp	r3, #92	; 0x5c
 8007e6e:	d0f0      	beq.n	8007e52 <create_name+0x4e>
			break;
 8007e70:	e038      	b.n	8007ee4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007e72:	7efb      	ldrb	r3, [r7, #27]
 8007e74:	2b2e      	cmp	r3, #46	; 0x2e
 8007e76:	d003      	beq.n	8007e80 <create_name+0x7c>
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d30c      	bcc.n	8007e9a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2b0b      	cmp	r3, #11
 8007e84:	d002      	beq.n	8007e8c <create_name+0x88>
 8007e86:	7efb      	ldrb	r3, [r7, #27]
 8007e88:	2b2e      	cmp	r3, #46	; 0x2e
 8007e8a:	d001      	beq.n	8007e90 <create_name+0x8c>
 8007e8c:	2306      	movs	r3, #6
 8007e8e:	e044      	b.n	8007f1a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007e90:	2308      	movs	r3, #8
 8007e92:	613b      	str	r3, [r7, #16]
 8007e94:	230b      	movs	r3, #11
 8007e96:	617b      	str	r3, [r7, #20]
			continue;
 8007e98:	e022      	b.n	8007ee0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007e9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	da04      	bge.n	8007eac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007ea2:	7efb      	ldrb	r3, [r7, #27]
 8007ea4:	3b80      	subs	r3, #128	; 0x80
 8007ea6:	4a1f      	ldr	r2, [pc, #124]	; (8007f24 <create_name+0x120>)
 8007ea8:	5cd3      	ldrb	r3, [r2, r3]
 8007eaa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007eac:	7efb      	ldrb	r3, [r7, #27]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	481d      	ldr	r0, [pc, #116]	; (8007f28 <create_name+0x124>)
 8007eb2:	f7ff f80e 	bl	8006ed2 <chk_chr>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <create_name+0xbc>
 8007ebc:	2306      	movs	r3, #6
 8007ebe:	e02c      	b.n	8007f1a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007ec0:	7efb      	ldrb	r3, [r7, #27]
 8007ec2:	2b60      	cmp	r3, #96	; 0x60
 8007ec4:	d905      	bls.n	8007ed2 <create_name+0xce>
 8007ec6:	7efb      	ldrb	r3, [r7, #27]
 8007ec8:	2b7a      	cmp	r3, #122	; 0x7a
 8007eca:	d802      	bhi.n	8007ed2 <create_name+0xce>
 8007ecc:	7efb      	ldrb	r3, [r7, #27]
 8007ece:	3b20      	subs	r3, #32
 8007ed0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	613a      	str	r2, [r7, #16]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	4413      	add	r3, r2
 8007edc:	7efa      	ldrb	r2, [r7, #27]
 8007ede:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007ee0:	e7a6      	b.n	8007e30 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007ee2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	441a      	add	r2, r3
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <create_name+0xf4>
 8007ef4:	2306      	movs	r3, #6
 8007ef6:	e010      	b.n	8007f1a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2be5      	cmp	r3, #229	; 0xe5
 8007efe:	d102      	bne.n	8007f06 <create_name+0x102>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2205      	movs	r2, #5
 8007f04:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007f06:	7efb      	ldrb	r3, [r7, #27]
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d801      	bhi.n	8007f10 <create_name+0x10c>
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	e000      	b.n	8007f12 <create_name+0x10e>
 8007f10:	2200      	movs	r2, #0
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	330b      	adds	r3, #11
 8007f16:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007f18:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3720      	adds	r7, #32
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	0800a460 	.word	0x0800a460
 8007f28:	0800a404 	.word	0x0800a404

08007f2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007f40:	e002      	b.n	8007f48 <follow_path+0x1c>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	3301      	adds	r3, #1
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b2f      	cmp	r3, #47	; 0x2f
 8007f4e:	d0f8      	beq.n	8007f42 <follow_path+0x16>
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b5c      	cmp	r3, #92	; 0x5c
 8007f56:	d0f4      	beq.n	8007f42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b1f      	cmp	r3, #31
 8007f64:	d80a      	bhi.n	8007f7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2280      	movs	r2, #128	; 0x80
 8007f6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007f6e:	2100      	movs	r1, #0
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff fcf9 	bl	8007968 <dir_sdi>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75fb      	strb	r3, [r7, #23]
 8007f7a:	e043      	b.n	8008004 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f7c:	463b      	mov	r3, r7
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff ff3f 	bl	8007e04 <create_name>
 8007f86:	4603      	mov	r3, r0
 8007f88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d134      	bne.n	8007ffa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff feaf 	bl	8007cf4 <dir_find>
 8007f96:	4603      	mov	r3, r0
 8007f98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007fa0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00a      	beq.n	8007fbe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	d127      	bne.n	8007ffe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007fae:	7afb      	ldrb	r3, [r7, #11]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d122      	bne.n	8007ffe <follow_path+0xd2>
 8007fb8:	2305      	movs	r3, #5
 8007fba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007fbc:	e01f      	b.n	8007ffe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fbe:	7afb      	ldrb	r3, [r7, #11]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d11c      	bne.n	8008002 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	799b      	ldrb	r3, [r3, #6]
 8007fcc:	f003 0310 	and.w	r3, r3, #16
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007fd4:	2305      	movs	r3, #5
 8007fd6:	75fb      	strb	r3, [r7, #23]
 8007fd8:	e014      	b.n	8008004 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe8:	4413      	add	r3, r2
 8007fea:	4619      	mov	r1, r3
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7ff fe42 	bl	8007c76 <ld_clust>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ff8:	e7c0      	b.n	8007f7c <follow_path+0x50>
			if (res != FR_OK) break;
 8007ffa:	bf00      	nop
 8007ffc:	e002      	b.n	8008004 <follow_path+0xd8>
				break;
 8007ffe:	bf00      	nop
 8008000:	e000      	b.n	8008004 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008002:	bf00      	nop
			}
		}
	}

	return res;
 8008004:	7dfb      	ldrb	r3, [r7, #23]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800800e:	b480      	push	{r7}
 8008010:	b087      	sub	sp, #28
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008016:	f04f 33ff 	mov.w	r3, #4294967295
 800801a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d031      	beq.n	8008088 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	617b      	str	r3, [r7, #20]
 800802a:	e002      	b.n	8008032 <get_ldnumber+0x24>
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	3301      	adds	r3, #1
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b20      	cmp	r3, #32
 8008038:	d903      	bls.n	8008042 <get_ldnumber+0x34>
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	2b3a      	cmp	r3, #58	; 0x3a
 8008040:	d1f4      	bne.n	800802c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b3a      	cmp	r3, #58	; 0x3a
 8008048:	d11c      	bne.n	8008084 <get_ldnumber+0x76>
			tp = *path;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	60fa      	str	r2, [r7, #12]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	3b30      	subs	r3, #48	; 0x30
 800805a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2b09      	cmp	r3, #9
 8008060:	d80e      	bhi.n	8008080 <get_ldnumber+0x72>
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	429a      	cmp	r2, r3
 8008068:	d10a      	bne.n	8008080 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d107      	bne.n	8008080 <get_ldnumber+0x72>
					vol = (int)i;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	3301      	adds	r3, #1
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	e002      	b.n	800808a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008084:	2300      	movs	r3, #0
 8008086:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008088:	693b      	ldr	r3, [r7, #16]
}
 800808a:	4618      	mov	r0, r3
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
	...

08008098 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	70da      	strb	r2, [r3, #3]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f04f 32ff 	mov.w	r2, #4294967295
 80080ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff f8d8 	bl	8007268 <move_window>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <check_fs+0x2a>
 80080be:	2304      	movs	r3, #4
 80080c0:	e038      	b.n	8008134 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3330      	adds	r3, #48	; 0x30
 80080c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fe1c 	bl	8006d08 <ld_word>
 80080d0:	4603      	mov	r3, r0
 80080d2:	461a      	mov	r2, r3
 80080d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080d8:	429a      	cmp	r2, r3
 80080da:	d001      	beq.n	80080e0 <check_fs+0x48>
 80080dc:	2303      	movs	r3, #3
 80080de:	e029      	b.n	8008134 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080e6:	2be9      	cmp	r3, #233	; 0xe9
 80080e8:	d009      	beq.n	80080fe <check_fs+0x66>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080f0:	2beb      	cmp	r3, #235	; 0xeb
 80080f2:	d11e      	bne.n	8008132 <check_fs+0x9a>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80080fa:	2b90      	cmp	r3, #144	; 0x90
 80080fc:	d119      	bne.n	8008132 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3330      	adds	r3, #48	; 0x30
 8008102:	3336      	adds	r3, #54	; 0x36
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe fe17 	bl	8006d38 <ld_dword>
 800810a:	4603      	mov	r3, r0
 800810c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008110:	4a0a      	ldr	r2, [pc, #40]	; (800813c <check_fs+0xa4>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d101      	bne.n	800811a <check_fs+0x82>
 8008116:	2300      	movs	r3, #0
 8008118:	e00c      	b.n	8008134 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3330      	adds	r3, #48	; 0x30
 800811e:	3352      	adds	r3, #82	; 0x52
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe fe09 	bl	8006d38 <ld_dword>
 8008126:	4603      	mov	r3, r0
 8008128:	4a05      	ldr	r2, [pc, #20]	; (8008140 <check_fs+0xa8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d101      	bne.n	8008132 <check_fs+0x9a>
 800812e:	2300      	movs	r3, #0
 8008130:	e000      	b.n	8008134 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008132:	2302      	movs	r3, #2
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	00544146 	.word	0x00544146
 8008140:	33544146 	.word	0x33544146

08008144 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b096      	sub	sp, #88	; 0x58
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f7ff ff58 	bl	800800e <get_ldnumber>
 800815e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008162:	2b00      	cmp	r3, #0
 8008164:	da01      	bge.n	800816a <find_volume+0x26>
 8008166:	230b      	movs	r3, #11
 8008168:	e22d      	b.n	80085c6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800816a:	4aa1      	ldr	r2, [pc, #644]	; (80083f0 <find_volume+0x2ac>)
 800816c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008172:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <find_volume+0x3a>
 800817a:	230c      	movs	r3, #12
 800817c:	e223      	b.n	80085c6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008182:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008184:	79fb      	ldrb	r3, [r7, #7]
 8008186:	f023 0301 	bic.w	r3, r3, #1
 800818a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d01a      	beq.n	80081ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008196:	785b      	ldrb	r3, [r3, #1]
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe fd17 	bl	8006bcc <disk_status>
 800819e:	4603      	mov	r3, r0
 80081a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80081a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10c      	bne.n	80081ca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80081b0:	79fb      	ldrb	r3, [r7, #7]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d007      	beq.n	80081c6 <find_volume+0x82>
 80081b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081ba:	f003 0304 	and.w	r3, r3, #4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80081c2:	230a      	movs	r3, #10
 80081c4:	e1ff      	b.n	80085c6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80081c6:	2300      	movs	r3, #0
 80081c8:	e1fd      	b.n	80085c6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80081d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	785b      	ldrb	r3, [r3, #1]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe fd0f 	bl	8006c00 <disk_initialize>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80081e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80081f4:	2303      	movs	r3, #3
 80081f6:	e1e6      	b.n	80085c6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <find_volume+0xca>
 80081fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008202:	f003 0304 	and.w	r3, r3, #4
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800820a:	230a      	movs	r3, #10
 800820c:	e1db      	b.n	80085c6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008212:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008214:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008216:	f7ff ff3f 	bl	8008098 <check_fs>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008224:	2b02      	cmp	r3, #2
 8008226:	d149      	bne.n	80082bc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008228:	2300      	movs	r3, #0
 800822a:	643b      	str	r3, [r7, #64]	; 0x40
 800822c:	e01e      	b.n	800826c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800823c:	4413      	add	r3, r2
 800823e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	3304      	adds	r3, #4
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d006      	beq.n	8008258 <find_volume+0x114>
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	3308      	adds	r3, #8
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fd72 	bl	8006d38 <ld_dword>
 8008254:	4602      	mov	r2, r0
 8008256:	e000      	b.n	800825a <find_volume+0x116>
 8008258:	2200      	movs	r2, #0
 800825a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	3358      	adds	r3, #88	; 0x58
 8008260:	443b      	add	r3, r7
 8008262:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008268:	3301      	adds	r3, #1
 800826a:	643b      	str	r3, [r7, #64]	; 0x40
 800826c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826e:	2b03      	cmp	r3, #3
 8008270:	d9dd      	bls.n	800822e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008272:	2300      	movs	r3, #0
 8008274:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <find_volume+0x13e>
 800827c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827e:	3b01      	subs	r3, #1
 8008280:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	3358      	adds	r3, #88	; 0x58
 8008288:	443b      	add	r3, r7
 800828a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800828e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008292:	2b00      	cmp	r3, #0
 8008294:	d005      	beq.n	80082a2 <find_volume+0x15e>
 8008296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008298:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800829a:	f7ff fefd 	bl	8008098 <check_fs>
 800829e:	4603      	mov	r3, r0
 80082a0:	e000      	b.n	80082a4 <find_volume+0x160>
 80082a2:	2303      	movs	r3, #3
 80082a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80082a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d905      	bls.n	80082bc <find_volume+0x178>
 80082b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b2:	3301      	adds	r3, #1
 80082b4:	643b      	str	r3, [r7, #64]	; 0x40
 80082b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d9e2      	bls.n	8008282 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80082bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d101      	bne.n	80082c8 <find_volume+0x184>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e17e      	b.n	80085c6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80082c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d901      	bls.n	80082d4 <find_volume+0x190>
 80082d0:	230d      	movs	r3, #13
 80082d2:	e178      	b.n	80085c6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	3330      	adds	r3, #48	; 0x30
 80082d8:	330b      	adds	r3, #11
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fd14 	bl	8006d08 <ld_word>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e6:	d001      	beq.n	80082ec <find_volume+0x1a8>
 80082e8:	230d      	movs	r3, #13
 80082ea:	e16c      	b.n	80085c6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	3330      	adds	r3, #48	; 0x30
 80082f0:	3316      	adds	r3, #22
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe fd08 	bl	8006d08 <ld_word>
 80082f8:	4603      	mov	r3, r0
 80082fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80082fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <find_volume+0x1cc>
 8008302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008304:	3330      	adds	r3, #48	; 0x30
 8008306:	3324      	adds	r3, #36	; 0x24
 8008308:	4618      	mov	r0, r3
 800830a:	f7fe fd15 	bl	8006d38 <ld_dword>
 800830e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008314:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008322:	789b      	ldrb	r3, [r3, #2]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d005      	beq.n	8008334 <find_volume+0x1f0>
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	789b      	ldrb	r3, [r3, #2]
 800832c:	2b02      	cmp	r3, #2
 800832e:	d001      	beq.n	8008334 <find_volume+0x1f0>
 8008330:	230d      	movs	r3, #13
 8008332:	e148      	b.n	80085c6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	789b      	ldrb	r3, [r3, #2]
 8008338:	461a      	mov	r2, r3
 800833a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833c:	fb02 f303 	mul.w	r3, r2, r3
 8008340:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008348:	b29a      	uxth	r2, r3
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	895b      	ldrh	r3, [r3, #10]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d008      	beq.n	8008368 <find_volume+0x224>
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	895b      	ldrh	r3, [r3, #10]
 800835a:	461a      	mov	r2, r3
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	895b      	ldrh	r3, [r3, #10]
 8008360:	3b01      	subs	r3, #1
 8008362:	4013      	ands	r3, r2
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <find_volume+0x228>
 8008368:	230d      	movs	r3, #13
 800836a:	e12c      	b.n	80085c6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	3330      	adds	r3, #48	; 0x30
 8008370:	3311      	adds	r3, #17
 8008372:	4618      	mov	r0, r3
 8008374:	f7fe fcc8 	bl	8006d08 <ld_word>
 8008378:	4603      	mov	r3, r0
 800837a:	461a      	mov	r2, r3
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	891b      	ldrh	r3, [r3, #8]
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	b29b      	uxth	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <find_volume+0x24e>
 800838e:	230d      	movs	r3, #13
 8008390:	e119      	b.n	80085c6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	3330      	adds	r3, #48	; 0x30
 8008396:	3313      	adds	r3, #19
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fcb5 	bl	8006d08 <ld_word>
 800839e:	4603      	mov	r3, r0
 80083a0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80083a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d106      	bne.n	80083b6 <find_volume+0x272>
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	3330      	adds	r3, #48	; 0x30
 80083ac:	3320      	adds	r3, #32
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe fcc2 	bl	8006d38 <ld_dword>
 80083b4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	3330      	adds	r3, #48	; 0x30
 80083ba:	330e      	adds	r3, #14
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe fca3 	bl	8006d08 <ld_word>
 80083c2:	4603      	mov	r3, r0
 80083c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80083c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <find_volume+0x28c>
 80083cc:	230d      	movs	r3, #13
 80083ce:	e0fa      	b.n	80085c6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80083d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d4:	4413      	add	r3, r2
 80083d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083d8:	8912      	ldrh	r2, [r2, #8]
 80083da:	0912      	lsrs	r2, r2, #4
 80083dc:	b292      	uxth	r2, r2
 80083de:	4413      	add	r3, r2
 80083e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80083e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d204      	bcs.n	80083f4 <find_volume+0x2b0>
 80083ea:	230d      	movs	r3, #13
 80083ec:	e0eb      	b.n	80085c6 <find_volume+0x482>
 80083ee:	bf00      	nop
 80083f0:	20000710 	.word	0x20000710
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80083f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083fc:	8952      	ldrh	r2, [r2, #10]
 80083fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008402:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <find_volume+0x2ca>
 800840a:	230d      	movs	r3, #13
 800840c:	e0db      	b.n	80085c6 <find_volume+0x482>
		fmt = FS_FAT32;
 800840e:	2303      	movs	r3, #3
 8008410:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800841a:	4293      	cmp	r3, r2
 800841c:	d802      	bhi.n	8008424 <find_volume+0x2e0>
 800841e:	2302      	movs	r3, #2
 8008420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	f640 72f5 	movw	r2, #4085	; 0xff5
 800842a:	4293      	cmp	r3, r2
 800842c:	d802      	bhi.n	8008434 <find_volume+0x2f0>
 800842e:	2301      	movs	r3, #1
 8008430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	1c9a      	adds	r2, r3, #2
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008440:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008442:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008446:	441a      	add	r2, r3
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800844c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	441a      	add	r2, r3
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008456:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800845a:	2b03      	cmp	r3, #3
 800845c:	d11e      	bne.n	800849c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	3330      	adds	r3, #48	; 0x30
 8008462:	332a      	adds	r3, #42	; 0x2a
 8008464:	4618      	mov	r0, r3
 8008466:	f7fe fc4f 	bl	8006d08 <ld_word>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <find_volume+0x330>
 8008470:	230d      	movs	r3, #13
 8008472:	e0a8      	b.n	80085c6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	891b      	ldrh	r3, [r3, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <find_volume+0x33c>
 800847c:	230d      	movs	r3, #13
 800847e:	e0a2      	b.n	80085c6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	3330      	adds	r3, #48	; 0x30
 8008484:	332c      	adds	r3, #44	; 0x2c
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fc56 	bl	8006d38 <ld_dword>
 800848c:	4602      	mov	r2, r0
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	647b      	str	r3, [r7, #68]	; 0x44
 800849a:	e01f      	b.n	80084dc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	891b      	ldrh	r3, [r3, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <find_volume+0x364>
 80084a4:	230d      	movs	r3, #13
 80084a6:	e08e      	b.n	80085c6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	6a1a      	ldr	r2, [r3, #32]
 80084ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ae:	441a      	add	r2, r3
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80084b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d103      	bne.n	80084c4 <find_volume+0x380>
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	e00a      	b.n	80084da <find_volume+0x396>
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	695a      	ldr	r2, [r3, #20]
 80084c8:	4613      	mov	r3, r2
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	4413      	add	r3, r2
 80084ce:	085a      	lsrs	r2, r3, #1
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80084da:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	699a      	ldr	r2, [r3, #24]
 80084e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80084e6:	0a5b      	lsrs	r3, r3, #9
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d201      	bcs.n	80084f0 <find_volume+0x3ac>
 80084ec:	230d      	movs	r3, #13
 80084ee:	e06a      	b.n	80085c6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80084f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295
 80084f6:	611a      	str	r2, [r3, #16]
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	691a      	ldr	r2, [r3, #16]
 80084fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	2280      	movs	r2, #128	; 0x80
 8008504:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008506:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800850a:	2b03      	cmp	r3, #3
 800850c:	d149      	bne.n	80085a2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	3330      	adds	r3, #48	; 0x30
 8008512:	3330      	adds	r3, #48	; 0x30
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe fbf7 	bl	8006d08 <ld_word>
 800851a:	4603      	mov	r3, r0
 800851c:	2b01      	cmp	r3, #1
 800851e:	d140      	bne.n	80085a2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008522:	3301      	adds	r3, #1
 8008524:	4619      	mov	r1, r3
 8008526:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008528:	f7fe fe9e 	bl	8007268 <move_window>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d137      	bne.n	80085a2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	2200      	movs	r2, #0
 8008536:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	3330      	adds	r3, #48	; 0x30
 800853c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008540:	4618      	mov	r0, r3
 8008542:	f7fe fbe1 	bl	8006d08 <ld_word>
 8008546:	4603      	mov	r3, r0
 8008548:	461a      	mov	r2, r3
 800854a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800854e:	429a      	cmp	r2, r3
 8008550:	d127      	bne.n	80085a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	3330      	adds	r3, #48	; 0x30
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe fbee 	bl	8006d38 <ld_dword>
 800855c:	4603      	mov	r3, r0
 800855e:	4a1c      	ldr	r2, [pc, #112]	; (80085d0 <find_volume+0x48c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d11e      	bne.n	80085a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	3330      	adds	r3, #48	; 0x30
 8008568:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800856c:	4618      	mov	r0, r3
 800856e:	f7fe fbe3 	bl	8006d38 <ld_dword>
 8008572:	4603      	mov	r3, r0
 8008574:	4a17      	ldr	r2, [pc, #92]	; (80085d4 <find_volume+0x490>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d113      	bne.n	80085a2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800857a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857c:	3330      	adds	r3, #48	; 0x30
 800857e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fbd8 	bl	8006d38 <ld_dword>
 8008588:	4602      	mov	r2, r0
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	3330      	adds	r3, #48	; 0x30
 8008592:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe fbce 	bl	8006d38 <ld_dword>
 800859c:	4602      	mov	r2, r0
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80085a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80085a8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80085aa:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <find_volume+0x494>)
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	3301      	adds	r3, #1
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <find_volume+0x494>)
 80085b4:	801a      	strh	r2, [r3, #0]
 80085b6:	4b08      	ldr	r3, [pc, #32]	; (80085d8 <find_volume+0x494>)
 80085b8:	881a      	ldrh	r2, [r3, #0]
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80085be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085c0:	f7fe fdea 	bl	8007198 <clear_lock>
#endif
	return FR_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3758      	adds	r7, #88	; 0x58
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	41615252 	.word	0x41615252
 80085d4:	61417272 	.word	0x61417272
 80085d8:	20000714 	.word	0x20000714

080085dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80085e6:	2309      	movs	r3, #9
 80085e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01c      	beq.n	800862a <validate+0x4e>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d018      	beq.n	800862a <validate+0x4e>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d013      	beq.n	800862a <validate+0x4e>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	889a      	ldrh	r2, [r3, #4]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	88db      	ldrh	r3, [r3, #6]
 800860c:	429a      	cmp	r2, r3
 800860e:	d10c      	bne.n	800862a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fad8 	bl	8006bcc <disk_status>
 800861c:	4603      	mov	r3, r0
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <validate+0x4e>
			res = FR_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d102      	bne.n	8008636 <validate+0x5a>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	e000      	b.n	8008638 <validate+0x5c>
 8008636:	2300      	movs	r3, #0
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	6013      	str	r3, [r2, #0]
	return res;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800865a:	f107 0310 	add.w	r3, r7, #16
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fcd5 	bl	800800e <get_ldnumber>
 8008664:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	2b00      	cmp	r3, #0
 800866a:	da01      	bge.n	8008670 <f_mount+0x28>
 800866c:	230b      	movs	r3, #11
 800866e:	e02b      	b.n	80086c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008670:	4a17      	ldr	r2, [pc, #92]	; (80086d0 <f_mount+0x88>)
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008678:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008680:	69b8      	ldr	r0, [r7, #24]
 8008682:	f7fe fd89 	bl	8007198 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	490d      	ldr	r1, [pc, #52]	; (80086d0 <f_mount+0x88>)
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <f_mount+0x66>
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d001      	beq.n	80086b2 <f_mount+0x6a>
 80086ae:	2300      	movs	r3, #0
 80086b0:	e00a      	b.n	80086c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80086b2:	f107 010c 	add.w	r1, r7, #12
 80086b6:	f107 0308 	add.w	r3, r7, #8
 80086ba:	2200      	movs	r2, #0
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff fd41 	bl	8008144 <find_volume>
 80086c2:	4603      	mov	r3, r0
 80086c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3720      	adds	r7, #32
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	20000710 	.word	0x20000710

080086d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b098      	sub	sp, #96	; 0x60
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	4613      	mov	r3, r2
 80086e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <f_open+0x18>
 80086e8:	2309      	movs	r3, #9
 80086ea:	e1ad      	b.n	8008a48 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80086ec:	79fb      	ldrb	r3, [r7, #7]
 80086ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80086f4:	79fa      	ldrb	r2, [r7, #7]
 80086f6:	f107 0110 	add.w	r1, r7, #16
 80086fa:	f107 0308 	add.w	r3, r7, #8
 80086fe:	4618      	mov	r0, r3
 8008700:	f7ff fd20 	bl	8008144 <find_volume>
 8008704:	4603      	mov	r3, r0
 8008706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800870a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800870e:	2b00      	cmp	r3, #0
 8008710:	f040 8191 	bne.w	8008a36 <f_open+0x362>
		dj.obj.fs = fs;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	f107 0314 	add.w	r3, r7, #20
 800871e:	4611      	mov	r1, r2
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff fc03 	bl	8007f2c <follow_path>
 8008726:	4603      	mov	r3, r0
 8008728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800872c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008730:	2b00      	cmp	r3, #0
 8008732:	d11a      	bne.n	800876a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008734:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008738:	b25b      	sxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	da03      	bge.n	8008746 <f_open+0x72>
				res = FR_INVALID_NAME;
 800873e:	2306      	movs	r3, #6
 8008740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008744:	e011      	b.n	800876a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	f023 0301 	bic.w	r3, r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	bf14      	ite	ne
 8008750:	2301      	movne	r3, #1
 8008752:	2300      	moveq	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	f107 0314 	add.w	r3, r7, #20
 800875c:	4611      	mov	r1, r2
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fbd2 	bl	8006f08 <chk_lock>
 8008764:	4603      	mov	r3, r0
 8008766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	f003 031c 	and.w	r3, r3, #28
 8008770:	2b00      	cmp	r3, #0
 8008772:	d07f      	beq.n	8008874 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008778:	2b00      	cmp	r3, #0
 800877a:	d017      	beq.n	80087ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800877c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008780:	2b04      	cmp	r3, #4
 8008782:	d10e      	bne.n	80087a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008784:	f7fe fc1c 	bl	8006fc0 <enq_lock>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d006      	beq.n	800879c <f_open+0xc8>
 800878e:	f107 0314 	add.w	r3, r7, #20
 8008792:	4618      	mov	r0, r3
 8008794:	f7ff fb03 	bl	8007d9e <dir_register>
 8008798:	4603      	mov	r3, r0
 800879a:	e000      	b.n	800879e <f_open+0xca>
 800879c:	2312      	movs	r3, #18
 800879e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	f043 0308 	orr.w	r3, r3, #8
 80087a8:	71fb      	strb	r3, [r7, #7]
 80087aa:	e010      	b.n	80087ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80087ac:	7ebb      	ldrb	r3, [r7, #26]
 80087ae:	f003 0311 	and.w	r3, r3, #17
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <f_open+0xea>
					res = FR_DENIED;
 80087b6:	2307      	movs	r3, #7
 80087b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80087bc:	e007      	b.n	80087ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <f_open+0xfa>
 80087c8:	2308      	movs	r3, #8
 80087ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80087ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d168      	bne.n	80088a8 <f_open+0x1d4>
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	f003 0308 	and.w	r3, r3, #8
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d063      	beq.n	80088a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80087e0:	f7fe f992 	bl	8006b08 <get_fattime>
 80087e4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80087e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e8:	330e      	adds	r3, #14
 80087ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fae1 	bl	8006db4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80087f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f4:	3316      	adds	r3, #22
 80087f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe fadb 	bl	8006db4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80087fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008800:	330b      	adds	r3, #11
 8008802:	2220      	movs	r2, #32
 8008804:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800880a:	4611      	mov	r1, r2
 800880c:	4618      	mov	r0, r3
 800880e:	f7ff fa32 	bl	8007c76 <ld_clust>
 8008812:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008818:	2200      	movs	r2, #0
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff fa4a 	bl	8007cb4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008822:	331c      	adds	r3, #28
 8008824:	2100      	movs	r1, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fac4 	bl	8006db4 <st_dword>
					fs->wflag = 1;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2201      	movs	r2, #1
 8008830:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d037      	beq.n	80088a8 <f_open+0x1d4>
						dw = fs->winsect;
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800883e:	f107 0314 	add.w	r3, r7, #20
 8008842:	2200      	movs	r2, #0
 8008844:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe ff5d 	bl	8007706 <remove_chain>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008856:	2b00      	cmp	r3, #0
 8008858:	d126      	bne.n	80088a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fd02 	bl	8007268 <move_window>
 8008864:	4603      	mov	r3, r0
 8008866:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800886e:	3a01      	subs	r2, #1
 8008870:	60da      	str	r2, [r3, #12]
 8008872:	e019      	b.n	80088a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008878:	2b00      	cmp	r3, #0
 800887a:	d115      	bne.n	80088a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800887c:	7ebb      	ldrb	r3, [r7, #26]
 800887e:	f003 0310 	and.w	r3, r3, #16
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008886:	2304      	movs	r3, #4
 8008888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800888c:	e00c      	b.n	80088a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d007      	beq.n	80088a8 <f_open+0x1d4>
 8008898:	7ebb      	ldrb	r3, [r7, #26]
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d002      	beq.n	80088a8 <f_open+0x1d4>
						res = FR_DENIED;
 80088a2:	2307      	movs	r3, #7
 80088a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80088a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d128      	bne.n	8008902 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80088ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	f023 0301 	bic.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	bf14      	ite	ne
 80088da:	2301      	movne	r3, #1
 80088dc:	2300      	moveq	r3, #0
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	f107 0314 	add.w	r3, r7, #20
 80088e6:	4611      	mov	r1, r2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fe fb8b 	bl	8007004 <inc_lock>
 80088ee:	4602      	mov	r2, r0
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <f_open+0x22e>
 80088fc:	2302      	movs	r3, #2
 80088fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008906:	2b00      	cmp	r3, #0
 8008908:	f040 8095 	bne.w	8008a36 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008910:	4611      	mov	r1, r2
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff f9af 	bl	8007c76 <ld_clust>
 8008918:	4602      	mov	r2, r0
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800891e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008920:	331c      	adds	r3, #28
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fa08 	bl	8006d38 <ld_dword>
 8008928:	4602      	mov	r2, r0
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	88da      	ldrh	r2, [r3, #6]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	79fa      	ldrb	r2, [r7, #7]
 8008946:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3330      	adds	r3, #48	; 0x30
 800895e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008962:	2100      	movs	r1, #0
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe fa72 	bl	8006e4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	f003 0320 	and.w	r3, r3, #32
 8008970:	2b00      	cmp	r3, #0
 8008972:	d060      	beq.n	8008a36 <f_open+0x362>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d05c      	beq.n	8008a36 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	895b      	ldrh	r3, [r3, #10]
 8008988:	025b      	lsls	r3, r3, #9
 800898a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	657b      	str	r3, [r7, #84]	; 0x54
 8008998:	e016      	b.n	80089c8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fd1d 	bl	80073de <get_fat>
 80089a4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80089a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d802      	bhi.n	80089b2 <f_open+0x2de>
 80089ac:	2302      	movs	r3, #2
 80089ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80089b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b8:	d102      	bne.n	80089c0 <f_open+0x2ec>
 80089ba:	2301      	movs	r3, #1
 80089bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80089c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	657b      	str	r3, [r7, #84]	; 0x54
 80089c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d103      	bne.n	80089d8 <f_open+0x304>
 80089d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d8e0      	bhi.n	800899a <f_open+0x2c6>
				}
				fp->clust = clst;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80089de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d127      	bne.n	8008a36 <f_open+0x362>
 80089e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d022      	beq.n	8008a36 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fcd3 	bl	80073a0 <clust2sect>
 80089fa:	6478      	str	r0, [r7, #68]	; 0x44
 80089fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d103      	bne.n	8008a0a <f_open+0x336>
						res = FR_INT_ERR;
 8008a02:	2302      	movs	r3, #2
 8008a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a08:	e015      	b.n	8008a36 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a0c:	0a5a      	lsrs	r2, r3, #9
 8008a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a10:	441a      	add	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	7858      	ldrb	r0, [r3, #1]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a1a      	ldr	r2, [r3, #32]
 8008a24:	2301      	movs	r3, #1
 8008a26:	f7fe f911 	bl	8006c4c <disk_read>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <f_open+0x362>
 8008a30:	2301      	movs	r3, #1
 8008a32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <f_open+0x370>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3760      	adds	r7, #96	; 0x60
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08c      	sub	sp, #48	; 0x30
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f107 0210 	add.w	r2, r7, #16
 8008a6e:	4611      	mov	r1, r2
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff fdb3 	bl	80085dc <validate>
 8008a76:	4603      	mov	r3, r0
 8008a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d107      	bne.n	8008a94 <f_write+0x44>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	7d5b      	ldrb	r3, [r3, #21]
 8008a88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <f_write+0x4a>
 8008a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a98:	e14b      	b.n	8008d32 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	7d1b      	ldrb	r3, [r3, #20]
 8008a9e:	f003 0302 	and.w	r3, r3, #2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <f_write+0x5a>
 8008aa6:	2307      	movs	r3, #7
 8008aa8:	e143      	b.n	8008d32 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	699a      	ldr	r2, [r3, #24]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	441a      	add	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	f080 812d 	bcs.w	8008d16 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	43db      	mvns	r3, r3
 8008ac2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008ac4:	e127      	b.n	8008d16 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f040 80e3 	bne.w	8008c9a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	0a5b      	lsrs	r3, r3, #9
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	8952      	ldrh	r2, [r2, #10]
 8008ade:	3a01      	subs	r2, #1
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d143      	bne.n	8008b72 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10c      	bne.n	8008b0c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d11a      	bne.n	8008b34 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2100      	movs	r1, #0
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fe fe64 	bl	80077d0 <create_chain>
 8008b08:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b0a:	e013      	b.n	8008b34 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d007      	beq.n	8008b24 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f7fe fef0 	bl	8007900 <clmt_clust>
 8008b20:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b22:	e007      	b.n	8008b34 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	f7fe fe4f 	bl	80077d0 <create_chain>
 8008b32:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 80f2 	beq.w	8008d20 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d104      	bne.n	8008b4c <f_write+0xfc>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2202      	movs	r2, #2
 8008b46:	755a      	strb	r2, [r3, #21]
 8008b48:	2302      	movs	r3, #2
 8008b4a:	e0f2      	b.n	8008d32 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b52:	d104      	bne.n	8008b5e <f_write+0x10e>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	755a      	strb	r2, [r3, #21]
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e0e9      	b.n	8008d32 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b62:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d102      	bne.n	8008b72 <f_write+0x122>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b70:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	7d1b      	ldrb	r3, [r3, #20]
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	da18      	bge.n	8008bae <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	7858      	ldrb	r0, [r3, #1]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a1a      	ldr	r2, [r3, #32]
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	f7fe f87e 	bl	8006c8c <disk_write>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d004      	beq.n	8008ba0 <f_write+0x150>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	755a      	strb	r2, [r3, #21]
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e0c8      	b.n	8008d32 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	7d1b      	ldrb	r3, [r3, #20]
 8008ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f7fe fbf2 	bl	80073a0 <clust2sect>
 8008bbc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d104      	bne.n	8008bce <f_write+0x17e>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	755a      	strb	r2, [r3, #21]
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e0b1      	b.n	8008d32 <f_write+0x2e2>
			sect += csect;
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	0a5b      	lsrs	r3, r3, #9
 8008bda:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d03c      	beq.n	8008c5c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	4413      	add	r3, r2
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	8952      	ldrh	r2, [r2, #10]
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d905      	bls.n	8008bfc <f_write+0x1ac>
					cc = fs->csize - csect;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	895b      	ldrh	r3, [r3, #10]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	7858      	ldrb	r0, [r3, #1]
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	69f9      	ldr	r1, [r7, #28]
 8008c06:	f7fe f841 	bl	8006c8c <disk_write>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d004      	beq.n	8008c1a <f_write+0x1ca>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	755a      	strb	r2, [r3, #21]
 8008c16:	2301      	movs	r3, #1
 8008c18:	e08b      	b.n	8008d32 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a1a      	ldr	r2, [r3, #32]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	6a3a      	ldr	r2, [r7, #32]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d915      	bls.n	8008c54 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6a1a      	ldr	r2, [r3, #32]
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	025b      	lsls	r3, r3, #9
 8008c38:	69fa      	ldr	r2, [r7, #28]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c40:	4619      	mov	r1, r3
 8008c42:	f7fe f8e3 	bl	8006e0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	7d1b      	ldrb	r3, [r3, #20]
 8008c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	025b      	lsls	r3, r3, #9
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008c5a:	e03f      	b.n	8008cdc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d016      	beq.n	8008c94 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	699a      	ldr	r2, [r3, #24]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d210      	bcs.n	8008c94 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	7858      	ldrb	r0, [r3, #1]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	f7fd ffe4 	bl	8006c4c <disk_read>
 8008c84:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d004      	beq.n	8008c94 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	755a      	strb	r2, [r3, #21]
 8008c90:	2301      	movs	r3, #1
 8008c92:	e04e      	b.n	8008d32 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008ca6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d901      	bls.n	8008cb4 <f_write+0x264>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc2:	4413      	add	r3, r2
 8008cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc6:	69f9      	ldr	r1, [r7, #28]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fe f89f 	bl	8006e0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	7d1b      	ldrb	r3, [r3, #20]
 8008cd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	4413      	add	r3, r2
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	699a      	ldr	r2, [r3, #24]
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	441a      	add	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	619a      	str	r2, [r3, #24]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	68da      	ldr	r2, [r3, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	bf38      	it	cc
 8008cfc:	461a      	movcc	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	60da      	str	r2, [r3, #12]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	441a      	add	r2, r3
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f47f aed4 	bne.w	8008ac6 <f_write+0x76>
 8008d1e:	e000      	b.n	8008d22 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d20:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	7d1b      	ldrb	r3, [r3, #20]
 8008d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3730      	adds	r7, #48	; 0x30
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b086      	sub	sp, #24
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f107 0208 	add.w	r2, r7, #8
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff fc46 	bl	80085dc <validate>
 8008d50:	4603      	mov	r3, r0
 8008d52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d168      	bne.n	8008e2c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	7d1b      	ldrb	r3, [r3, #20]
 8008d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d062      	beq.n	8008e2c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7d1b      	ldrb	r3, [r3, #20]
 8008d6a:	b25b      	sxtb	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	da15      	bge.n	8008d9c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	7858      	ldrb	r0, [r3, #1]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1a      	ldr	r2, [r3, #32]
 8008d7e:	2301      	movs	r3, #1
 8008d80:	f7fd ff84 	bl	8006c8c <disk_write>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <f_sync+0x54>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e04f      	b.n	8008e2e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	7d1b      	ldrb	r3, [r3, #20]
 8008d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008d9c:	f7fd feb4 	bl	8006b08 <get_fattime>
 8008da0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	4619      	mov	r1, r3
 8008daa:	4610      	mov	r0, r2
 8008dac:	f7fe fa5c 	bl	8007268 <move_window>
 8008db0:	4603      	mov	r3, r0
 8008db2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d138      	bne.n	8008e2c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	330b      	adds	r3, #11
 8008dc4:	781a      	ldrb	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	330b      	adds	r3, #11
 8008dca:	f042 0220 	orr.w	r2, r2, #32
 8008dce:	b2d2      	uxtb	r2, r2
 8008dd0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6818      	ldr	r0, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	68f9      	ldr	r1, [r7, #12]
 8008dde:	f7fe ff69 	bl	8007cb4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f103 021c 	add.w	r2, r3, #28
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7fd ffe0 	bl	8006db4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3316      	adds	r3, #22
 8008df8:	6939      	ldr	r1, [r7, #16]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fd ffda 	bl	8006db4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3312      	adds	r3, #18
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fd ffb9 	bl	8006d7e <st_word>
					fs->wflag = 1;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe fa55 	bl	80072c4 <sync_fs>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	7d1b      	ldrb	r3, [r3, #20]
 8008e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff ff7b 	bl	8008d3a <f_sync>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d118      	bne.n	8008e80 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f107 0208 	add.w	r2, r7, #8
 8008e54:	4611      	mov	r1, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7ff fbc0 	bl	80085dc <validate>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10c      	bne.n	8008e80 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe f958 	bl	8007120 <dec_lock>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d102      	bne.n	8008e80 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	2b0a      	cmp	r3, #10
 8008e9a:	d103      	bne.n	8008ea4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008e9c:	210d      	movs	r1, #13
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff fff3 	bl	8008e8a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	db25      	blt.n	8008efc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	60fa      	str	r2, [r7, #12]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	4413      	add	r3, r2
 8008eba:	78fa      	ldrb	r2, [r7, #3]
 8008ebc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b3c      	cmp	r3, #60	; 0x3c
 8008ec2:	dd12      	ble.n	8008eea <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6818      	ldr	r0, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f103 010c 	add.w	r1, r3, #12
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	f107 0308 	add.w	r3, r7, #8
 8008ed4:	f7ff fdbc 	bl	8008a50 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d101      	bne.n	8008ee4 <putc_bfd+0x5a>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	e001      	b.n	8008ee8 <putc_bfd+0x5e>
 8008ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	609a      	str	r2, [r3, #8]
 8008efa:	e000      	b.n	8008efe <putc_bfd+0x74>
	if (i < 0) return;
 8008efc:	bf00      	nop
}
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	db16      	blt.n	8008f42 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f103 010c 	add.w	r1, r3, #12
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f107 030c 	add.w	r3, r7, #12
 8008f28:	f7ff fd92 	bl	8008a50 <f_write>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d107      	bne.n	8008f42 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d102      	bne.n	8008f42 <putc_flush+0x3e>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	e001      	b.n	8008f46 <putc_flush+0x42>
	return EOF;
 8008f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b083      	sub	sp, #12
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	605a      	str	r2, [r3, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	609a      	str	r2, [r3, #8]
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008f78:	b40e      	push	{r1, r2, r3}
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b0a7      	sub	sp, #156	; 0x9c
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8008f82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7ff ffe0 	bl	8008f4e <putc_init>

	va_start(arp, fmt);
 8008f8e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008f92:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8008f94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8008fa4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 81f2 	beq.w	8009392 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8008fae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008fb2:	2b25      	cmp	r3, #37	; 0x25
 8008fb4:	d008      	beq.n	8008fc8 <f_printf+0x50>
			putc_bfd(&pb, c);
 8008fb6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7ff ff62 	bl	8008e8a <putc_bfd>
			continue;
 8008fc6:	e1e3      	b.n	8009390 <f_printf+0x418>
		}
		w = f = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8008fd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fd8:	1c5a      	adds	r2, r3, #1
 8008fda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8008fe4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008fe8:	2b30      	cmp	r3, #48	; 0x30
 8008fea:	d10b      	bne.n	8009004 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8008fec:	2301      	movs	r3, #1
 8008fee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8009002:	e024      	b.n	800904e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8009004:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009008:	2b2d      	cmp	r3, #45	; 0x2d
 800900a:	d120      	bne.n	800904e <f_printf+0xd6>
				f = 2; c = *fmt++;
 800900c:	2302      	movs	r3, #2
 800900e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009012:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8009022:	e014      	b.n	800904e <f_printf+0xd6>
			w = w * 10 + c - '0';
 8009024:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	005b      	lsls	r3, r3, #1
 8009030:	461a      	mov	r2, r3
 8009032:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009036:	4413      	add	r3, r2
 8009038:	3b30      	subs	r3, #48	; 0x30
 800903a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800903e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009042:	1c5a      	adds	r2, r3, #1
 8009044:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800904e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009052:	2b2f      	cmp	r3, #47	; 0x2f
 8009054:	d903      	bls.n	800905e <f_printf+0xe6>
 8009056:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800905a:	2b39      	cmp	r3, #57	; 0x39
 800905c:	d9e2      	bls.n	8009024 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800905e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009062:	2b6c      	cmp	r3, #108	; 0x6c
 8009064:	d003      	beq.n	800906e <f_printf+0xf6>
 8009066:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800906a:	2b4c      	cmp	r3, #76	; 0x4c
 800906c:	d10d      	bne.n	800908a <f_printf+0x112>
			f |= 4; c = *fmt++;
 800906e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009072:	f043 0304 	orr.w	r3, r3, #4
 8009076:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800907a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800907e:	1c5a      	adds	r2, r3, #1
 8009080:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800908a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 8181 	beq.w	8009396 <f_printf+0x41e>
		d = c;
 8009094:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009098:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800909c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80090a0:	2b60      	cmp	r3, #96	; 0x60
 80090a2:	d908      	bls.n	80090b6 <f_printf+0x13e>
 80090a4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80090a8:	2b7a      	cmp	r3, #122	; 0x7a
 80090aa:	d804      	bhi.n	80090b6 <f_printf+0x13e>
 80090ac:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80090b0:	3b20      	subs	r3, #32
 80090b2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80090b6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80090ba:	3b42      	subs	r3, #66	; 0x42
 80090bc:	2b16      	cmp	r3, #22
 80090be:	f200 8098 	bhi.w	80091f2 <f_printf+0x27a>
 80090c2:	a201      	add	r2, pc, #4	; (adr r2, 80090c8 <f_printf+0x150>)
 80090c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c8:	080091d3 	.word	0x080091d3
 80090cc:	080091bb 	.word	0x080091bb
 80090d0:	080091e3 	.word	0x080091e3
 80090d4:	080091f3 	.word	0x080091f3
 80090d8:	080091f3 	.word	0x080091f3
 80090dc:	080091f3 	.word	0x080091f3
 80090e0:	080091f3 	.word	0x080091f3
 80090e4:	080091f3 	.word	0x080091f3
 80090e8:	080091f3 	.word	0x080091f3
 80090ec:	080091f3 	.word	0x080091f3
 80090f0:	080091f3 	.word	0x080091f3
 80090f4:	080091f3 	.word	0x080091f3
 80090f8:	080091f3 	.word	0x080091f3
 80090fc:	080091db 	.word	0x080091db
 8009100:	080091f3 	.word	0x080091f3
 8009104:	080091f3 	.word	0x080091f3
 8009108:	080091f3 	.word	0x080091f3
 800910c:	08009125 	.word	0x08009125
 8009110:	080091f3 	.word	0x080091f3
 8009114:	080091e3 	.word	0x080091e3
 8009118:	080091f3 	.word	0x080091f3
 800911c:	080091f3 	.word	0x080091f3
 8009120:	080091eb 	.word	0x080091eb
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8009124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009126:	1d1a      	adds	r2, r3, #4
 8009128:	67ba      	str	r2, [r7, #120]	; 0x78
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800912e:	2300      	movs	r3, #0
 8009130:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009134:	e004      	b.n	8009140 <f_printf+0x1c8>
 8009136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800913a:	3301      	adds	r3, #1
 800913c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009140:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009146:	4413      	add	r3, r2
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1f3      	bne.n	8009136 <f_printf+0x1be>
			if (!(f & 2)) {
 800914e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b00      	cmp	r3, #0
 8009158:	d11a      	bne.n	8009190 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800915a:	e005      	b.n	8009168 <f_printf+0x1f0>
 800915c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009160:	2120      	movs	r1, #32
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff fe91 	bl	8008e8a <putc_bfd>
 8009168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009172:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009176:	429a      	cmp	r2, r3
 8009178:	d8f0      	bhi.n	800915c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800917a:	e009      	b.n	8009190 <f_printf+0x218>
 800917c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009182:	781a      	ldrb	r2, [r3, #0]
 8009184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009188:	4611      	mov	r1, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff fe7d 	bl	8008e8a <putc_bfd>
 8009190:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1f1      	bne.n	800917c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8009198:	e005      	b.n	80091a6 <f_printf+0x22e>
 800919a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800919e:	2120      	movs	r1, #32
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff fe72 	bl	8008e8a <putc_bfd>
 80091a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80091b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d8f0      	bhi.n	800919a <f_printf+0x222>
			continue;
 80091b8:	e0ea      	b.n	8009390 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80091ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091bc:	1d1a      	adds	r2, r3, #4
 80091be:	67ba      	str	r2, [r7, #120]	; 0x78
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff fe5d 	bl	8008e8a <putc_bfd>
 80091d0:	e0de      	b.n	8009390 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80091d2:	2302      	movs	r3, #2
 80091d4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80091d8:	e014      	b.n	8009204 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80091da:	2308      	movs	r3, #8
 80091dc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80091e0:	e010      	b.n	8009204 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80091e2:	230a      	movs	r3, #10
 80091e4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80091e8:	e00c      	b.n	8009204 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80091ea:	2310      	movs	r3, #16
 80091ec:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80091f0:	e008      	b.n	8009204 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80091f2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80091f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff fe44 	bl	8008e8a <putc_bfd>
 8009202:	e0c5      	b.n	8009390 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8009204:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009208:	f003 0304 	and.w	r3, r3, #4
 800920c:	2b00      	cmp	r3, #0
 800920e:	d004      	beq.n	800921a <f_printf+0x2a2>
 8009210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009212:	1d1a      	adds	r2, r3, #4
 8009214:	67ba      	str	r2, [r7, #120]	; 0x78
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	e00c      	b.n	8009234 <f_printf+0x2bc>
 800921a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800921e:	2b44      	cmp	r3, #68	; 0x44
 8009220:	d104      	bne.n	800922c <f_printf+0x2b4>
 8009222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009224:	1d1a      	adds	r2, r3, #4
 8009226:	67ba      	str	r2, [r7, #120]	; 0x78
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	e003      	b.n	8009234 <f_printf+0x2bc>
 800922c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800922e:	1d1a      	adds	r2, r3, #4
 8009230:	67ba      	str	r2, [r7, #120]	; 0x78
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8009238:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800923c:	2b44      	cmp	r3, #68	; 0x44
 800923e:	d10e      	bne.n	800925e <f_printf+0x2e6>
 8009240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009244:	2b00      	cmp	r3, #0
 8009246:	da0a      	bge.n	800925e <f_printf+0x2e6>
			v = 0 - v;
 8009248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800924c:	425b      	negs	r3, r3
 800924e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8009252:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009256:	f043 0308 	orr.w	r3, r3, #8
 800925a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8009264:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8009268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800926c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009270:	fb01 f202 	mul.w	r2, r1, r2
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800927a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800927e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009282:	fbb2 f3f3 	udiv	r3, r2, r3
 8009286:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800928a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800928e:	2b09      	cmp	r3, #9
 8009290:	d90b      	bls.n	80092aa <f_printf+0x332>
 8009292:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009296:	2b78      	cmp	r3, #120	; 0x78
 8009298:	d101      	bne.n	800929e <f_printf+0x326>
 800929a:	2227      	movs	r2, #39	; 0x27
 800929c:	e000      	b.n	80092a0 <f_printf+0x328>
 800929e:	2207      	movs	r2, #7
 80092a0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80092a4:	4413      	add	r3, r2
 80092a6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80092aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80092b4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80092b8:	3230      	adds	r2, #48	; 0x30
 80092ba:	b2d2      	uxtb	r2, r2
 80092bc:	3398      	adds	r3, #152	; 0x98
 80092be:	443b      	add	r3, r7
 80092c0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80092c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <f_printf+0x35c>
 80092cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092d0:	2b1f      	cmp	r3, #31
 80092d2:	d9c7      	bls.n	8009264 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80092d4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80092d8:	f003 0308 	and.w	r3, r3, #8
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d009      	beq.n	80092f4 <f_printf+0x37c>
 80092e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80092ea:	3398      	adds	r3, #152	; 0x98
 80092ec:	443b      	add	r3, r7
 80092ee:	222d      	movs	r2, #45	; 0x2d
 80092f0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80092f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <f_printf+0x394>
 8009308:	2330      	movs	r3, #48	; 0x30
 800930a:	e000      	b.n	800930e <f_printf+0x396>
 800930c:	2320      	movs	r3, #32
 800930e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8009312:	e007      	b.n	8009324 <f_printf+0x3ac>
 8009314:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff fdb3 	bl	8008e8a <putc_bfd>
 8009324:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d108      	bne.n	8009342 <f_printf+0x3ca>
 8009330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800933a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800933e:	429a      	cmp	r2, r3
 8009340:	d8e8      	bhi.n	8009314 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8009342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009346:	3b01      	subs	r3, #1
 8009348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800934c:	f107 020c 	add.w	r2, r7, #12
 8009350:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009354:	4413      	add	r3, r2
 8009356:	781a      	ldrb	r2, [r3, #0]
 8009358:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800935c:	4611      	mov	r1, r2
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff fd93 	bl	8008e8a <putc_bfd>
		} while (i);
 8009364:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1ea      	bne.n	8009342 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800936c:	e007      	b.n	800937e <f_printf+0x406>
 800936e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff fd86 	bl	8008e8a <putc_bfd>
 800937e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009388:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800938c:	429a      	cmp	r2, r3
 800938e:	d8ee      	bhi.n	800936e <f_printf+0x3f6>
		c = *fmt++;
 8009390:	e600      	b.n	8008f94 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8009392:	bf00      	nop
 8009394:	e000      	b.n	8009398 <f_printf+0x420>
		if (!c) break;
 8009396:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8009398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff fdb1 	bl	8008f04 <putc_flush>
 80093a2:	4603      	mov	r3, r0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	379c      	adds	r7, #156	; 0x9c
 80093a8:	46bd      	mov	sp, r7
 80093aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093ae:	b003      	add	sp, #12
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop

080093b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	4613      	mov	r3, r2
 80093c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80093c2:	2301      	movs	r3, #1
 80093c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80093ca:	4b1f      	ldr	r3, [pc, #124]	; (8009448 <FATFS_LinkDriverEx+0x94>)
 80093cc:	7a5b      	ldrb	r3, [r3, #9]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d131      	bne.n	8009438 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80093d4:	4b1c      	ldr	r3, [pc, #112]	; (8009448 <FATFS_LinkDriverEx+0x94>)
 80093d6:	7a5b      	ldrb	r3, [r3, #9]
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	461a      	mov	r2, r3
 80093dc:	4b1a      	ldr	r3, [pc, #104]	; (8009448 <FATFS_LinkDriverEx+0x94>)
 80093de:	2100      	movs	r1, #0
 80093e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80093e2:	4b19      	ldr	r3, [pc, #100]	; (8009448 <FATFS_LinkDriverEx+0x94>)
 80093e4:	7a5b      	ldrb	r3, [r3, #9]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	4a17      	ldr	r2, [pc, #92]	; (8009448 <FATFS_LinkDriverEx+0x94>)
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80093f2:	4b15      	ldr	r3, [pc, #84]	; (8009448 <FATFS_LinkDriverEx+0x94>)
 80093f4:	7a5b      	ldrb	r3, [r3, #9]
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	461a      	mov	r2, r3
 80093fa:	4b13      	ldr	r3, [pc, #76]	; (8009448 <FATFS_LinkDriverEx+0x94>)
 80093fc:	4413      	add	r3, r2
 80093fe:	79fa      	ldrb	r2, [r7, #7]
 8009400:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009402:	4b11      	ldr	r3, [pc, #68]	; (8009448 <FATFS_LinkDriverEx+0x94>)
 8009404:	7a5b      	ldrb	r3, [r3, #9]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	b2d1      	uxtb	r1, r2
 800940c:	4a0e      	ldr	r2, [pc, #56]	; (8009448 <FATFS_LinkDriverEx+0x94>)
 800940e:	7251      	strb	r1, [r2, #9]
 8009410:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009412:	7dbb      	ldrb	r3, [r7, #22]
 8009414:	3330      	adds	r3, #48	; 0x30
 8009416:	b2da      	uxtb	r2, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	3301      	adds	r3, #1
 8009420:	223a      	movs	r2, #58	; 0x3a
 8009422:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	3302      	adds	r3, #2
 8009428:	222f      	movs	r2, #47	; 0x2f
 800942a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	3303      	adds	r3, #3
 8009430:	2200      	movs	r2, #0
 8009432:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009438:	7dfb      	ldrb	r3, [r7, #23]
}
 800943a:	4618      	mov	r0, r3
 800943c:	371c      	adds	r7, #28
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	20000738 	.word	0x20000738

0800944c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009456:	2200      	movs	r2, #0
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff ffaa 	bl	80093b4 <FATFS_LinkDriverEx>
 8009460:	4603      	mov	r3, r0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
	...

0800946c <__errno>:
 800946c:	4b01      	ldr	r3, [pc, #4]	; (8009474 <__errno+0x8>)
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	20000024 	.word	0x20000024

08009478 <__libc_init_array>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	4d0d      	ldr	r5, [pc, #52]	; (80094b0 <__libc_init_array+0x38>)
 800947c:	4c0d      	ldr	r4, [pc, #52]	; (80094b4 <__libc_init_array+0x3c>)
 800947e:	1b64      	subs	r4, r4, r5
 8009480:	10a4      	asrs	r4, r4, #2
 8009482:	2600      	movs	r6, #0
 8009484:	42a6      	cmp	r6, r4
 8009486:	d109      	bne.n	800949c <__libc_init_array+0x24>
 8009488:	4d0b      	ldr	r5, [pc, #44]	; (80094b8 <__libc_init_array+0x40>)
 800948a:	4c0c      	ldr	r4, [pc, #48]	; (80094bc <__libc_init_array+0x44>)
 800948c:	f000 ff3a 	bl	800a304 <_init>
 8009490:	1b64      	subs	r4, r4, r5
 8009492:	10a4      	asrs	r4, r4, #2
 8009494:	2600      	movs	r6, #0
 8009496:	42a6      	cmp	r6, r4
 8009498:	d105      	bne.n	80094a6 <__libc_init_array+0x2e>
 800949a:	bd70      	pop	{r4, r5, r6, pc}
 800949c:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a0:	4798      	blx	r3
 80094a2:	3601      	adds	r6, #1
 80094a4:	e7ee      	b.n	8009484 <__libc_init_array+0xc>
 80094a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094aa:	4798      	blx	r3
 80094ac:	3601      	adds	r6, #1
 80094ae:	e7f2      	b.n	8009496 <__libc_init_array+0x1e>
 80094b0:	0800a518 	.word	0x0800a518
 80094b4:	0800a518 	.word	0x0800a518
 80094b8:	0800a518 	.word	0x0800a518
 80094bc:	0800a51c 	.word	0x0800a51c

080094c0 <memset>:
 80094c0:	4402      	add	r2, r0
 80094c2:	4603      	mov	r3, r0
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d100      	bne.n	80094ca <memset+0xa>
 80094c8:	4770      	bx	lr
 80094ca:	f803 1b01 	strb.w	r1, [r3], #1
 80094ce:	e7f9      	b.n	80094c4 <memset+0x4>

080094d0 <pow>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	ed2d 8b02 	vpush	{d8}
 80094d6:	eeb0 8a40 	vmov.f32	s16, s0
 80094da:	eef0 8a60 	vmov.f32	s17, s1
 80094de:	ec55 4b11 	vmov	r4, r5, d1
 80094e2:	f000 f865 	bl	80095b0 <__ieee754_pow>
 80094e6:	4622      	mov	r2, r4
 80094e8:	462b      	mov	r3, r5
 80094ea:	4620      	mov	r0, r4
 80094ec:	4629      	mov	r1, r5
 80094ee:	ec57 6b10 	vmov	r6, r7, d0
 80094f2:	f7f7 fabf 	bl	8000a74 <__aeabi_dcmpun>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d13b      	bne.n	8009572 <pow+0xa2>
 80094fa:	ec51 0b18 	vmov	r0, r1, d8
 80094fe:	2200      	movs	r2, #0
 8009500:	2300      	movs	r3, #0
 8009502:	f7f7 fa85 	bl	8000a10 <__aeabi_dcmpeq>
 8009506:	b1b8      	cbz	r0, 8009538 <pow+0x68>
 8009508:	2200      	movs	r2, #0
 800950a:	2300      	movs	r3, #0
 800950c:	4620      	mov	r0, r4
 800950e:	4629      	mov	r1, r5
 8009510:	f7f7 fa7e 	bl	8000a10 <__aeabi_dcmpeq>
 8009514:	2800      	cmp	r0, #0
 8009516:	d146      	bne.n	80095a6 <pow+0xd6>
 8009518:	ec45 4b10 	vmov	d0, r4, r5
 800951c:	f000 fe61 	bl	800a1e2 <finite>
 8009520:	b338      	cbz	r0, 8009572 <pow+0xa2>
 8009522:	2200      	movs	r2, #0
 8009524:	2300      	movs	r3, #0
 8009526:	4620      	mov	r0, r4
 8009528:	4629      	mov	r1, r5
 800952a:	f7f7 fa7b 	bl	8000a24 <__aeabi_dcmplt>
 800952e:	b300      	cbz	r0, 8009572 <pow+0xa2>
 8009530:	f7ff ff9c 	bl	800946c <__errno>
 8009534:	2322      	movs	r3, #34	; 0x22
 8009536:	e01b      	b.n	8009570 <pow+0xa0>
 8009538:	ec47 6b10 	vmov	d0, r6, r7
 800953c:	f000 fe51 	bl	800a1e2 <finite>
 8009540:	b9e0      	cbnz	r0, 800957c <pow+0xac>
 8009542:	eeb0 0a48 	vmov.f32	s0, s16
 8009546:	eef0 0a68 	vmov.f32	s1, s17
 800954a:	f000 fe4a 	bl	800a1e2 <finite>
 800954e:	b1a8      	cbz	r0, 800957c <pow+0xac>
 8009550:	ec45 4b10 	vmov	d0, r4, r5
 8009554:	f000 fe45 	bl	800a1e2 <finite>
 8009558:	b180      	cbz	r0, 800957c <pow+0xac>
 800955a:	4632      	mov	r2, r6
 800955c:	463b      	mov	r3, r7
 800955e:	4630      	mov	r0, r6
 8009560:	4639      	mov	r1, r7
 8009562:	f7f7 fa87 	bl	8000a74 <__aeabi_dcmpun>
 8009566:	2800      	cmp	r0, #0
 8009568:	d0e2      	beq.n	8009530 <pow+0x60>
 800956a:	f7ff ff7f 	bl	800946c <__errno>
 800956e:	2321      	movs	r3, #33	; 0x21
 8009570:	6003      	str	r3, [r0, #0]
 8009572:	ecbd 8b02 	vpop	{d8}
 8009576:	ec47 6b10 	vmov	d0, r6, r7
 800957a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800957c:	2200      	movs	r2, #0
 800957e:	2300      	movs	r3, #0
 8009580:	4630      	mov	r0, r6
 8009582:	4639      	mov	r1, r7
 8009584:	f7f7 fa44 	bl	8000a10 <__aeabi_dcmpeq>
 8009588:	2800      	cmp	r0, #0
 800958a:	d0f2      	beq.n	8009572 <pow+0xa2>
 800958c:	eeb0 0a48 	vmov.f32	s0, s16
 8009590:	eef0 0a68 	vmov.f32	s1, s17
 8009594:	f000 fe25 	bl	800a1e2 <finite>
 8009598:	2800      	cmp	r0, #0
 800959a:	d0ea      	beq.n	8009572 <pow+0xa2>
 800959c:	ec45 4b10 	vmov	d0, r4, r5
 80095a0:	f000 fe1f 	bl	800a1e2 <finite>
 80095a4:	e7c3      	b.n	800952e <pow+0x5e>
 80095a6:	4f01      	ldr	r7, [pc, #4]	; (80095ac <pow+0xdc>)
 80095a8:	2600      	movs	r6, #0
 80095aa:	e7e2      	b.n	8009572 <pow+0xa2>
 80095ac:	3ff00000 	.word	0x3ff00000

080095b0 <__ieee754_pow>:
 80095b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	ed2d 8b06 	vpush	{d8-d10}
 80095b8:	b089      	sub	sp, #36	; 0x24
 80095ba:	ed8d 1b00 	vstr	d1, [sp]
 80095be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80095c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80095c6:	ea58 0102 	orrs.w	r1, r8, r2
 80095ca:	ec57 6b10 	vmov	r6, r7, d0
 80095ce:	d115      	bne.n	80095fc <__ieee754_pow+0x4c>
 80095d0:	19b3      	adds	r3, r6, r6
 80095d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80095d6:	4152      	adcs	r2, r2
 80095d8:	4299      	cmp	r1, r3
 80095da:	4b89      	ldr	r3, [pc, #548]	; (8009800 <__ieee754_pow+0x250>)
 80095dc:	4193      	sbcs	r3, r2
 80095de:	f080 84d2 	bcs.w	8009f86 <__ieee754_pow+0x9d6>
 80095e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095e6:	4630      	mov	r0, r6
 80095e8:	4639      	mov	r1, r7
 80095ea:	f7f6 fdf3 	bl	80001d4 <__adddf3>
 80095ee:	ec41 0b10 	vmov	d0, r0, r1
 80095f2:	b009      	add	sp, #36	; 0x24
 80095f4:	ecbd 8b06 	vpop	{d8-d10}
 80095f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fc:	4b81      	ldr	r3, [pc, #516]	; (8009804 <__ieee754_pow+0x254>)
 80095fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009602:	429c      	cmp	r4, r3
 8009604:	ee10 aa10 	vmov	sl, s0
 8009608:	463d      	mov	r5, r7
 800960a:	dc06      	bgt.n	800961a <__ieee754_pow+0x6a>
 800960c:	d101      	bne.n	8009612 <__ieee754_pow+0x62>
 800960e:	2e00      	cmp	r6, #0
 8009610:	d1e7      	bne.n	80095e2 <__ieee754_pow+0x32>
 8009612:	4598      	cmp	r8, r3
 8009614:	dc01      	bgt.n	800961a <__ieee754_pow+0x6a>
 8009616:	d10f      	bne.n	8009638 <__ieee754_pow+0x88>
 8009618:	b172      	cbz	r2, 8009638 <__ieee754_pow+0x88>
 800961a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800961e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009622:	ea55 050a 	orrs.w	r5, r5, sl
 8009626:	d1dc      	bne.n	80095e2 <__ieee754_pow+0x32>
 8009628:	e9dd 3200 	ldrd	r3, r2, [sp]
 800962c:	18db      	adds	r3, r3, r3
 800962e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009632:	4152      	adcs	r2, r2
 8009634:	429d      	cmp	r5, r3
 8009636:	e7d0      	b.n	80095da <__ieee754_pow+0x2a>
 8009638:	2d00      	cmp	r5, #0
 800963a:	da3b      	bge.n	80096b4 <__ieee754_pow+0x104>
 800963c:	4b72      	ldr	r3, [pc, #456]	; (8009808 <__ieee754_pow+0x258>)
 800963e:	4598      	cmp	r8, r3
 8009640:	dc51      	bgt.n	80096e6 <__ieee754_pow+0x136>
 8009642:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009646:	4598      	cmp	r8, r3
 8009648:	f340 84ac 	ble.w	8009fa4 <__ieee754_pow+0x9f4>
 800964c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009650:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009654:	2b14      	cmp	r3, #20
 8009656:	dd0f      	ble.n	8009678 <__ieee754_pow+0xc8>
 8009658:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800965c:	fa22 f103 	lsr.w	r1, r2, r3
 8009660:	fa01 f303 	lsl.w	r3, r1, r3
 8009664:	4293      	cmp	r3, r2
 8009666:	f040 849d 	bne.w	8009fa4 <__ieee754_pow+0x9f4>
 800966a:	f001 0101 	and.w	r1, r1, #1
 800966e:	f1c1 0302 	rsb	r3, r1, #2
 8009672:	9304      	str	r3, [sp, #16]
 8009674:	b182      	cbz	r2, 8009698 <__ieee754_pow+0xe8>
 8009676:	e05f      	b.n	8009738 <__ieee754_pow+0x188>
 8009678:	2a00      	cmp	r2, #0
 800967a:	d15b      	bne.n	8009734 <__ieee754_pow+0x184>
 800967c:	f1c3 0314 	rsb	r3, r3, #20
 8009680:	fa48 f103 	asr.w	r1, r8, r3
 8009684:	fa01 f303 	lsl.w	r3, r1, r3
 8009688:	4543      	cmp	r3, r8
 800968a:	f040 8488 	bne.w	8009f9e <__ieee754_pow+0x9ee>
 800968e:	f001 0101 	and.w	r1, r1, #1
 8009692:	f1c1 0302 	rsb	r3, r1, #2
 8009696:	9304      	str	r3, [sp, #16]
 8009698:	4b5c      	ldr	r3, [pc, #368]	; (800980c <__ieee754_pow+0x25c>)
 800969a:	4598      	cmp	r8, r3
 800969c:	d132      	bne.n	8009704 <__ieee754_pow+0x154>
 800969e:	f1b9 0f00 	cmp.w	r9, #0
 80096a2:	f280 8478 	bge.w	8009f96 <__ieee754_pow+0x9e6>
 80096a6:	4959      	ldr	r1, [pc, #356]	; (800980c <__ieee754_pow+0x25c>)
 80096a8:	4632      	mov	r2, r6
 80096aa:	463b      	mov	r3, r7
 80096ac:	2000      	movs	r0, #0
 80096ae:	f7f7 f871 	bl	8000794 <__aeabi_ddiv>
 80096b2:	e79c      	b.n	80095ee <__ieee754_pow+0x3e>
 80096b4:	2300      	movs	r3, #0
 80096b6:	9304      	str	r3, [sp, #16]
 80096b8:	2a00      	cmp	r2, #0
 80096ba:	d13d      	bne.n	8009738 <__ieee754_pow+0x188>
 80096bc:	4b51      	ldr	r3, [pc, #324]	; (8009804 <__ieee754_pow+0x254>)
 80096be:	4598      	cmp	r8, r3
 80096c0:	d1ea      	bne.n	8009698 <__ieee754_pow+0xe8>
 80096c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80096c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80096ca:	ea53 030a 	orrs.w	r3, r3, sl
 80096ce:	f000 845a 	beq.w	8009f86 <__ieee754_pow+0x9d6>
 80096d2:	4b4f      	ldr	r3, [pc, #316]	; (8009810 <__ieee754_pow+0x260>)
 80096d4:	429c      	cmp	r4, r3
 80096d6:	dd08      	ble.n	80096ea <__ieee754_pow+0x13a>
 80096d8:	f1b9 0f00 	cmp.w	r9, #0
 80096dc:	f2c0 8457 	blt.w	8009f8e <__ieee754_pow+0x9de>
 80096e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096e4:	e783      	b.n	80095ee <__ieee754_pow+0x3e>
 80096e6:	2302      	movs	r3, #2
 80096e8:	e7e5      	b.n	80096b6 <__ieee754_pow+0x106>
 80096ea:	f1b9 0f00 	cmp.w	r9, #0
 80096ee:	f04f 0000 	mov.w	r0, #0
 80096f2:	f04f 0100 	mov.w	r1, #0
 80096f6:	f6bf af7a 	bge.w	80095ee <__ieee754_pow+0x3e>
 80096fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80096fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009702:	e774      	b.n	80095ee <__ieee754_pow+0x3e>
 8009704:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009708:	d106      	bne.n	8009718 <__ieee754_pow+0x168>
 800970a:	4632      	mov	r2, r6
 800970c:	463b      	mov	r3, r7
 800970e:	4630      	mov	r0, r6
 8009710:	4639      	mov	r1, r7
 8009712:	f7f6 ff15 	bl	8000540 <__aeabi_dmul>
 8009716:	e76a      	b.n	80095ee <__ieee754_pow+0x3e>
 8009718:	4b3e      	ldr	r3, [pc, #248]	; (8009814 <__ieee754_pow+0x264>)
 800971a:	4599      	cmp	r9, r3
 800971c:	d10c      	bne.n	8009738 <__ieee754_pow+0x188>
 800971e:	2d00      	cmp	r5, #0
 8009720:	db0a      	blt.n	8009738 <__ieee754_pow+0x188>
 8009722:	ec47 6b10 	vmov	d0, r6, r7
 8009726:	b009      	add	sp, #36	; 0x24
 8009728:	ecbd 8b06 	vpop	{d8-d10}
 800972c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009730:	f000 bc6c 	b.w	800a00c <__ieee754_sqrt>
 8009734:	2300      	movs	r3, #0
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	ec47 6b10 	vmov	d0, r6, r7
 800973c:	f000 fd48 	bl	800a1d0 <fabs>
 8009740:	ec51 0b10 	vmov	r0, r1, d0
 8009744:	f1ba 0f00 	cmp.w	sl, #0
 8009748:	d129      	bne.n	800979e <__ieee754_pow+0x1ee>
 800974a:	b124      	cbz	r4, 8009756 <__ieee754_pow+0x1a6>
 800974c:	4b2f      	ldr	r3, [pc, #188]	; (800980c <__ieee754_pow+0x25c>)
 800974e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009752:	429a      	cmp	r2, r3
 8009754:	d123      	bne.n	800979e <__ieee754_pow+0x1ee>
 8009756:	f1b9 0f00 	cmp.w	r9, #0
 800975a:	da05      	bge.n	8009768 <__ieee754_pow+0x1b8>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	2000      	movs	r0, #0
 8009762:	492a      	ldr	r1, [pc, #168]	; (800980c <__ieee754_pow+0x25c>)
 8009764:	f7f7 f816 	bl	8000794 <__aeabi_ddiv>
 8009768:	2d00      	cmp	r5, #0
 800976a:	f6bf af40 	bge.w	80095ee <__ieee754_pow+0x3e>
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009774:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009778:	4323      	orrs	r3, r4
 800977a:	d108      	bne.n	800978e <__ieee754_pow+0x1de>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4610      	mov	r0, r2
 8009782:	4619      	mov	r1, r3
 8009784:	f7f6 fd24 	bl	80001d0 <__aeabi_dsub>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	e78f      	b.n	80096ae <__ieee754_pow+0xfe>
 800978e:	9b04      	ldr	r3, [sp, #16]
 8009790:	2b01      	cmp	r3, #1
 8009792:	f47f af2c 	bne.w	80095ee <__ieee754_pow+0x3e>
 8009796:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800979a:	4619      	mov	r1, r3
 800979c:	e727      	b.n	80095ee <__ieee754_pow+0x3e>
 800979e:	0feb      	lsrs	r3, r5, #31
 80097a0:	3b01      	subs	r3, #1
 80097a2:	9306      	str	r3, [sp, #24]
 80097a4:	9a06      	ldr	r2, [sp, #24]
 80097a6:	9b04      	ldr	r3, [sp, #16]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	d102      	bne.n	80097b2 <__ieee754_pow+0x202>
 80097ac:	4632      	mov	r2, r6
 80097ae:	463b      	mov	r3, r7
 80097b0:	e7e6      	b.n	8009780 <__ieee754_pow+0x1d0>
 80097b2:	4b19      	ldr	r3, [pc, #100]	; (8009818 <__ieee754_pow+0x268>)
 80097b4:	4598      	cmp	r8, r3
 80097b6:	f340 80fb 	ble.w	80099b0 <__ieee754_pow+0x400>
 80097ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80097be:	4598      	cmp	r8, r3
 80097c0:	4b13      	ldr	r3, [pc, #76]	; (8009810 <__ieee754_pow+0x260>)
 80097c2:	dd0c      	ble.n	80097de <__ieee754_pow+0x22e>
 80097c4:	429c      	cmp	r4, r3
 80097c6:	dc0f      	bgt.n	80097e8 <__ieee754_pow+0x238>
 80097c8:	f1b9 0f00 	cmp.w	r9, #0
 80097cc:	da0f      	bge.n	80097ee <__ieee754_pow+0x23e>
 80097ce:	2000      	movs	r0, #0
 80097d0:	b009      	add	sp, #36	; 0x24
 80097d2:	ecbd 8b06 	vpop	{d8-d10}
 80097d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097da:	f000 bcf0 	b.w	800a1be <__math_oflow>
 80097de:	429c      	cmp	r4, r3
 80097e0:	dbf2      	blt.n	80097c8 <__ieee754_pow+0x218>
 80097e2:	4b0a      	ldr	r3, [pc, #40]	; (800980c <__ieee754_pow+0x25c>)
 80097e4:	429c      	cmp	r4, r3
 80097e6:	dd19      	ble.n	800981c <__ieee754_pow+0x26c>
 80097e8:	f1b9 0f00 	cmp.w	r9, #0
 80097ec:	dcef      	bgt.n	80097ce <__ieee754_pow+0x21e>
 80097ee:	2000      	movs	r0, #0
 80097f0:	b009      	add	sp, #36	; 0x24
 80097f2:	ecbd 8b06 	vpop	{d8-d10}
 80097f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fa:	f000 bcd7 	b.w	800a1ac <__math_uflow>
 80097fe:	bf00      	nop
 8009800:	fff00000 	.word	0xfff00000
 8009804:	7ff00000 	.word	0x7ff00000
 8009808:	433fffff 	.word	0x433fffff
 800980c:	3ff00000 	.word	0x3ff00000
 8009810:	3fefffff 	.word	0x3fefffff
 8009814:	3fe00000 	.word	0x3fe00000
 8009818:	41e00000 	.word	0x41e00000
 800981c:	4b60      	ldr	r3, [pc, #384]	; (80099a0 <__ieee754_pow+0x3f0>)
 800981e:	2200      	movs	r2, #0
 8009820:	f7f6 fcd6 	bl	80001d0 <__aeabi_dsub>
 8009824:	a354      	add	r3, pc, #336	; (adr r3, 8009978 <__ieee754_pow+0x3c8>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	4604      	mov	r4, r0
 800982c:	460d      	mov	r5, r1
 800982e:	f7f6 fe87 	bl	8000540 <__aeabi_dmul>
 8009832:	a353      	add	r3, pc, #332	; (adr r3, 8009980 <__ieee754_pow+0x3d0>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	4606      	mov	r6, r0
 800983a:	460f      	mov	r7, r1
 800983c:	4620      	mov	r0, r4
 800983e:	4629      	mov	r1, r5
 8009840:	f7f6 fe7e 	bl	8000540 <__aeabi_dmul>
 8009844:	4b57      	ldr	r3, [pc, #348]	; (80099a4 <__ieee754_pow+0x3f4>)
 8009846:	4682      	mov	sl, r0
 8009848:	468b      	mov	fp, r1
 800984a:	2200      	movs	r2, #0
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	f7f6 fe76 	bl	8000540 <__aeabi_dmul>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	a14b      	add	r1, pc, #300	; (adr r1, 8009988 <__ieee754_pow+0x3d8>)
 800985a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800985e:	f7f6 fcb7 	bl	80001d0 <__aeabi_dsub>
 8009862:	4622      	mov	r2, r4
 8009864:	462b      	mov	r3, r5
 8009866:	f7f6 fe6b 	bl	8000540 <__aeabi_dmul>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	2000      	movs	r0, #0
 8009870:	494d      	ldr	r1, [pc, #308]	; (80099a8 <__ieee754_pow+0x3f8>)
 8009872:	f7f6 fcad 	bl	80001d0 <__aeabi_dsub>
 8009876:	4622      	mov	r2, r4
 8009878:	4680      	mov	r8, r0
 800987a:	4689      	mov	r9, r1
 800987c:	462b      	mov	r3, r5
 800987e:	4620      	mov	r0, r4
 8009880:	4629      	mov	r1, r5
 8009882:	f7f6 fe5d 	bl	8000540 <__aeabi_dmul>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	4640      	mov	r0, r8
 800988c:	4649      	mov	r1, r9
 800988e:	f7f6 fe57 	bl	8000540 <__aeabi_dmul>
 8009892:	a33f      	add	r3, pc, #252	; (adr r3, 8009990 <__ieee754_pow+0x3e0>)
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	f7f6 fe52 	bl	8000540 <__aeabi_dmul>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4650      	mov	r0, sl
 80098a2:	4659      	mov	r1, fp
 80098a4:	f7f6 fc94 	bl	80001d0 <__aeabi_dsub>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4680      	mov	r8, r0
 80098ae:	4689      	mov	r9, r1
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	f7f6 fc8e 	bl	80001d4 <__adddf3>
 80098b8:	2000      	movs	r0, #0
 80098ba:	4632      	mov	r2, r6
 80098bc:	463b      	mov	r3, r7
 80098be:	4604      	mov	r4, r0
 80098c0:	460d      	mov	r5, r1
 80098c2:	f7f6 fc85 	bl	80001d0 <__aeabi_dsub>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4640      	mov	r0, r8
 80098cc:	4649      	mov	r1, r9
 80098ce:	f7f6 fc7f 	bl	80001d0 <__aeabi_dsub>
 80098d2:	9b04      	ldr	r3, [sp, #16]
 80098d4:	9a06      	ldr	r2, [sp, #24]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	4313      	orrs	r3, r2
 80098da:	4682      	mov	sl, r0
 80098dc:	468b      	mov	fp, r1
 80098de:	f040 81e7 	bne.w	8009cb0 <__ieee754_pow+0x700>
 80098e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009998 <__ieee754_pow+0x3e8>
 80098e6:	eeb0 8a47 	vmov.f32	s16, s14
 80098ea:	eef0 8a67 	vmov.f32	s17, s15
 80098ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80098f2:	2600      	movs	r6, #0
 80098f4:	4632      	mov	r2, r6
 80098f6:	463b      	mov	r3, r7
 80098f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098fc:	f7f6 fc68 	bl	80001d0 <__aeabi_dsub>
 8009900:	4622      	mov	r2, r4
 8009902:	462b      	mov	r3, r5
 8009904:	f7f6 fe1c 	bl	8000540 <__aeabi_dmul>
 8009908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800990c:	4680      	mov	r8, r0
 800990e:	4689      	mov	r9, r1
 8009910:	4650      	mov	r0, sl
 8009912:	4659      	mov	r1, fp
 8009914:	f7f6 fe14 	bl	8000540 <__aeabi_dmul>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4640      	mov	r0, r8
 800991e:	4649      	mov	r1, r9
 8009920:	f7f6 fc58 	bl	80001d4 <__adddf3>
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	4680      	mov	r8, r0
 800992a:	4689      	mov	r9, r1
 800992c:	4620      	mov	r0, r4
 800992e:	4629      	mov	r1, r5
 8009930:	f7f6 fe06 	bl	8000540 <__aeabi_dmul>
 8009934:	460b      	mov	r3, r1
 8009936:	4604      	mov	r4, r0
 8009938:	460d      	mov	r5, r1
 800993a:	4602      	mov	r2, r0
 800993c:	4649      	mov	r1, r9
 800993e:	4640      	mov	r0, r8
 8009940:	f7f6 fc48 	bl	80001d4 <__adddf3>
 8009944:	4b19      	ldr	r3, [pc, #100]	; (80099ac <__ieee754_pow+0x3fc>)
 8009946:	4299      	cmp	r1, r3
 8009948:	ec45 4b19 	vmov	d9, r4, r5
 800994c:	4606      	mov	r6, r0
 800994e:	460f      	mov	r7, r1
 8009950:	468b      	mov	fp, r1
 8009952:	f340 82f1 	ble.w	8009f38 <__ieee754_pow+0x988>
 8009956:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800995a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800995e:	4303      	orrs	r3, r0
 8009960:	f000 81e4 	beq.w	8009d2c <__ieee754_pow+0x77c>
 8009964:	ec51 0b18 	vmov	r0, r1, d8
 8009968:	2200      	movs	r2, #0
 800996a:	2300      	movs	r3, #0
 800996c:	f7f7 f85a 	bl	8000a24 <__aeabi_dcmplt>
 8009970:	3800      	subs	r0, #0
 8009972:	bf18      	it	ne
 8009974:	2001      	movne	r0, #1
 8009976:	e72b      	b.n	80097d0 <__ieee754_pow+0x220>
 8009978:	60000000 	.word	0x60000000
 800997c:	3ff71547 	.word	0x3ff71547
 8009980:	f85ddf44 	.word	0xf85ddf44
 8009984:	3e54ae0b 	.word	0x3e54ae0b
 8009988:	55555555 	.word	0x55555555
 800998c:	3fd55555 	.word	0x3fd55555
 8009990:	652b82fe 	.word	0x652b82fe
 8009994:	3ff71547 	.word	0x3ff71547
 8009998:	00000000 	.word	0x00000000
 800999c:	bff00000 	.word	0xbff00000
 80099a0:	3ff00000 	.word	0x3ff00000
 80099a4:	3fd00000 	.word	0x3fd00000
 80099a8:	3fe00000 	.word	0x3fe00000
 80099ac:	408fffff 	.word	0x408fffff
 80099b0:	4bd5      	ldr	r3, [pc, #852]	; (8009d08 <__ieee754_pow+0x758>)
 80099b2:	402b      	ands	r3, r5
 80099b4:	2200      	movs	r2, #0
 80099b6:	b92b      	cbnz	r3, 80099c4 <__ieee754_pow+0x414>
 80099b8:	4bd4      	ldr	r3, [pc, #848]	; (8009d0c <__ieee754_pow+0x75c>)
 80099ba:	f7f6 fdc1 	bl	8000540 <__aeabi_dmul>
 80099be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80099c2:	460c      	mov	r4, r1
 80099c4:	1523      	asrs	r3, r4, #20
 80099c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80099ca:	4413      	add	r3, r2
 80099cc:	9305      	str	r3, [sp, #20]
 80099ce:	4bd0      	ldr	r3, [pc, #832]	; (8009d10 <__ieee754_pow+0x760>)
 80099d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80099d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80099d8:	429c      	cmp	r4, r3
 80099da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80099de:	dd08      	ble.n	80099f2 <__ieee754_pow+0x442>
 80099e0:	4bcc      	ldr	r3, [pc, #816]	; (8009d14 <__ieee754_pow+0x764>)
 80099e2:	429c      	cmp	r4, r3
 80099e4:	f340 8162 	ble.w	8009cac <__ieee754_pow+0x6fc>
 80099e8:	9b05      	ldr	r3, [sp, #20]
 80099ea:	3301      	adds	r3, #1
 80099ec:	9305      	str	r3, [sp, #20]
 80099ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80099f2:	2400      	movs	r4, #0
 80099f4:	00e3      	lsls	r3, r4, #3
 80099f6:	9307      	str	r3, [sp, #28]
 80099f8:	4bc7      	ldr	r3, [pc, #796]	; (8009d18 <__ieee754_pow+0x768>)
 80099fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099fe:	ed93 7b00 	vldr	d7, [r3]
 8009a02:	4629      	mov	r1, r5
 8009a04:	ec53 2b17 	vmov	r2, r3, d7
 8009a08:	eeb0 9a47 	vmov.f32	s18, s14
 8009a0c:	eef0 9a67 	vmov.f32	s19, s15
 8009a10:	4682      	mov	sl, r0
 8009a12:	f7f6 fbdd 	bl	80001d0 <__aeabi_dsub>
 8009a16:	4652      	mov	r2, sl
 8009a18:	4606      	mov	r6, r0
 8009a1a:	460f      	mov	r7, r1
 8009a1c:	462b      	mov	r3, r5
 8009a1e:	ec51 0b19 	vmov	r0, r1, d9
 8009a22:	f7f6 fbd7 	bl	80001d4 <__adddf3>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	49bb      	ldr	r1, [pc, #748]	; (8009d1c <__ieee754_pow+0x76c>)
 8009a2e:	f7f6 feb1 	bl	8000794 <__aeabi_ddiv>
 8009a32:	ec41 0b1a 	vmov	d10, r0, r1
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	f7f6 fd7f 	bl	8000540 <__aeabi_dmul>
 8009a42:	2300      	movs	r3, #0
 8009a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a48:	9302      	str	r3, [sp, #8]
 8009a4a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a4e:	46ab      	mov	fp, r5
 8009a50:	106d      	asrs	r5, r5, #1
 8009a52:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009a56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009a5a:	ec41 0b18 	vmov	d8, r0, r1
 8009a5e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009a62:	2200      	movs	r2, #0
 8009a64:	4640      	mov	r0, r8
 8009a66:	4649      	mov	r1, r9
 8009a68:	4614      	mov	r4, r2
 8009a6a:	461d      	mov	r5, r3
 8009a6c:	f7f6 fd68 	bl	8000540 <__aeabi_dmul>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	4630      	mov	r0, r6
 8009a76:	4639      	mov	r1, r7
 8009a78:	f7f6 fbaa 	bl	80001d0 <__aeabi_dsub>
 8009a7c:	ec53 2b19 	vmov	r2, r3, d9
 8009a80:	4606      	mov	r6, r0
 8009a82:	460f      	mov	r7, r1
 8009a84:	4620      	mov	r0, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	f7f6 fba2 	bl	80001d0 <__aeabi_dsub>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4650      	mov	r0, sl
 8009a92:	4659      	mov	r1, fp
 8009a94:	f7f6 fb9c 	bl	80001d0 <__aeabi_dsub>
 8009a98:	4642      	mov	r2, r8
 8009a9a:	464b      	mov	r3, r9
 8009a9c:	f7f6 fd50 	bl	8000540 <__aeabi_dmul>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	4639      	mov	r1, r7
 8009aa8:	f7f6 fb92 	bl	80001d0 <__aeabi_dsub>
 8009aac:	ec53 2b1a 	vmov	r2, r3, d10
 8009ab0:	f7f6 fd46 	bl	8000540 <__aeabi_dmul>
 8009ab4:	ec53 2b18 	vmov	r2, r3, d8
 8009ab8:	ec41 0b19 	vmov	d9, r0, r1
 8009abc:	ec51 0b18 	vmov	r0, r1, d8
 8009ac0:	f7f6 fd3e 	bl	8000540 <__aeabi_dmul>
 8009ac4:	a37c      	add	r3, pc, #496	; (adr r3, 8009cb8 <__ieee754_pow+0x708>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	4604      	mov	r4, r0
 8009acc:	460d      	mov	r5, r1
 8009ace:	f7f6 fd37 	bl	8000540 <__aeabi_dmul>
 8009ad2:	a37b      	add	r3, pc, #492	; (adr r3, 8009cc0 <__ieee754_pow+0x710>)
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	f7f6 fb7c 	bl	80001d4 <__adddf3>
 8009adc:	4622      	mov	r2, r4
 8009ade:	462b      	mov	r3, r5
 8009ae0:	f7f6 fd2e 	bl	8000540 <__aeabi_dmul>
 8009ae4:	a378      	add	r3, pc, #480	; (adr r3, 8009cc8 <__ieee754_pow+0x718>)
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f7f6 fb73 	bl	80001d4 <__adddf3>
 8009aee:	4622      	mov	r2, r4
 8009af0:	462b      	mov	r3, r5
 8009af2:	f7f6 fd25 	bl	8000540 <__aeabi_dmul>
 8009af6:	a376      	add	r3, pc, #472	; (adr r3, 8009cd0 <__ieee754_pow+0x720>)
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	f7f6 fb6a 	bl	80001d4 <__adddf3>
 8009b00:	4622      	mov	r2, r4
 8009b02:	462b      	mov	r3, r5
 8009b04:	f7f6 fd1c 	bl	8000540 <__aeabi_dmul>
 8009b08:	a373      	add	r3, pc, #460	; (adr r3, 8009cd8 <__ieee754_pow+0x728>)
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	f7f6 fb61 	bl	80001d4 <__adddf3>
 8009b12:	4622      	mov	r2, r4
 8009b14:	462b      	mov	r3, r5
 8009b16:	f7f6 fd13 	bl	8000540 <__aeabi_dmul>
 8009b1a:	a371      	add	r3, pc, #452	; (adr r3, 8009ce0 <__ieee754_pow+0x730>)
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	f7f6 fb58 	bl	80001d4 <__adddf3>
 8009b24:	4622      	mov	r2, r4
 8009b26:	4606      	mov	r6, r0
 8009b28:	460f      	mov	r7, r1
 8009b2a:	462b      	mov	r3, r5
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	4629      	mov	r1, r5
 8009b30:	f7f6 fd06 	bl	8000540 <__aeabi_dmul>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4630      	mov	r0, r6
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	f7f6 fd00 	bl	8000540 <__aeabi_dmul>
 8009b40:	4642      	mov	r2, r8
 8009b42:	4604      	mov	r4, r0
 8009b44:	460d      	mov	r5, r1
 8009b46:	464b      	mov	r3, r9
 8009b48:	ec51 0b18 	vmov	r0, r1, d8
 8009b4c:	f7f6 fb42 	bl	80001d4 <__adddf3>
 8009b50:	ec53 2b19 	vmov	r2, r3, d9
 8009b54:	f7f6 fcf4 	bl	8000540 <__aeabi_dmul>
 8009b58:	4622      	mov	r2, r4
 8009b5a:	462b      	mov	r3, r5
 8009b5c:	f7f6 fb3a 	bl	80001d4 <__adddf3>
 8009b60:	4642      	mov	r2, r8
 8009b62:	4682      	mov	sl, r0
 8009b64:	468b      	mov	fp, r1
 8009b66:	464b      	mov	r3, r9
 8009b68:	4640      	mov	r0, r8
 8009b6a:	4649      	mov	r1, r9
 8009b6c:	f7f6 fce8 	bl	8000540 <__aeabi_dmul>
 8009b70:	4b6b      	ldr	r3, [pc, #428]	; (8009d20 <__ieee754_pow+0x770>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	4606      	mov	r6, r0
 8009b76:	460f      	mov	r7, r1
 8009b78:	f7f6 fb2c 	bl	80001d4 <__adddf3>
 8009b7c:	4652      	mov	r2, sl
 8009b7e:	465b      	mov	r3, fp
 8009b80:	f7f6 fb28 	bl	80001d4 <__adddf3>
 8009b84:	2000      	movs	r0, #0
 8009b86:	4604      	mov	r4, r0
 8009b88:	460d      	mov	r5, r1
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	4640      	mov	r0, r8
 8009b90:	4649      	mov	r1, r9
 8009b92:	f7f6 fcd5 	bl	8000540 <__aeabi_dmul>
 8009b96:	4b62      	ldr	r3, [pc, #392]	; (8009d20 <__ieee754_pow+0x770>)
 8009b98:	4680      	mov	r8, r0
 8009b9a:	4689      	mov	r9, r1
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	f7f6 fb15 	bl	80001d0 <__aeabi_dsub>
 8009ba6:	4632      	mov	r2, r6
 8009ba8:	463b      	mov	r3, r7
 8009baa:	f7f6 fb11 	bl	80001d0 <__aeabi_dsub>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4650      	mov	r0, sl
 8009bb4:	4659      	mov	r1, fp
 8009bb6:	f7f6 fb0b 	bl	80001d0 <__aeabi_dsub>
 8009bba:	ec53 2b18 	vmov	r2, r3, d8
 8009bbe:	f7f6 fcbf 	bl	8000540 <__aeabi_dmul>
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	4606      	mov	r6, r0
 8009bc6:	460f      	mov	r7, r1
 8009bc8:	462b      	mov	r3, r5
 8009bca:	ec51 0b19 	vmov	r0, r1, d9
 8009bce:	f7f6 fcb7 	bl	8000540 <__aeabi_dmul>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	4639      	mov	r1, r7
 8009bda:	f7f6 fafb 	bl	80001d4 <__adddf3>
 8009bde:	4606      	mov	r6, r0
 8009be0:	460f      	mov	r7, r1
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4640      	mov	r0, r8
 8009be8:	4649      	mov	r1, r9
 8009bea:	f7f6 faf3 	bl	80001d4 <__adddf3>
 8009bee:	a33e      	add	r3, pc, #248	; (adr r3, 8009ce8 <__ieee754_pow+0x738>)
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	460d      	mov	r5, r1
 8009bfa:	f7f6 fca1 	bl	8000540 <__aeabi_dmul>
 8009bfe:	4642      	mov	r2, r8
 8009c00:	ec41 0b18 	vmov	d8, r0, r1
 8009c04:	464b      	mov	r3, r9
 8009c06:	4620      	mov	r0, r4
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7f6 fae1 	bl	80001d0 <__aeabi_dsub>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4630      	mov	r0, r6
 8009c14:	4639      	mov	r1, r7
 8009c16:	f7f6 fadb 	bl	80001d0 <__aeabi_dsub>
 8009c1a:	a335      	add	r3, pc, #212	; (adr r3, 8009cf0 <__ieee754_pow+0x740>)
 8009c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c20:	f7f6 fc8e 	bl	8000540 <__aeabi_dmul>
 8009c24:	a334      	add	r3, pc, #208	; (adr r3, 8009cf8 <__ieee754_pow+0x748>)
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	460f      	mov	r7, r1
 8009c2e:	4620      	mov	r0, r4
 8009c30:	4629      	mov	r1, r5
 8009c32:	f7f6 fc85 	bl	8000540 <__aeabi_dmul>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	4639      	mov	r1, r7
 8009c3e:	f7f6 fac9 	bl	80001d4 <__adddf3>
 8009c42:	9a07      	ldr	r2, [sp, #28]
 8009c44:	4b37      	ldr	r3, [pc, #220]	; (8009d24 <__ieee754_pow+0x774>)
 8009c46:	4413      	add	r3, r2
 8009c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4c:	f7f6 fac2 	bl	80001d4 <__adddf3>
 8009c50:	4682      	mov	sl, r0
 8009c52:	9805      	ldr	r0, [sp, #20]
 8009c54:	468b      	mov	fp, r1
 8009c56:	f7f6 fc09 	bl	800046c <__aeabi_i2d>
 8009c5a:	9a07      	ldr	r2, [sp, #28]
 8009c5c:	4b32      	ldr	r3, [pc, #200]	; (8009d28 <__ieee754_pow+0x778>)
 8009c5e:	4413      	add	r3, r2
 8009c60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c64:	4606      	mov	r6, r0
 8009c66:	460f      	mov	r7, r1
 8009c68:	4652      	mov	r2, sl
 8009c6a:	465b      	mov	r3, fp
 8009c6c:	ec51 0b18 	vmov	r0, r1, d8
 8009c70:	f7f6 fab0 	bl	80001d4 <__adddf3>
 8009c74:	4642      	mov	r2, r8
 8009c76:	464b      	mov	r3, r9
 8009c78:	f7f6 faac 	bl	80001d4 <__adddf3>
 8009c7c:	4632      	mov	r2, r6
 8009c7e:	463b      	mov	r3, r7
 8009c80:	f7f6 faa8 	bl	80001d4 <__adddf3>
 8009c84:	2000      	movs	r0, #0
 8009c86:	4632      	mov	r2, r6
 8009c88:	463b      	mov	r3, r7
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	460d      	mov	r5, r1
 8009c8e:	f7f6 fa9f 	bl	80001d0 <__aeabi_dsub>
 8009c92:	4642      	mov	r2, r8
 8009c94:	464b      	mov	r3, r9
 8009c96:	f7f6 fa9b 	bl	80001d0 <__aeabi_dsub>
 8009c9a:	ec53 2b18 	vmov	r2, r3, d8
 8009c9e:	f7f6 fa97 	bl	80001d0 <__aeabi_dsub>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	4650      	mov	r0, sl
 8009ca8:	4659      	mov	r1, fp
 8009caa:	e610      	b.n	80098ce <__ieee754_pow+0x31e>
 8009cac:	2401      	movs	r4, #1
 8009cae:	e6a1      	b.n	80099f4 <__ieee754_pow+0x444>
 8009cb0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009d00 <__ieee754_pow+0x750>
 8009cb4:	e617      	b.n	80098e6 <__ieee754_pow+0x336>
 8009cb6:	bf00      	nop
 8009cb8:	4a454eef 	.word	0x4a454eef
 8009cbc:	3fca7e28 	.word	0x3fca7e28
 8009cc0:	93c9db65 	.word	0x93c9db65
 8009cc4:	3fcd864a 	.word	0x3fcd864a
 8009cc8:	a91d4101 	.word	0xa91d4101
 8009ccc:	3fd17460 	.word	0x3fd17460
 8009cd0:	518f264d 	.word	0x518f264d
 8009cd4:	3fd55555 	.word	0x3fd55555
 8009cd8:	db6fabff 	.word	0xdb6fabff
 8009cdc:	3fdb6db6 	.word	0x3fdb6db6
 8009ce0:	33333303 	.word	0x33333303
 8009ce4:	3fe33333 	.word	0x3fe33333
 8009ce8:	e0000000 	.word	0xe0000000
 8009cec:	3feec709 	.word	0x3feec709
 8009cf0:	dc3a03fd 	.word	0xdc3a03fd
 8009cf4:	3feec709 	.word	0x3feec709
 8009cf8:	145b01f5 	.word	0x145b01f5
 8009cfc:	be3e2fe0 	.word	0xbe3e2fe0
 8009d00:	00000000 	.word	0x00000000
 8009d04:	3ff00000 	.word	0x3ff00000
 8009d08:	7ff00000 	.word	0x7ff00000
 8009d0c:	43400000 	.word	0x43400000
 8009d10:	0003988e 	.word	0x0003988e
 8009d14:	000bb679 	.word	0x000bb679
 8009d18:	0800a4e0 	.word	0x0800a4e0
 8009d1c:	3ff00000 	.word	0x3ff00000
 8009d20:	40080000 	.word	0x40080000
 8009d24:	0800a500 	.word	0x0800a500
 8009d28:	0800a4f0 	.word	0x0800a4f0
 8009d2c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a004 <__ieee754_pow+0xa54>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	4640      	mov	r0, r8
 8009d34:	4649      	mov	r1, r9
 8009d36:	f7f6 fa4d 	bl	80001d4 <__adddf3>
 8009d3a:	4622      	mov	r2, r4
 8009d3c:	ec41 0b1a 	vmov	d10, r0, r1
 8009d40:	462b      	mov	r3, r5
 8009d42:	4630      	mov	r0, r6
 8009d44:	4639      	mov	r1, r7
 8009d46:	f7f6 fa43 	bl	80001d0 <__aeabi_dsub>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	ec51 0b1a 	vmov	r0, r1, d10
 8009d52:	f7f6 fe85 	bl	8000a60 <__aeabi_dcmpgt>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f47f ae04 	bne.w	8009964 <__ieee754_pow+0x3b4>
 8009d5c:	4aa4      	ldr	r2, [pc, #656]	; (8009ff0 <__ieee754_pow+0xa40>)
 8009d5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d62:	4293      	cmp	r3, r2
 8009d64:	f340 8108 	ble.w	8009f78 <__ieee754_pow+0x9c8>
 8009d68:	151b      	asrs	r3, r3, #20
 8009d6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009d6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009d72:	fa4a f303 	asr.w	r3, sl, r3
 8009d76:	445b      	add	r3, fp
 8009d78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009d7c:	4e9d      	ldr	r6, [pc, #628]	; (8009ff4 <__ieee754_pow+0xa44>)
 8009d7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009d82:	4116      	asrs	r6, r2
 8009d84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009d88:	2000      	movs	r0, #0
 8009d8a:	ea23 0106 	bic.w	r1, r3, r6
 8009d8e:	f1c2 0214 	rsb	r2, r2, #20
 8009d92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009d96:	fa4a fa02 	asr.w	sl, sl, r2
 8009d9a:	f1bb 0f00 	cmp.w	fp, #0
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	4620      	mov	r0, r4
 8009da4:	4629      	mov	r1, r5
 8009da6:	bfb8      	it	lt
 8009da8:	f1ca 0a00 	rsblt	sl, sl, #0
 8009dac:	f7f6 fa10 	bl	80001d0 <__aeabi_dsub>
 8009db0:	ec41 0b19 	vmov	d9, r0, r1
 8009db4:	4642      	mov	r2, r8
 8009db6:	464b      	mov	r3, r9
 8009db8:	ec51 0b19 	vmov	r0, r1, d9
 8009dbc:	f7f6 fa0a 	bl	80001d4 <__adddf3>
 8009dc0:	a37b      	add	r3, pc, #492	; (adr r3, 8009fb0 <__ieee754_pow+0xa00>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	4604      	mov	r4, r0
 8009dca:	460d      	mov	r5, r1
 8009dcc:	f7f6 fbb8 	bl	8000540 <__aeabi_dmul>
 8009dd0:	ec53 2b19 	vmov	r2, r3, d9
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	460f      	mov	r7, r1
 8009dd8:	4620      	mov	r0, r4
 8009dda:	4629      	mov	r1, r5
 8009ddc:	f7f6 f9f8 	bl	80001d0 <__aeabi_dsub>
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4640      	mov	r0, r8
 8009de6:	4649      	mov	r1, r9
 8009de8:	f7f6 f9f2 	bl	80001d0 <__aeabi_dsub>
 8009dec:	a372      	add	r3, pc, #456	; (adr r3, 8009fb8 <__ieee754_pow+0xa08>)
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f7f6 fba5 	bl	8000540 <__aeabi_dmul>
 8009df6:	a372      	add	r3, pc, #456	; (adr r3, 8009fc0 <__ieee754_pow+0xa10>)
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	4680      	mov	r8, r0
 8009dfe:	4689      	mov	r9, r1
 8009e00:	4620      	mov	r0, r4
 8009e02:	4629      	mov	r1, r5
 8009e04:	f7f6 fb9c 	bl	8000540 <__aeabi_dmul>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4640      	mov	r0, r8
 8009e0e:	4649      	mov	r1, r9
 8009e10:	f7f6 f9e0 	bl	80001d4 <__adddf3>
 8009e14:	4604      	mov	r4, r0
 8009e16:	460d      	mov	r5, r1
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	4639      	mov	r1, r7
 8009e20:	f7f6 f9d8 	bl	80001d4 <__adddf3>
 8009e24:	4632      	mov	r2, r6
 8009e26:	463b      	mov	r3, r7
 8009e28:	4680      	mov	r8, r0
 8009e2a:	4689      	mov	r9, r1
 8009e2c:	f7f6 f9d0 	bl	80001d0 <__aeabi_dsub>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4620      	mov	r0, r4
 8009e36:	4629      	mov	r1, r5
 8009e38:	f7f6 f9ca 	bl	80001d0 <__aeabi_dsub>
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	4606      	mov	r6, r0
 8009e40:	460f      	mov	r7, r1
 8009e42:	464b      	mov	r3, r9
 8009e44:	4640      	mov	r0, r8
 8009e46:	4649      	mov	r1, r9
 8009e48:	f7f6 fb7a 	bl	8000540 <__aeabi_dmul>
 8009e4c:	a35e      	add	r3, pc, #376	; (adr r3, 8009fc8 <__ieee754_pow+0xa18>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	4604      	mov	r4, r0
 8009e54:	460d      	mov	r5, r1
 8009e56:	f7f6 fb73 	bl	8000540 <__aeabi_dmul>
 8009e5a:	a35d      	add	r3, pc, #372	; (adr r3, 8009fd0 <__ieee754_pow+0xa20>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	f7f6 f9b6 	bl	80001d0 <__aeabi_dsub>
 8009e64:	4622      	mov	r2, r4
 8009e66:	462b      	mov	r3, r5
 8009e68:	f7f6 fb6a 	bl	8000540 <__aeabi_dmul>
 8009e6c:	a35a      	add	r3, pc, #360	; (adr r3, 8009fd8 <__ieee754_pow+0xa28>)
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	f7f6 f9af 	bl	80001d4 <__adddf3>
 8009e76:	4622      	mov	r2, r4
 8009e78:	462b      	mov	r3, r5
 8009e7a:	f7f6 fb61 	bl	8000540 <__aeabi_dmul>
 8009e7e:	a358      	add	r3, pc, #352	; (adr r3, 8009fe0 <__ieee754_pow+0xa30>)
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	f7f6 f9a4 	bl	80001d0 <__aeabi_dsub>
 8009e88:	4622      	mov	r2, r4
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	f7f6 fb58 	bl	8000540 <__aeabi_dmul>
 8009e90:	a355      	add	r3, pc, #340	; (adr r3, 8009fe8 <__ieee754_pow+0xa38>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	f7f6 f99d 	bl	80001d4 <__adddf3>
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	f7f6 fb4f 	bl	8000540 <__aeabi_dmul>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	f7f6 f991 	bl	80001d0 <__aeabi_dsub>
 8009eae:	4604      	mov	r4, r0
 8009eb0:	460d      	mov	r5, r1
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	4649      	mov	r1, r9
 8009eba:	f7f6 fb41 	bl	8000540 <__aeabi_dmul>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	ec41 0b19 	vmov	d9, r0, r1
 8009ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ec8:	4620      	mov	r0, r4
 8009eca:	4629      	mov	r1, r5
 8009ecc:	f7f6 f980 	bl	80001d0 <__aeabi_dsub>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	ec51 0b19 	vmov	r0, r1, d9
 8009ed8:	f7f6 fc5c 	bl	8000794 <__aeabi_ddiv>
 8009edc:	4632      	mov	r2, r6
 8009ede:	4604      	mov	r4, r0
 8009ee0:	460d      	mov	r5, r1
 8009ee2:	463b      	mov	r3, r7
 8009ee4:	4640      	mov	r0, r8
 8009ee6:	4649      	mov	r1, r9
 8009ee8:	f7f6 fb2a 	bl	8000540 <__aeabi_dmul>
 8009eec:	4632      	mov	r2, r6
 8009eee:	463b      	mov	r3, r7
 8009ef0:	f7f6 f970 	bl	80001d4 <__adddf3>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7f6 f968 	bl	80001d0 <__aeabi_dsub>
 8009f00:	4642      	mov	r2, r8
 8009f02:	464b      	mov	r3, r9
 8009f04:	f7f6 f964 	bl	80001d0 <__aeabi_dsub>
 8009f08:	460b      	mov	r3, r1
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	493a      	ldr	r1, [pc, #232]	; (8009ff8 <__ieee754_pow+0xa48>)
 8009f0e:	2000      	movs	r0, #0
 8009f10:	f7f6 f95e 	bl	80001d0 <__aeabi_dsub>
 8009f14:	ec41 0b10 	vmov	d0, r0, r1
 8009f18:	ee10 3a90 	vmov	r3, s1
 8009f1c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f24:	da2b      	bge.n	8009f7e <__ieee754_pow+0x9ce>
 8009f26:	4650      	mov	r0, sl
 8009f28:	f000 f966 	bl	800a1f8 <scalbn>
 8009f2c:	ec51 0b10 	vmov	r0, r1, d0
 8009f30:	ec53 2b18 	vmov	r2, r3, d8
 8009f34:	f7ff bbed 	b.w	8009712 <__ieee754_pow+0x162>
 8009f38:	4b30      	ldr	r3, [pc, #192]	; (8009ffc <__ieee754_pow+0xa4c>)
 8009f3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009f3e:	429e      	cmp	r6, r3
 8009f40:	f77f af0c 	ble.w	8009d5c <__ieee754_pow+0x7ac>
 8009f44:	4b2e      	ldr	r3, [pc, #184]	; (800a000 <__ieee754_pow+0xa50>)
 8009f46:	440b      	add	r3, r1
 8009f48:	4303      	orrs	r3, r0
 8009f4a:	d009      	beq.n	8009f60 <__ieee754_pow+0x9b0>
 8009f4c:	ec51 0b18 	vmov	r0, r1, d8
 8009f50:	2200      	movs	r2, #0
 8009f52:	2300      	movs	r3, #0
 8009f54:	f7f6 fd66 	bl	8000a24 <__aeabi_dcmplt>
 8009f58:	3800      	subs	r0, #0
 8009f5a:	bf18      	it	ne
 8009f5c:	2001      	movne	r0, #1
 8009f5e:	e447      	b.n	80097f0 <__ieee754_pow+0x240>
 8009f60:	4622      	mov	r2, r4
 8009f62:	462b      	mov	r3, r5
 8009f64:	f7f6 f934 	bl	80001d0 <__aeabi_dsub>
 8009f68:	4642      	mov	r2, r8
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	f7f6 fd6e 	bl	8000a4c <__aeabi_dcmpge>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	f43f aef3 	beq.w	8009d5c <__ieee754_pow+0x7ac>
 8009f76:	e7e9      	b.n	8009f4c <__ieee754_pow+0x99c>
 8009f78:	f04f 0a00 	mov.w	sl, #0
 8009f7c:	e71a      	b.n	8009db4 <__ieee754_pow+0x804>
 8009f7e:	ec51 0b10 	vmov	r0, r1, d0
 8009f82:	4619      	mov	r1, r3
 8009f84:	e7d4      	b.n	8009f30 <__ieee754_pow+0x980>
 8009f86:	491c      	ldr	r1, [pc, #112]	; (8009ff8 <__ieee754_pow+0xa48>)
 8009f88:	2000      	movs	r0, #0
 8009f8a:	f7ff bb30 	b.w	80095ee <__ieee754_pow+0x3e>
 8009f8e:	2000      	movs	r0, #0
 8009f90:	2100      	movs	r1, #0
 8009f92:	f7ff bb2c 	b.w	80095ee <__ieee754_pow+0x3e>
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7ff bb28 	b.w	80095ee <__ieee754_pow+0x3e>
 8009f9e:	9204      	str	r2, [sp, #16]
 8009fa0:	f7ff bb7a 	b.w	8009698 <__ieee754_pow+0xe8>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f7ff bb64 	b.w	8009672 <__ieee754_pow+0xc2>
 8009faa:	bf00      	nop
 8009fac:	f3af 8000 	nop.w
 8009fb0:	00000000 	.word	0x00000000
 8009fb4:	3fe62e43 	.word	0x3fe62e43
 8009fb8:	fefa39ef 	.word	0xfefa39ef
 8009fbc:	3fe62e42 	.word	0x3fe62e42
 8009fc0:	0ca86c39 	.word	0x0ca86c39
 8009fc4:	be205c61 	.word	0xbe205c61
 8009fc8:	72bea4d0 	.word	0x72bea4d0
 8009fcc:	3e663769 	.word	0x3e663769
 8009fd0:	c5d26bf1 	.word	0xc5d26bf1
 8009fd4:	3ebbbd41 	.word	0x3ebbbd41
 8009fd8:	af25de2c 	.word	0xaf25de2c
 8009fdc:	3f11566a 	.word	0x3f11566a
 8009fe0:	16bebd93 	.word	0x16bebd93
 8009fe4:	3f66c16c 	.word	0x3f66c16c
 8009fe8:	5555553e 	.word	0x5555553e
 8009fec:	3fc55555 	.word	0x3fc55555
 8009ff0:	3fe00000 	.word	0x3fe00000
 8009ff4:	000fffff 	.word	0x000fffff
 8009ff8:	3ff00000 	.word	0x3ff00000
 8009ffc:	4090cbff 	.word	0x4090cbff
 800a000:	3f6f3400 	.word	0x3f6f3400
 800a004:	652b82fe 	.word	0x652b82fe
 800a008:	3c971547 	.word	0x3c971547

0800a00c <__ieee754_sqrt>:
 800a00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a010:	ec55 4b10 	vmov	r4, r5, d0
 800a014:	4e55      	ldr	r6, [pc, #340]	; (800a16c <__ieee754_sqrt+0x160>)
 800a016:	43ae      	bics	r6, r5
 800a018:	ee10 0a10 	vmov	r0, s0
 800a01c:	ee10 3a10 	vmov	r3, s0
 800a020:	462a      	mov	r2, r5
 800a022:	4629      	mov	r1, r5
 800a024:	d110      	bne.n	800a048 <__ieee754_sqrt+0x3c>
 800a026:	ee10 2a10 	vmov	r2, s0
 800a02a:	462b      	mov	r3, r5
 800a02c:	f7f6 fa88 	bl	8000540 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4620      	mov	r0, r4
 800a036:	4629      	mov	r1, r5
 800a038:	f7f6 f8cc 	bl	80001d4 <__adddf3>
 800a03c:	4604      	mov	r4, r0
 800a03e:	460d      	mov	r5, r1
 800a040:	ec45 4b10 	vmov	d0, r4, r5
 800a044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a048:	2d00      	cmp	r5, #0
 800a04a:	dc10      	bgt.n	800a06e <__ieee754_sqrt+0x62>
 800a04c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a050:	4330      	orrs	r0, r6
 800a052:	d0f5      	beq.n	800a040 <__ieee754_sqrt+0x34>
 800a054:	b15d      	cbz	r5, 800a06e <__ieee754_sqrt+0x62>
 800a056:	ee10 2a10 	vmov	r2, s0
 800a05a:	462b      	mov	r3, r5
 800a05c:	ee10 0a10 	vmov	r0, s0
 800a060:	f7f6 f8b6 	bl	80001d0 <__aeabi_dsub>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	f7f6 fb94 	bl	8000794 <__aeabi_ddiv>
 800a06c:	e7e6      	b.n	800a03c <__ieee754_sqrt+0x30>
 800a06e:	1512      	asrs	r2, r2, #20
 800a070:	d074      	beq.n	800a15c <__ieee754_sqrt+0x150>
 800a072:	07d4      	lsls	r4, r2, #31
 800a074:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a078:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a07c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a080:	bf5e      	ittt	pl
 800a082:	0fda      	lsrpl	r2, r3, #31
 800a084:	005b      	lslpl	r3, r3, #1
 800a086:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a08a:	2400      	movs	r4, #0
 800a08c:	0fda      	lsrs	r2, r3, #31
 800a08e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a092:	107f      	asrs	r7, r7, #1
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	2516      	movs	r5, #22
 800a098:	4620      	mov	r0, r4
 800a09a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a09e:	1886      	adds	r6, r0, r2
 800a0a0:	428e      	cmp	r6, r1
 800a0a2:	bfde      	ittt	le
 800a0a4:	1b89      	suble	r1, r1, r6
 800a0a6:	18b0      	addle	r0, r6, r2
 800a0a8:	18a4      	addle	r4, r4, r2
 800a0aa:	0049      	lsls	r1, r1, #1
 800a0ac:	3d01      	subs	r5, #1
 800a0ae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a0b2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a0b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0ba:	d1f0      	bne.n	800a09e <__ieee754_sqrt+0x92>
 800a0bc:	462a      	mov	r2, r5
 800a0be:	f04f 0e20 	mov.w	lr, #32
 800a0c2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a0c6:	4281      	cmp	r1, r0
 800a0c8:	eb06 0c05 	add.w	ip, r6, r5
 800a0cc:	dc02      	bgt.n	800a0d4 <__ieee754_sqrt+0xc8>
 800a0ce:	d113      	bne.n	800a0f8 <__ieee754_sqrt+0xec>
 800a0d0:	459c      	cmp	ip, r3
 800a0d2:	d811      	bhi.n	800a0f8 <__ieee754_sqrt+0xec>
 800a0d4:	f1bc 0f00 	cmp.w	ip, #0
 800a0d8:	eb0c 0506 	add.w	r5, ip, r6
 800a0dc:	da43      	bge.n	800a166 <__ieee754_sqrt+0x15a>
 800a0de:	2d00      	cmp	r5, #0
 800a0e0:	db41      	blt.n	800a166 <__ieee754_sqrt+0x15a>
 800a0e2:	f100 0801 	add.w	r8, r0, #1
 800a0e6:	1a09      	subs	r1, r1, r0
 800a0e8:	459c      	cmp	ip, r3
 800a0ea:	bf88      	it	hi
 800a0ec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a0f0:	eba3 030c 	sub.w	r3, r3, ip
 800a0f4:	4432      	add	r2, r6
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a0fc:	f1be 0e01 	subs.w	lr, lr, #1
 800a100:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a104:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a108:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a10c:	d1db      	bne.n	800a0c6 <__ieee754_sqrt+0xba>
 800a10e:	430b      	orrs	r3, r1
 800a110:	d006      	beq.n	800a120 <__ieee754_sqrt+0x114>
 800a112:	1c50      	adds	r0, r2, #1
 800a114:	bf13      	iteet	ne
 800a116:	3201      	addne	r2, #1
 800a118:	3401      	addeq	r4, #1
 800a11a:	4672      	moveq	r2, lr
 800a11c:	f022 0201 	bicne.w	r2, r2, #1
 800a120:	1063      	asrs	r3, r4, #1
 800a122:	0852      	lsrs	r2, r2, #1
 800a124:	07e1      	lsls	r1, r4, #31
 800a126:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a12a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a12e:	bf48      	it	mi
 800a130:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a134:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a138:	4614      	mov	r4, r2
 800a13a:	e781      	b.n	800a040 <__ieee754_sqrt+0x34>
 800a13c:	0ad9      	lsrs	r1, r3, #11
 800a13e:	3815      	subs	r0, #21
 800a140:	055b      	lsls	r3, r3, #21
 800a142:	2900      	cmp	r1, #0
 800a144:	d0fa      	beq.n	800a13c <__ieee754_sqrt+0x130>
 800a146:	02cd      	lsls	r5, r1, #11
 800a148:	d50a      	bpl.n	800a160 <__ieee754_sqrt+0x154>
 800a14a:	f1c2 0420 	rsb	r4, r2, #32
 800a14e:	fa23 f404 	lsr.w	r4, r3, r4
 800a152:	1e55      	subs	r5, r2, #1
 800a154:	4093      	lsls	r3, r2
 800a156:	4321      	orrs	r1, r4
 800a158:	1b42      	subs	r2, r0, r5
 800a15a:	e78a      	b.n	800a072 <__ieee754_sqrt+0x66>
 800a15c:	4610      	mov	r0, r2
 800a15e:	e7f0      	b.n	800a142 <__ieee754_sqrt+0x136>
 800a160:	0049      	lsls	r1, r1, #1
 800a162:	3201      	adds	r2, #1
 800a164:	e7ef      	b.n	800a146 <__ieee754_sqrt+0x13a>
 800a166:	4680      	mov	r8, r0
 800a168:	e7bd      	b.n	800a0e6 <__ieee754_sqrt+0xda>
 800a16a:	bf00      	nop
 800a16c:	7ff00000 	.word	0x7ff00000

0800a170 <with_errno>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	4604      	mov	r4, r0
 800a174:	460d      	mov	r5, r1
 800a176:	4616      	mov	r6, r2
 800a178:	f7ff f978 	bl	800946c <__errno>
 800a17c:	4629      	mov	r1, r5
 800a17e:	6006      	str	r6, [r0, #0]
 800a180:	4620      	mov	r0, r4
 800a182:	bd70      	pop	{r4, r5, r6, pc}

0800a184 <xflow>:
 800a184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a186:	4614      	mov	r4, r2
 800a188:	461d      	mov	r5, r3
 800a18a:	b108      	cbz	r0, 800a190 <xflow+0xc>
 800a18c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a190:	e9cd 2300 	strd	r2, r3, [sp]
 800a194:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a198:	4620      	mov	r0, r4
 800a19a:	4629      	mov	r1, r5
 800a19c:	f7f6 f9d0 	bl	8000540 <__aeabi_dmul>
 800a1a0:	2222      	movs	r2, #34	; 0x22
 800a1a2:	b003      	add	sp, #12
 800a1a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1a8:	f7ff bfe2 	b.w	800a170 <with_errno>

0800a1ac <__math_uflow>:
 800a1ac:	b508      	push	{r3, lr}
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a1b4:	f7ff ffe6 	bl	800a184 <xflow>
 800a1b8:	ec41 0b10 	vmov	d0, r0, r1
 800a1bc:	bd08      	pop	{r3, pc}

0800a1be <__math_oflow>:
 800a1be:	b508      	push	{r3, lr}
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a1c6:	f7ff ffdd 	bl	800a184 <xflow>
 800a1ca:	ec41 0b10 	vmov	d0, r0, r1
 800a1ce:	bd08      	pop	{r3, pc}

0800a1d0 <fabs>:
 800a1d0:	ec51 0b10 	vmov	r0, r1, d0
 800a1d4:	ee10 2a10 	vmov	r2, s0
 800a1d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1dc:	ec43 2b10 	vmov	d0, r2, r3
 800a1e0:	4770      	bx	lr

0800a1e2 <finite>:
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	ed8d 0b00 	vstr	d0, [sp]
 800a1e8:	9801      	ldr	r0, [sp, #4]
 800a1ea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a1ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a1f2:	0fc0      	lsrs	r0, r0, #31
 800a1f4:	b002      	add	sp, #8
 800a1f6:	4770      	bx	lr

0800a1f8 <scalbn>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	ec55 4b10 	vmov	r4, r5, d0
 800a1fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a202:	4606      	mov	r6, r0
 800a204:	462b      	mov	r3, r5
 800a206:	b99a      	cbnz	r2, 800a230 <scalbn+0x38>
 800a208:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a20c:	4323      	orrs	r3, r4
 800a20e:	d036      	beq.n	800a27e <scalbn+0x86>
 800a210:	4b39      	ldr	r3, [pc, #228]	; (800a2f8 <scalbn+0x100>)
 800a212:	4629      	mov	r1, r5
 800a214:	ee10 0a10 	vmov	r0, s0
 800a218:	2200      	movs	r2, #0
 800a21a:	f7f6 f991 	bl	8000540 <__aeabi_dmul>
 800a21e:	4b37      	ldr	r3, [pc, #220]	; (800a2fc <scalbn+0x104>)
 800a220:	429e      	cmp	r6, r3
 800a222:	4604      	mov	r4, r0
 800a224:	460d      	mov	r5, r1
 800a226:	da10      	bge.n	800a24a <scalbn+0x52>
 800a228:	a32b      	add	r3, pc, #172	; (adr r3, 800a2d8 <scalbn+0xe0>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	e03a      	b.n	800a2a6 <scalbn+0xae>
 800a230:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a234:	428a      	cmp	r2, r1
 800a236:	d10c      	bne.n	800a252 <scalbn+0x5a>
 800a238:	ee10 2a10 	vmov	r2, s0
 800a23c:	4620      	mov	r0, r4
 800a23e:	4629      	mov	r1, r5
 800a240:	f7f5 ffc8 	bl	80001d4 <__adddf3>
 800a244:	4604      	mov	r4, r0
 800a246:	460d      	mov	r5, r1
 800a248:	e019      	b.n	800a27e <scalbn+0x86>
 800a24a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a24e:	460b      	mov	r3, r1
 800a250:	3a36      	subs	r2, #54	; 0x36
 800a252:	4432      	add	r2, r6
 800a254:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a258:	428a      	cmp	r2, r1
 800a25a:	dd08      	ble.n	800a26e <scalbn+0x76>
 800a25c:	2d00      	cmp	r5, #0
 800a25e:	a120      	add	r1, pc, #128	; (adr r1, 800a2e0 <scalbn+0xe8>)
 800a260:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a264:	da1c      	bge.n	800a2a0 <scalbn+0xa8>
 800a266:	a120      	add	r1, pc, #128	; (adr r1, 800a2e8 <scalbn+0xf0>)
 800a268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a26c:	e018      	b.n	800a2a0 <scalbn+0xa8>
 800a26e:	2a00      	cmp	r2, #0
 800a270:	dd08      	ble.n	800a284 <scalbn+0x8c>
 800a272:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a276:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a27a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a27e:	ec45 4b10 	vmov	d0, r4, r5
 800a282:	bd70      	pop	{r4, r5, r6, pc}
 800a284:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a288:	da19      	bge.n	800a2be <scalbn+0xc6>
 800a28a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a28e:	429e      	cmp	r6, r3
 800a290:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a294:	dd0a      	ble.n	800a2ac <scalbn+0xb4>
 800a296:	a112      	add	r1, pc, #72	; (adr r1, 800a2e0 <scalbn+0xe8>)
 800a298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1e2      	bne.n	800a266 <scalbn+0x6e>
 800a2a0:	a30f      	add	r3, pc, #60	; (adr r3, 800a2e0 <scalbn+0xe8>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	f7f6 f94b 	bl	8000540 <__aeabi_dmul>
 800a2aa:	e7cb      	b.n	800a244 <scalbn+0x4c>
 800a2ac:	a10a      	add	r1, pc, #40	; (adr r1, 800a2d8 <scalbn+0xe0>)
 800a2ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0b8      	beq.n	800a228 <scalbn+0x30>
 800a2b6:	a10e      	add	r1, pc, #56	; (adr r1, 800a2f0 <scalbn+0xf8>)
 800a2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2bc:	e7b4      	b.n	800a228 <scalbn+0x30>
 800a2be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a2c2:	3236      	adds	r2, #54	; 0x36
 800a2c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a2c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	4b0c      	ldr	r3, [pc, #48]	; (800a300 <scalbn+0x108>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	e7e8      	b.n	800a2a6 <scalbn+0xae>
 800a2d4:	f3af 8000 	nop.w
 800a2d8:	c2f8f359 	.word	0xc2f8f359
 800a2dc:	01a56e1f 	.word	0x01a56e1f
 800a2e0:	8800759c 	.word	0x8800759c
 800a2e4:	7e37e43c 	.word	0x7e37e43c
 800a2e8:	8800759c 	.word	0x8800759c
 800a2ec:	fe37e43c 	.word	0xfe37e43c
 800a2f0:	c2f8f359 	.word	0xc2f8f359
 800a2f4:	81a56e1f 	.word	0x81a56e1f
 800a2f8:	43500000 	.word	0x43500000
 800a2fc:	ffff3cb0 	.word	0xffff3cb0
 800a300:	3c900000 	.word	0x3c900000

0800a304 <_init>:
 800a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a306:	bf00      	nop
 800a308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30a:	bc08      	pop	{r3}
 800a30c:	469e      	mov	lr, r3
 800a30e:	4770      	bx	lr

0800a310 <_fini>:
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a312:	bf00      	nop
 800a314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a316:	bc08      	pop	{r3}
 800a318:	469e      	mov	lr, r3
 800a31a:	4770      	bx	lr
